<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2023-02-08T03:33:48.003Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>easterCat</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nvm管理工具</title>
    <link href="http://yoursite.com/2023/02/08/Nvm%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2023/02/08/Nvm%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</id>
    <published>2023-02-08T03:33:38.000Z</published>
    <updated>2023-02-08T03:33:48.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NVM"><a href="#NVM" class="headerlink" title="NVM"></a>NVM</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>Linux 安装</p></blockquote><pre><code>wget -qO- https://raw.githubusercontent.com/creationix/nvm/v1/install.sh | bashsource ~/.bashrc</code></pre><blockquote><p>MacOS 安装</p></blockquote><pre><code>curl -0- https://raw.githubusercontent.com/creationix/nvm/v8/install.sh | bash</code></pre><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre><code># 显示所有信息nvm --help# 显示当前安装的nvm版本nvm --version# 安装指定的版本，如果不存在.nvmrc,就从指定的资源下载安装nvm install [-s] &lt;version&gt;# 安装指定的版本，平且下载最新的npmnvm install [-s] &lt;version&gt;  -latest-npm# 卸载指定的版本nvm uninstall &lt;version&gt;# 使用已经安装的版本  切换版本nvm use [--silent] &lt;version&gt;# 查看当前使用的node版本nvm current# 查看已经安装的版本nvm ls# 查看指定版本nvm ls  &lt;version&gt;# 显示远程所有可以安装的nodejs版本nvm ls-remote# 查看长期支持的版本nvm ls-remote --lts# 安装罪行的npmnvm install-latest-npm# 重新安装指定的版本nvm reinstall-packages &lt;version&gt;# 显示nvm的cachenvm cache dir# 清空nvm的cachenvm cache clear</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;NVM&quot;&gt;&lt;a href=&quot;#NVM&quot; class=&quot;headerlink&quot; title=&quot;NVM&quot;&gt;&lt;/a&gt;NVM&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;b</summary>
      
    
    
    
    
    <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Npm配置文件</title>
    <link href="http://yoursite.com/2023/02/08/Npm%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2023/02/08/Npm%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2023-02-08T03:32:46.000Z</published>
    <updated>2023-02-08T03:32:57.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul><li>.npmrc</li><li>.npmignore</li><li>.npm</li></ul><h3 id="npmrc"><a href="#npmrc" class="headerlink" title=".npmrc"></a>.npmrc</h3><pre><code># 查看 .npmrc 文件在哪里npm config ls -l</code></pre><blockquote><p>npm 的缓存目录在哪里</p></blockquote><pre><code>npm config get cache</code></pre><blockquote><p>npm 的全局 node 包在哪里</p></blockquote><blockquote><p>那些通过 <code>npm install xxx -g</code> 或者 <code>cnpm install xxx -g</code> 或者 <code>yarn global add xxx</code> 安装的 <code>xxx</code> 文件，到底安装在什么地方？</p></blockquote><pre><code>npm config get prefix</code></pre><blockquote><p>默认情况下：</p></blockquote><ul><li>Windows 系统的路径基础部分是： <code>%APPDATA%/npm/</code></li><li>MacOS 系统下路径基础部分是 <code>/usr/local</code></li></ul><blockquote><p>默认的全局安装包位置：</p></blockquote><ul><li><p>Windows 系统下路径是：</p><pre><code>%APPDATA%/npm/node_modules/</code></pre></li><li><p>MacOS 系统下路径是：</p><pre><code>/usr/local/lib/node_modules/</code></pre></li></ul><blockquote><p>当然对于全局包路径的查看，还可以使用下面的命令：<code>npm root -g</code></p></blockquote><h3 id="npmignore"><a href="#npmignore" class="headerlink" title=".npmignore"></a>.npmignore</h3><h3 id="npm"><a href="#npm" class="headerlink" title=".npm"></a>.npm</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;配置文件&quot;&gt;&lt;a href=&quot;#配置文件&quot; class=&quot;headerlink&quot; title=&quot;配置文件&quot;&gt;&lt;/a&gt;配置文件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;.npmrc&lt;/li&gt;
&lt;li&gt;.npmignore&lt;/li&gt;
&lt;li&gt;.npm&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 </summary>
      
    
    
    
    
    <category term="Npm" scheme="http://yoursite.com/tags/Npm/"/>
    
  </entry>
  
  <entry>
    <title>Npm脚本命令</title>
    <link href="http://yoursite.com/2023/02/08/Npm%E8%84%9A%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2023/02/08/Npm%E8%84%9A%E6%9C%AC%E5%91%BD%E4%BB%A4/</id>
    <published>2023-02-08T03:32:00.000Z</published>
    <updated>2023-02-08T03:32:12.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="npm-cli-脚本命令"><a href="#npm-cli-脚本命令" class="headerlink" title="npm-cli 脚本命令"></a>npm-cli 脚本命令</h2><ul><li>npm access：在发布的包上设置访问级别</li><li>npm adduser：Add a registry user account 添加仓库用户账户</li><li>npm audit：Run a security audit 执行安全审计（自动安装应该更新的脆弱的模块包）</li><li>bin：显示 npm bin 文件夹</li><li>bugs：在浏览器中打开依赖包的 BUG 讨论社区</li><li>build：构建依赖包</li><li>cache：管理模块的缓存</li><li>ci：Install a project with a clean slate</li><li>completion：Tab Completion for npm</li><li>config：管理 npm 配置文件</li><li>dedupe：Reduce duplication</li><li>deprecate：Deprecate a version of a package</li><li>npm dist-tag：修改依赖包分发标签</li><li>docs：在浏览器中打开依赖包的文档</li><li>doctor：Check your environments</li><li>edit：Edit an installed package</li><li>explore：Browse an installed package</li><li>help-search：Search npm help documentation</li><li>help：查看某条命令的详细帮助</li><li>hook：Manage registry hooks</li><li>init：创建 npm 依赖包配置文件</li><li>install-ci-test：Install a project with a clean slate and run tests</li><li>install-test：Install package(s) and run tests</li><li>install：安装依赖包</li><li>link：符号连接包文件夹</li><li>logout：Log out of the registry</li><li>npm ls：列出已安装依赖包</li><li>npm：javascript package manager</li><li>org：Manage orgs</li><li>outdated：检查过期的依赖包</li><li>owner：Manage package owners</li><li>pack：Create a tarball from a package</li><li>ping：Ping npm registry</li><li>prefix：显示路径前缀</li><li>profile：变更注册表配置文件上的设置</li><li>prune：删除无关的软件包</li><li>publish：发布依赖包</li><li>rebuild：重新构建依赖包</li><li>repo：在浏览器中打开依赖包的储存仓库</li><li>restart：Restart a package</li><li>root：查看包的安装路径</li><li>run-script：运行 npm script 脚本</li><li>search：搜索依赖包</li><li>shrinkwrap：Lock down dependency versions for publication</li><li>star：收藏依赖包</li><li>stars：查看依赖包收藏夹</li><li>start：启动依赖包</li><li>stop：停止依赖包</li><li>team：Manage organization teams and team memberships</li><li>test：测试依赖包</li><li>token：管理鉴权令牌</li><li>uninstall：移除依赖包</li><li>unpublish：从公有仓库中移除依赖包</li><li>update：U 更新模块</li><li>version：查看模块版本</li><li>npm view：查看模块的注册信息</li><li>whoami：显示当前 npm 用户信息</li></ul><h3 id="npm-init"><a href="#npm-init" class="headerlink" title="npm init"></a>npm init</h3><blockquote><p>创建项目：</p></blockquote><pre><code># 按提示输入项目信息npm init# 使用默认值创建项目npm init -y</code></pre><h3 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a>npm install</h3><blockquote><p>安装依赖模块：</p></blockquote><pre><code>npm install# 或者npm i</code></pre><h3 id="安装多个模块"><a href="#安装多个模块" class="headerlink" title="安装多个模块"></a>安装多个模块</h3><blockquote><p>无需为你要安装的每个模块都输入一遍 <code>npm i</code> 指令：</p></blockquote><pre><code>npm i gulp-pugnpm i gulp-debugnpm i gulp-sass# 只需输入一行命令即可一次性批量安装模块npm i gulp-pug gulp-debug gulp-sass# 更便捷的是，如果安装的所有模块的前缀是相同的，则可以这样安装，无需输入完整模块名npm i gulp&#123;-debug,-sass,-pug&#125;</code></pre><h3 id="安装标识"><a href="#安装标识" class="headerlink" title="安装标识"></a>安装标识</h3><pre><code># 安装包到生产环境依赖中npm i gulp --save-prod# 更简化，你可以使用 `-P` 标识npm i gulp -P# 同理，开发环境下的依赖安装，亦可使用 `-D` 代替 `--save-dev`npm i gulp -D</code></pre><blockquote><p>当不带任何安装标识时，npm 默认将模块作为依赖项目添加到 <code>package.json</code> 文件中。如果你想避免这样，你可以使用 <code>no-save</code> 安装：</p></blockquote><pre><code>npm i vue --no-save</code></pre><h3 id="安装指定版本"><a href="#安装指定版本" class="headerlink" title="安装指定版本"></a>安装指定版本</h3><pre><code># 默认安装 latest 标签的版本# 如果没有指定 latest，就是最新发布的版本npm install react# 如果你想安装一个不是最新版本的安装包npm i react@0# 鉴于记住标签比记住版本数字容易，亦可使用 `npm v` 命令来查到的版本信息列表中的 `dist-tag` 来安装npm i react@beta</code></pre><h3 id="npm-search"><a href="#npm-search" class="headerlink" title="npm search"></a>npm search</h3><pre><code># 搜索依赖包npm search &lt;package-name&gt;npm search react# 或者npm s &lt;package-name&gt;npm se &lt;package-name&gt;npm find &lt;package-name&gt;</code></pre><h3 id="npm-view"><a href="#npm-view" class="headerlink" title="npm view"></a>npm view</h3><pre><code># 查看包信息npm view &lt;package-name&gt;npm view react# 或者npm v react# 如果只想看安装包最近的版本信息npm v &lt;package-name&gt; version# 如果想获取安装包完整的版本信息列表，可使用复数形式npm v &lt;package-name&gt; versions</code></pre><h3 id="卸载模块"><a href="#卸载模块" class="headerlink" title="卸载模块"></a>卸载模块</h3><blockquote><p>如果你不想转到 <code>package.json</code> 文件并手动删除依赖包，则可以用以下方法删除：</p></blockquote><pre><code>npm uninstall vue</code></pre><blockquote><p>这个命令会删除 <code>node_modules</code> 文件夹及 <code>package.json</code> 中对应的包。当然，你也可以用 <code>rm</code>、<code>un</code> 或 <code>r</code> 来达到相同的效果：</p></blockquote><p><code>npm rm vue</code></p><blockquote><p>如果由于某些原因，你只想从 <code>node_modules</code> 文件夹中删除安装包，但是想在 <code>package.json</code> 中保留其依赖项，那么你可以使用 <code>no-save</code> 标识。</p></blockquote><pre><code>npm rm vue --no-save</code></pre><h3 id="npm-ls"><a href="#npm-ls" class="headerlink" title="npm ls"></a>npm ls</h3><blockquote><p><code>npm ls</code>此命令将以树状结构将已安装的软件包的所有版本及其依赖项打印到标准输出。</p></blockquote><pre><code># 查看当前仓库使用模块（嵌套）npm ls# 查看当前仓库使用模块（仅单层）npm ls --depth 0# 查看全局模块包已安装模块npm ls -g# 查看全局模块包已安装模块（仅单层）npm ls -g --depth 0</code></pre><h3 id="npm-outdate"><a href="#npm-outdate" class="headerlink" title="npm outdate"></a>npm outdate</h3><blockquote><p>大多数时候，你需要保持本地依赖的更新，你可以在项目目录下先查看一下安装包有没有版本更新：</p></blockquote><p><code>npm outdate</code></p><h3 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h3><pre><code>npm run testsnpm testnpm t</code></pre><h3 id="显示可用脚本"><a href="#显示可用脚本" class="headerlink" title="显示可用脚本"></a>显示可用脚本</h3><blockquote><p>我们可以通过</p></blockquote><p><code>npm run</code></p><h3 id="安装-Github-包"><a href="#安装-Github-包" class="headerlink" title="安装 Github 包"></a>安装 Github 包</h3><blockquote><p>可以直接安装来自 Github Repo 的模块：</p></blockquote><pre><code>npm i https://github.com/sindresorhus/gulp-debug</code></pre><blockquote><p>或者你可以忽略域名安装：</p></blockquote><pre><code>npm i sindresorhus/gulp-debug</code></pre><h3 id="打开模块包仓库主页"><a href="#打开模块包仓库主页" class="headerlink" title="打开模块包仓库主页"></a>打开模块包仓库主页</h3><blockquote><p>当然可以直接谷歌搜索，然后找到对应的包链接打开：</p></blockquote><pre><code>npm repo create-react-app</code></pre><h3 id="列出所有-NPM-环境的可用变量"><a href="#列出所有-NPM-环境的可用变量" class="headerlink" title="列出所有 NPM 环境的可用变量"></a>列出所有 NPM 环境的可用变量</h3><blockquote><p>你可以使用这个命令来列出所有 NPM 环境的可用变量：</p></blockquote><pre><code>npm run env | grep npm_</code></pre><blockquote><p>默认情况下，npm 会重命名你的变量，给其加上前缀 <code>npm_package</code>，并将其结构保留在 <code>package.json</code> 文件中，即变为 <code>config_build_folder</code>。</p></blockquote><h3 id="在-npm-脚本中使用-npm-变量"><a href="#在-npm-脚本中使用-npm-变量" class="headerlink" title="在 npm 脚本中使用 npm 变量"></a>在 npm 脚本中使用 npm 变量</h3><blockquote><p>你可以看到可用变量的完整列表，如果你想使用这些变量中的任何值，就可以在 <code>package.json</code> 中使用：</p></blockquote><pre><code>&quot;scripts&quot;: &#123;    &quot;build&quot;: &quot;gulp build --dist $npm_package_config_build_folder&quot;&#125;</code></pre><blockquote><p>当你执行 <code>npm run build</code> 的时候，实际执行的是这样的：</p></blockquote><pre><code>gulp build --dist ./dist</code></pre><h3 id="检查过期的依赖包"><a href="#检查过期的依赖包" class="headerlink" title="检查过期的依赖包"></a>检查过期的依赖包</h3><pre><code># 查看过期依赖包npm outdated# 以 JSON 形式输出npm outdated --json</code></pre><h3 id="设置镜像源"><a href="#设置镜像源" class="headerlink" title="设置镜像源"></a>设置镜像源</h3><blockquote><p>临时使用</p></blockquote><pre><code>npm --registry https://registry.npm.taobao.org install express</code></pre><blockquote><p>持久使用</p></blockquote><pre><code>npm config set registry https://registry.npm.taobao.org</code></pre><h3 id="npm-create"><a href="#npm-create" class="headerlink" title="npm create"></a>npm create</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;npm-cli-脚本命令&quot;&gt;&lt;a href=&quot;#npm-cli-脚本命令&quot; class=&quot;headerlink&quot; title=&quot;npm-cli 脚本命令&quot;&gt;&lt;/a&gt;npm-cli 脚本命令&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;npm access：在发布的包上设置访问级别&lt;</summary>
      
    
    
    
    
    <category term="Npm" scheme="http://yoursite.com/tags/Npm/"/>
    
  </entry>
  
  <entry>
    <title>Npm版本控制</title>
    <link href="http://yoursite.com/2023/02/08/Npm%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    <id>http://yoursite.com/2023/02/08/Npm%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</id>
    <published>2023-02-08T03:31:02.000Z</published>
    <updated>2023-02-08T03:31:26.534Z</updated>
    
    <content type="html"><![CDATA[<h2 id="npm-版本控制"><a href="#npm-版本控制" class="headerlink" title="npm 版本控制"></a>npm 版本控制</h2><h3 id="查看依赖包版本"><a href="#查看依赖包版本" class="headerlink" title="查看依赖包版本"></a>查看依赖包版本</h3><blockquote><p>通过执行以下命令能够查看某个依赖包的最新版本。</p></blockquote><pre><code># 查看某个 package 的注册信息npm view &lt;package-name&gt;# 查看某个 package 的最新版本npm view &lt;package-name&gt; version# 查看某个 package 在 npm 服务器上所发布过的版本npm view &lt;package-name&gt; versions# 查看仓库依赖树上所有包的版本信息npm ls</code></pre><h3 id="语义化版本规范"><a href="#语义化版本规范" class="headerlink" title="语义化版本规范"></a>语义化版本规范</h3><blockquote><p>npm 中的包模块版本都需要遵循 SemVer（Semantic Version，语义化版本）规范，这是由 Github 起草的一个具有指导意义的，统一的版本号表示规则。</p></blockquote><h3 id="标准版本"><a href="#标准版本" class="headerlink" title="标准版本"></a>标准版本</h3><blockquote><p>SemVer 规范的标准版本号采用 <code>X.Y.Z</code> 的格式，其中 X、Y 和 Z 为非负的整数，且禁止在数字前方补零。X 是主版本号、Y 是次版本号、而 Z 为修订号。每个元素必须以数值来递增。</p></blockquote><ul><li>主版本号（major）：当你做了不兼容的 API 修改</li><li>次版本号（minor）：当你做了向下兼容的功能性新增</li><li>修订号（patch）：当你做了向下兼容的问题修正。</li></ul><blockquote><p>版本是严格递增的，例如：16.2.0 -&gt; 16.2.1 -&gt; 16.3.0 -&gt; 16.4.0</p></blockquote><h3 id="先行版本"><a href="#先行版本" class="headerlink" title="先行版本"></a>先行版本</h3><blockquote><p>当某个版本改动比较大、并非稳定而且可能无法满足预期的兼容性需求时，你可能要先发布一个先行版本。</p></blockquote><blockquote><p>先行版本的格式是在修订版本号后面加上一个连接号（<code>-</code>），再加上一连串以点（<code>.</code>）分割的标识符，标识符可以由英文、数字和连接号（<code>[0-9A-Za-z]</code>）组成。</p></blockquote><blockquote><p>例如：</p></blockquote><pre><code># 格式major.minor.patch-&#123;identifier&#125;.&#123;identifier&#125;.&#123;identifier&#125;# 示例 1：通常第一个 identifier 为版本号标签，关于版本号标签请看下文# 常用于先行版本的版本号标签是 beta、rc、experimental3-alpha.1</code></pre><h3 id="版本号标签"><a href="#版本号标签" class="headerlink" title="版本号标签"></a>版本号标签</h3><blockquote><p>常用的版本号标签如下：</p></blockquote><table><thead><tr><th align="left">版本号标签</th><th align="left">语义</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">latest</td><td align="left">默认</td><td align="left">不指定版本情况下默认安装的最新版本</td></tr><tr><td align="left">alpha</td><td align="left">内测</td><td align="left">内部测试版，一般不向外部发布，会有很多 BUG，一般只有测试人员使用</td></tr><tr><td align="left">beta</td><td align="left">公测</td><td align="left">也是测试版本，这个阶段的版本会一直加入新的功能，在 Alpha 版之后推出</td></tr><tr><td align="left">next</td><td align="left">下一个</td><td align="left"></td></tr><tr><td align="left">rc</td><td align="left">候选</td><td align="left">Release Candidate 系统平台上就是发行候选版本。RC 版不会再加入新的功能了，主要着重于除错</td></tr><tr><td align="left">experimental</td><td align="left">实验</td><td align="left"></td></tr></tbody></table><blockquote><p>给版本号添加标签的方式有两种：</p></blockquote><pre><code># 第一种方式：在发布时指定标签#  version-tag 替换为版本号标签的名称npm publish --tag &lt;version-tag&gt;# 示例npm publish --tag next react@0npm publish --tag experimental vue@0# 第二种方式：发布后执行以下命令#  package-name 替换为 npm 包名字#  version 替换为 npm 包的指定版本#  version-tag 替换为版本号标签的名称npm dist-tag add &lt;package-name&gt;@&lt;version&gt; &lt;version-tag&gt;# 示例npm dist-tag add react@0 alphanpm dist-tag add vue@0 next</code></pre><h3 id="版本号大小比较"><a href="#版本号大小比较" class="headerlink" title="版本号大小比较"></a>版本号大小比较</h3><blockquote><p>格式：</p></blockquote><pre><code>major.minor.patch-[pre-release]+[build-metadata]</code></pre><blockquote><p>版本号大小比较是从左往右依次比较 major、minor、patch、pre-release。build-metadata 对优先级无影响。</p></blockquote><blockquote><p>现行版本优先级低于正式版本，如：</p></blockquote><ul><li><pre><code>1-alpha.1 &lt; 1</code></pre></li><li><pre><code>0-alpha.1 &lt; 0-beta &lt; 0</code></pre></li></ul><blockquote><blockquote><p>版本号大小与发版时间有关系吗？答案是 <code>没有关系</code>。</p></blockquote></blockquote><blockquote><p>例如：依次发布 <code>1.0.0-alpha.1</code>、<code>1.0.0-alpha.3</code>、<code>1.0.0-alpha.2</code>。用户安装了 <code>1.0.0-alpha.1</code>，此时升级版本会安装 <code>1.0.0-alpha.3</code>。</p></blockquote><blockquote><blockquote><p>版本号升级与标签之间的关系？</p></blockquote></blockquote><blockquote><p>执行</p></blockquote><pre><code>npm install &lt;package-name&gt;</code></pre><p>或</p><pre><code>npm update &lt;package-name&gt;</code></pre><p>等同于执行</p><pre><code>npm install &lt;package-name&gt;@latest</code></pre><p>或</p><pre><code>npm update &lt;pacakge-name&gt;@latest</code></pre><p>。用户当前版本低于 <code>latest</code> 标签下的最高版本，而低于其他标签下的版本时，会安装其他标签下的版本。</p><blockquote><p>例如：</p></blockquote><ul><li>用户安装了 <code>1.0.0-alpha.1</code>（alpha），此时发布了 <code>1.0.0</code>（latest），用户升级后的版本是 <code>1.0.0</code>（latest）</li><li>用户安装了 <code>1.0.0-alpha.1</code>（alpha），此时发布 <code>1.0.0-beta.0</code>（beta），用户升级后的版本时 <code>1.0.0-beta.0</code>（beta）</li><li>用户安装了 <code>1.0.0</code>（latest），此时发布了 <code>2.0.0-alpha.1</code>（alpha），用户升级后的版本不变，仍然是 <code>1.0.0</code>（latest）</li></ul><h3 id="版本工具使用"><a href="#版本工具使用" class="headerlink" title="版本工具使用"></a>版本工具使用</h3><blockquote><p>在开发中肯定少不了对一些版本号的操作，如果这些版本号符合 SemVer 规范 ，我们可以借助用于操作版本的 npm 包 semver 来帮助我们进行比较版本大小、提取版本信息等操作。</p></blockquote><pre><code># 安装工具npm install semver</code></pre><blockquote><p>具体用法示例：</p></blockquote><pre><code>// 比较版本号大小semver.gt(&#39;3&#39;, &#39;7&#39;); // falsesemver.lt(&#39;3&#39;, &#39;7&#39;); // true// 判断版本号是否符合规范，返回解析后符合规范的版本号semver.valid(&#39;3&#39;); // &#39;3&#39;semver.valid(&#39;a.b.c&#39;); // null// 将其他版本号强制转换成 semver 版本号semver.valid(semver.coerce(&#39;v2&#39;)); // &#39;0&#39;semver.valid(semver.coerce(&#39;3-alpha&#39;)); // &#39;7&#39;// 一些其他用法semver.clean(&#39;  =v3 &#39;); // &#39;3&#39;semver.satisfies(&#39;3&#39;, &#39;x || &gt;= 0 || 0 - 23&#39;); // truesemver.minVersion(&#39;&gt;=0&#39;); // &#39;0&#39;</code></pre><blockquote><p>更多关于 semver 用法，请查阅官网 <a href="https://github.com/npm/node-semver">https://github.com/npm/node-semver</a></p></blockquote><h3 id="依赖版本管理"><a href="#依赖版本管理" class="headerlink" title="依赖版本管理"></a>依赖版本管理</h3><blockquote><p>我们经常看到，在 <code>package.json</code> 中各种依赖的不同写法：</p></blockquote><pre><code>&quot;dependencies&quot;: &#123;  &quot;signale&quot;: &quot;0&quot;,  &quot;figlet&quot;: &quot;*&quot;,  &quot;react&quot;: &quot;x&quot;,  &quot;table&quot;: &quot;~6&quot;,  &quot;yargs&quot;: &quot;^0&quot;&#125;</code></pre><blockquote><p>前三个容易理解：</p></blockquote><ul><li><code>&quot;signale&quot;: &quot;1.4.0&quot;</code>：固定版本号</li><li><code>&quot;figlet&quot;: &quot;*&quot;</code>：任意版本号（即 <code>&gt;=0.0.0</code>）</li><li><code>&quot;react&quot;: &quot;16.x&quot;</code>：匹配主要版本（<code>&gt;=16.0.0 &lt; 17.0.0</code>）</li><li><code>&quot;react&quot;: &quot;16.3.x&quot;</code>：匹配主要版本和次要版本（<code>&gt;=16.3.0 &lt;16.4.0</code>）</li></ul><blockquote><p>再看看后面两个，版本号包含 <code>~</code> 和 <code>^</code> 符号：</p></blockquote><ul><li><code>~</code>：当安装依赖时获取到有最新版本时，安装到 <code>x.y.z</code> 中 <code>z</code> 的最新版本。即保持主版本号、次版本号不变的情况下，保持修订号的最新版本</li><li><code>^</code>：当安装依赖时获取到由最新版本时，安装到 <code>x.y.z</code> 中 <code>y</code> 和 <code>z</code> 都为最新版本。即保持主版本号不变的情况下，保持次版本号、修订版本号为最新版本。</li></ul><blockquote><p>在 <code>package.json</code> 中最常见应该时 <code>&quot;yargs&quot;: &quot;^14.0.0&quot;</code> 这种格式的依赖，因为我们在使用</p></blockquote><pre><code>npm install &lt;package-name&gt;</code></pre><p>安装包时，<code>npm</code> 默认安装当前最新版本，然后在所安装的版本号前加 <code>^</code> 号。</p><blockquote><p>注意，当主版本号为 <code>0</code> 的情况，会被认为是一个不稳定版本，情况与上面不同：</p></blockquote><ul><li>主版本号和次版本号都为 <code>0</code>: <code>^0.0.z</code>、<code>~0.0.z</code> 都被当作固定版本，安装依赖时均不会发生变化。 主版本号为 <code>0</code>: <code>^0.y.z</code> 表现和 <code>~0.y.z</code> 相同，只保持修订号为最新版本。</li></ul><blockquote><blockquote><p><code>1.0.0</code> 的版本号用于界定公共 API。当你的软件发布到了正式环境，或者有稳定的 API 时，就可以发布 1.0.0 版本了。所以，当你决定对外部发布一个正式版本的 npm 包时，把它的版本标为 1.0.0。</p></blockquote></blockquote><blockquote><p>除此以外，还包含以下规则：</p></blockquote><ul><li><code>&gt;</code>：接受高于指定版本的任何版本</li><li><code>&gt;=</code> 接受等于或高于指定版本的任何版本</li><li><code>&lt;=</code>：接受等于或低于指定版本的任何版本</li><li><code>&lt;</code>：接受低于指定版本的任何版本</li><li><code>=</code>：接受确切的版本</li><li><code>-</code>：接受一定范围的版本，例如 <code>2.1.0 - 2.6.2</code></li><li><code>||</code>：组合集合，例如 <code>&lt; 2.1 || &gt; 2.6</code></li></ul><blockquote><p>可以合并其中一些符号，例如</p></blockquote><pre><code>0 || &gt;= 0 &lt; 0</code></pre><p>即使用 1.0.0 或从 1.1.0 开始但低于 1.2.0 的版本。</p><h3 id="锁定依赖版本"><a href="#锁定依赖版本" class="headerlink" title="锁定依赖版本"></a>锁定依赖版本</h3><blockquote><p>实际开发中，经常会因为各种依赖不一致而产生奇怪的问题，或者在某些场景下，我们不希望依赖被更新，建议在开发中使用 package-lock.json。</p></blockquote><blockquote><p>锁定依赖版本意味着在我们不手动执行更新的情况下，每次安装依赖都会安装固定版本。保证整个团队使用版本号一致的依赖。</p></blockquote><blockquote><p>每次安装固定版本，无需计算依赖版本范围，大部分场景下能大大加速依赖安装时间。</p></blockquote><blockquote><p>使用 package-lock.json 要确保 npm 的版本在 5.6 以上，因为在 5.0 - 5.6 中间，对 package-lock.json 的处理逻辑进行过几次更新，5.6 版本后处理逻辑逐渐稳定。</p></blockquote><blockquote><p>关于 package-lock.json 详细的结构，我们会在后面的章节进行解析。</p></blockquote><h3 id="定期更新依赖"><a href="#定期更新依赖" class="headerlink" title="定期更新依赖"></a>定期更新依赖</h3><blockquote><p>实际开发场景下，我们虽然不需要每次都去安装新的版本，仍然需要定时去升级依赖版本，来让我们享受依赖包升级带来的问题修复、性能提升、新特性更新。</p></blockquote><blockquote><p>使用 <code>npm outdated</code> 可以帮助我们列出哪些还没有升级到最新版本的依赖：</p></blockquote><ul><li>黄色表示不符合我们指定的语意化版本范围 - 不需要升级</li><li>红色表示符合指定的语意化版本范围 - 需要升级</li></ul><blockquote><p>执行 <code>npm update</code> 会升级所有的红色依赖。</p></blockquote><h3 id="依赖版本控制的最佳实践"><a href="#依赖版本控制的最佳实践" class="headerlink" title="依赖版本控制的最佳实践"></a>依赖版本控制的最佳实践</h3><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>语义化版本 2.0.0</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;npm-版本控制&quot;&gt;&lt;a href=&quot;#npm-版本控制&quot; class=&quot;headerlink&quot; title=&quot;npm 版本控制&quot;&gt;&lt;/a&gt;npm 版本控制&lt;/h2&gt;&lt;h3 id=&quot;查看依赖包版本&quot;&gt;&lt;a href=&quot;#查看依赖包版本&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="Npm" scheme="http://yoursite.com/tags/Npm/"/>
    
  </entry>
  
  <entry>
    <title>Npm描述文件</title>
    <link href="http://yoursite.com/2023/02/08/Npm%E6%8F%8F%E8%BF%B0%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2023/02/08/Npm%E6%8F%8F%E8%BF%B0%E6%96%87%E4%BB%B6/</id>
    <published>2023-02-08T03:30:18.000Z</published>
    <updated>2023-02-08T03:31:35.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NPM-包描述文件"><a href="#NPM-包描述文件" class="headerlink" title="NPM 包描述文件"></a>NPM 包描述文件</h2><blockquote><p><code>npm</code> 即 npde package module</p></blockquote><blockquote><p>CommonJS 的包规范的定义由 <code>包结构</code> 和 <code>包描述文件</code> 两个部分组成，前者用于组织包中的各种文件，后者则用于描述包的相关信息，以供外部读取分析。</p></blockquote><h3 id="包结构"><a href="#包结构" class="headerlink" title="包结构"></a>包结构</h3><blockquote><p>包实际上是一个存档文件，即一个目录直接打包为 <code>.zip</code> 或 <code>.tar.gz</code> 格式的文件，安装后解压还原为目录。完全符合 CommonJS 规范的包目录应该包含如下这些文件。</p></blockquote><ul><li><code>package.json</code>：包描述文件</li><li><code>bin</code>：用于存放二进制文件的目录</li><li><code>lib</code>：用于存放 JavaScript 代码的目录</li><li><code>doc</code>：用于存放文档的目录</li><li><code>test</code>：用于存放单元测试用例的代码</li></ul><h3 id="包描述文件"><a href="#包描述文件" class="headerlink" title="包描述文件"></a>包描述文件</h3><blockquote><p>包描述文件用于表达非代码相关的信息，它是一个 JSON 格式的文件，位于包的根目录下。NPM 的所有行为都与包描述文件的字段息息相关。</p></blockquote><blockquote><p>CommonJS 的包规范：</p></blockquote><ul><li><code>name</code>：包名。由小写的字母和数字组成，可以包含 <code>.</code>、<code>_</code> 被 <code>-</code>，但不允许出现空格。</li><li><code>descript</code>：包简介。</li><li><code>version</code>：版本号。语义化的版本号，详细定义参看 <a href="http://semver.org/">http://semver.org</a></li><li><code>keywords</code>：关键词数组，用于分类搜索。</li><li><code>maintainers</code>：包维护者列表。每个维护者由 name、email 和 web 这三个属性组成。</li><li><code>contributors</code>：贡献者列表。</li><li><code>bugs</code>：用于反馈 BUG 的网页地址或邮件地址</li><li><code>licenses</code>：许可证列表。</li><li><code>repositories</code>：托管源代码的位置列表，表明可以通过哪些方式和地址访问包的源代码</li><li><code>dependencies</code>：包所需要的依赖的包列表</li><li><code>devDependencies</code>：开发时所需要的依赖列表。</li><li><code>peerDependencies</code>：</li></ul><blockquote><p><code>其他可选字段</code></p></blockquote><ul><li><code>homepage</code>：当前包的网站地址</li><li><code>os</code>：操作系统支持列表。</li><li><code>cpu</code>：CPU 架构的支持列表</li><li><code>engine</code>：支持的 JavaScript 引擎列表</li><li><code>builtin</code>：标识当前包是否是内建在底层系统的标准组件</li><li><code>directories</code>：包目录说明</li><li><code>implements</code>：实现规范的列表</li><li><code>scripts</code>：脚本说明对象。主要被包管理器用于安装、编译、测试和卸载包。</li></ul><blockquote><p>NPM 包规范额外的字段：</p></blockquote><ul><li><p><code>author</code>：包作者</p></li><li><p><code>bin</code>：一些包作者希望包可以作为命令行工具使用。配置好 bin 字段后，通过</p><pre><code>npm install package_name -g</code></pre><p>命令可以将脚本添加到执行路径中，之后可以在命令行中直接执行</p></li><li><p><code>main</code>：模块引入方法 <code>require()</code> 在引入包的时，会优先检查这个字段，并将其作为保重其余模块的入口</p></li></ul><h3 id="必备属性"><a href="#必备属性" class="headerlink" title="必备属性"></a>必备属性</h3><h3 id="name"><a href="#name" class="headerlink" title="name"></a>name</h3><blockquote><p><code>name</code> 字段定义了模块的名称，其命名时需要遵循官方的一些规范和建议：</p></blockquote><ul><li>模块名会成为模块 URL、命令行中的一个参数或者一个文件夹名称，任何非 URL 安全的字符在模块名中都不能使用（我们可以使用 validate-npm-package-name 包来检测模块名是否合法）；</li><li>语义化模块名，可以帮助开发者更快的找到需要的模块，并且避免意外获取错误的模块；</li><li>若模块名称中存在一些符号，将符号去除后不得与现有的模块名重复，例如：由于 <code>react-router-dom</code> 已经存在，<code>react.router.dom</code>、<code>reactrouterdom</code> 都不可以再创建。</li></ul><blockquote><p><code>name</code> 字段不能与其他模块名重复，我们可以执行以下命令查看模块名是否已经被使用：</p></blockquote><pre><code>npm view &lt;package-name&gt;</code></pre><ul><li>如果模块存在，可以查看该模块的基本信息</li><li>如果该模块名称未被使用过，则会抛出 404 错误</li></ul><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><blockquote><p><code>npm</code> 包中的模块版本都需要遵循 SemVer 规范，相关介绍可查阅 npm 版本控制</p></blockquote><h3 id="描述信息"><a href="#描述信息" class="headerlink" title="描述信息"></a>描述信息</h3><h3 id="description-amp-keywords"><a href="#description-amp-keywords" class="headerlink" title="description &amp; keywords"></a>description &amp; keywords</h3><blockquote><p><code>description</code> 字段用于添加模块的描述信息，便于用户了解该模块。</p></blockquote><blockquote><p><code>keywords</code> 字段用于给模块添加关键字。</p></blockquote><blockquote><p>当我们使用 npm 检索模块时，会对模块中的 <code>description</code> 字段和 <code>keywords</code> 字段进行匹配，写好 <code>package.json</code> 中的 <code>description</code> 和 <code>keywords</code> 将有利于增加我们模块的曝光率。</p></blockquote><h3 id="author"><a href="#author" class="headerlink" title="author"></a>author</h3><blockquote><p><code>author</code> 字段用于描述主要作者。</p></blockquote><h3 id="contributors"><a href="#contributors" class="headerlink" title="contributors"></a>contributors</h3><blockquote><p><code>contributors</code> 字段用于描述贡献者。</p></blockquote><h3 id="homepage"><a href="#homepage" class="headerlink" title="homepage"></a>homepage</h3><blockquote><p><code>homepage</code> 字段用于描述项目的主页。</p></blockquote><h3 id="repository"><a href="#repository" class="headerlink" title="repository"></a>repository</h3><blockquote><p><code>repository</code> 字段用于描述模块的代码仓库。</p></blockquote><h3 id="bugs"><a href="#bugs" class="headerlink" title="bugs"></a>bugs</h3><blockquote><p><code>repository</code> 字段用于描述提交 BUG 的地址。</p></blockquote><h3 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h3><h3 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h3><blockquote><p><code>dependencies</code> 字段指定了项目生产环境运行所依赖的模块（生产环境使用），如 <code>antd</code>、<code>react</code>、<code>moment</code> 等依赖库：</p></blockquote><ul><li>它们是我们生产环境所需要的依赖项，在把项目作为一个 <code>npm</code> 包的时候，用户安装 <code>npm</code> 包时只会安装 <code>dependencies</code> 里面的依赖。</li></ul><h3 id="devDepenedencies"><a href="#devDepenedencies" class="headerlink" title="devDepenedencies"></a>devDepenedencies</h3><blockquote><p><code>devDependencies</code> 字段指定了项目开发所需要的模块（开发环境使用），如 <code>webpack</code>、<code>typescript</code>、<code>babel</code> 等：</p></blockquote><ul><li>在代码打包提交线上时，我们并不需要这些依赖包，所以我们将它放入 <code>devDependencies</code> 中。</li></ul><h3 id="peerDepenencies"><a href="#peerDepenencies" class="headerlink" title="peerDepenencies"></a>peerDepenencies</h3><blockquote><p><code>peerDependencies</code> 字段的目的是提示宿主环境去安装满足插件 <code>peerDependencies</code> 所指定依赖的包，然后在插件 <code>import</code> 或者 <code>require</code> 所依赖的包的时候，永远都是引用宿主环境统一安装的 <code>npm</code> 包，最终解决插件与所依赖包不一致的问题。</p></blockquote><blockquote><p>举个例子，就拿目前基于 React 的 UI 组件库 <code>ant-design@4.x</code> 来说，因该 UI 组件库只是提供一套 React 组件库，它要求宿主环境需要安装指定的 React 版本。具体可以看它 <code>package.json</code> 中的配置：</p></blockquote><pre><code>&#123;  &quot;peerDependencies&quot;: &#123;    &quot;react&quot;: &quot;&gt;=0&quot;,    &quot;react-dom&quot;: &quot;&gt;=0&quot;  &#125;&#125;</code></pre><blockquote><p>它要求宿主环境安装 <code>react@&gt;=16.9.0</code> 和 <code>react-dom@&gt;=16.9.0</code> 的版本，而在每个 <code>antd</code> 组件的定义文件顶部：</p></blockquote><pre><code>import * as React from &#39;react&#39;;import * as ReactDOM from &#39;react-dom&#39;;</code></pre><blockquote><p>组件中引入的 <code>react</code> 和 <code>react-dom</code> 包其实都是宿主环境提供的依赖包。</p></blockquote><blockquote><p>有了 <code>package.json</code> 文件，开发直接使用 <code>npm install</code> &#x2F; <code>yarn install</code> 命令，就会在当前目录中自动安装所需要的模块，安装完成项目所需的运行和开发环境就配置好了。</p></blockquote><h3 id="optionalDependencies"><a href="#optionalDependencies" class="headerlink" title="optionalDependencies"></a>optionalDependencies</h3><blockquote><p>不阻断安装依赖</p></blockquote><h3 id="bundledDependencies"><a href="#bundledDependencies" class="headerlink" title="bundledDependencies"></a>bundledDependencies</h3><blockquote><p>打包依赖</p></blockquote><h3 id="目录文件"><a href="#目录文件" class="headerlink" title="目录文件"></a>目录文件</h3><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><blockquote><p><code>main</code> 字段是 <code>package.json</code> 中的另一种元数据功能，它可以用来指定加载的入口文件。假如你的项目是一个 <code>npm</code> 包，当用户安装你的包后，<code>require(my-module)</code> 返回的是 <code>main</code> 字段中所列出文件的 <code>module.exports</code> 属性。</p></blockquote><blockquote><p>当不指定 <code>main</code> 字段时，默认值是模块根目录下面的 <code>index.js</code> 文件。</p></blockquote><h3 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h3><blockquote><p>用过 <code>vue-cli</code> 或 <code>create-react-app</code> 等脚手架的朋友们，不知道你们有没有好奇过，为什么安装这些脚手架后，就可以使用类似 <code>vue create</code>&#x2F;<code>create-react-app</code> 之类的命令，其实这和 <code>package.json</code> 中的 <code>bin</code> 字段有关。</p></blockquote><blockquote><p><code>bin</code> 字段用来指定各个内部命令对应的可执行文件的位置。当 <code>package.json</code> 提供了 <code>bin</code> 字段后，即相当于做了一个命令名和本地文件名的映射。</p></blockquote><blockquote><p>当用户安装带有 <code>bin</code> 字段的包时，</p></blockquote><ul><li><p>如果是全局安装，<code>npm</code> 将会使用符号链接把这些文件链接到</p><pre><code>/usr/local/node_modules/.bin/</code></pre></li><li><p>如果是本地安装，会链接到 <code>./node_modules/.bin/</code></p></li></ul><blockquote><p>举个例子，如果要使用 <code>my-app-cli</code> 作为命令时，可以配置以下 <code>bin</code> 字段：</p></blockquote><pre><code>&#123;  &quot;bin&quot;: &#123;    &quot;my-app-cli&quot;: &quot;./bin/cli.js&quot;  &#125;&#125;</code></pre><blockquote><p>上面代码指定，<code>my-app-cli</code> 命令对应的可执行文件为 <code>bin</code> 子目录下的 <code>cli.js</code>，因此在安装了 <code>my-app-cli</code> 包的项目中，就可以很方便地利用 <code>npm</code> 执行脚本：</p></blockquote><pre><code>&#123;  &quot;scripts&quot;: &#123;    &quot;start&quot;: &quot;node node_modules/.bin/my-app-cli&quot;  &#125;&#125;</code></pre><blockquote><p>咦，怎么看起来和 <code>vue create</code>&#x2F;c<code>reate-react-app</code> 之类的命令不太像？原因：</p></blockquote><ul><li>当需要 <code>node</code> 环境时就需要加上 <code>node</code> 前缀</li><li>如果加上 <code>node</code> 前缀，就需要指定 <code>my-app-cli</code> 的路径 -&gt; <code>node_modules/.bin</code>，否则 <code>node my-app-cli</code> 会去查找当前路径下的 <code>my-app-cli.js</code>，这样肯定是不对。</li></ul><blockquote><p>若要实现像 <code>vue create</code>&#x2F;<code>create-react-app</code> 之类的命令一样简便的方式，则可以在上文提到的 <code>bin</code> 子目录下可执行文件 <code>cli.js</code> 中的第一行写入以下命令：</p></blockquote><pre><code>#!/usr/bin/env node</code></pre><blockquote><p>这行命令的作用是告诉系统用 <code>node</code> 解析，这样命令就可以简写成 <code>my-app-cli</code> 了。</p></blockquote><h3 id="files"><a href="#files" class="headerlink" title="files"></a>files</h3><blockquote><p><code>files</code> 字段用于描述我们使用 <code>npm publish</code> 命令后推送到 <code>npm</code> 服务器的文件列表，如果指定文件夹，则文件夹内的所有内容都会包含进来。</p></blockquote><blockquote><p>我们可以查看下载的 <code>antd</code> 的 <code>package.json</code> 的 <code>files</code> 字段，内容如下：</p></blockquote><pre><code>&#123;  &quot;files&quot;: [&quot;dist&quot;, &quot;lib&quot;, &quot;es&quot;]&#125;</code></pre><blockquote><p>另外，我们还可以通过配置一个 <code>.npmignore</code> 文件来排除一些文件， 防止大量的垃圾文件推送到 npm 上。</p></blockquote><h3 id="man"><a href="#man" class="headerlink" title="man"></a>man</h3><h3 id="directories"><a href="#directories" class="headerlink" title="directories"></a>directories</h3><h3 id="脚本配置"><a href="#脚本配置" class="headerlink" title="脚本配置"></a>脚本配置</h3><h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><blockquote><p><code>scripts</code> 字段是 <code>package.json</code> 中的一种元数据功能，它接受一个对象，对象的属性为可以通过 <code>npm run</code> 运行的脚本，值为实际运行的命令（通常是终端命令），如：</p></blockquote><pre><code>&#123;  &quot;scripts&quot;: &#123;    &quot;start&quot;: &quot;node index.js&quot;  &#125;&#125;</code></pre><blockquote><p>将终端命令放入 <code>scripts</code> 字段，既可以记录它们又可以实现轻松重用。</p></blockquote><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><h3 id="发布配置"><a href="#发布配置" class="headerlink" title="发布配置"></a>发布配置</h3><h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><blockquote><p>一般公司的非开源项目，都会设置 <code>private</code> 属性的值为 <code>true</code>，这是因为 <code>npm</code> 拒绝发布私有模块，通过设置该字段可以防止私有模块被无意间发布出去。</p></blockquote><h3 id="preferGlobal"><a href="#preferGlobal" class="headerlink" title="preferGlobal"></a>preferGlobal</h3><h3 id="publishConfig"><a href="#publishConfig" class="headerlink" title="publishConfig"></a>publishConfig</h3><h3 id="os"><a href="#os" class="headerlink" title="os"></a>os</h3><blockquote><p>假如我们开发了一个模块，只能跑在 <code>darwin</code> 系统下，我们需要保证 <code>windows</code> 用户不会安装到该模块，从而避免发生不必要的错误。</p></blockquote><blockquote><p>这时候，使用 <code>os</code> 属性则可以帮助我们实现以上的需求，该属性可以指定模块适用系统的系统，或者指定不能安装的系统黑名单（当在系统黑名单中的系统中安装模块则会报错）：</p></blockquote><pre><code>&#123;  // 适用系统  &quot;os&quot;: [&quot;darwin&quot;, &quot;linux&quot;],  // 黑名单  &quot;os&quot;: [&quot;!win32&quot;]&#125;</code></pre><blockquote><blockquote><p>Tips：在 node 环境下可以使用 <code>process.platform</code> 来判断操作系统。</p></blockquote></blockquote><h3 id="cpu"><a href="#cpu" class="headerlink" title="cpu"></a>cpu</h3><blockquote><p>和上面的 <code>os</code> 字段类似，我们可以用 <code>cpu</code> 字段更精准的限制用户安装环境：</p></blockquote><pre><code>&#123;  // 适用 CPU  &quot;cpu&quot;: [&quot;x64&quot;, &quot;ia32&quot;],  // 黑名单  &quot;cpu&quot;: [&quot;!arm&quot;, &quot;!mips&quot;]&#125;</code></pre><blockquote><blockquote><p>Tips：在 node 环境下可以使用 <code>process.arch</code> 来判断 cpu 架构。</p></blockquote></blockquote><h3 id="engines"><a href="#engines" class="headerlink" title="engines"></a>engines</h3><blockquote><p>有时候，新拉一个项目的时候，由于和其他开发使用的 <code>node</code> 版本不同，导致会出现很多奇奇怪怪的问题（如某些依赖安装报错、依赖安装完项目跑步起来等）。</p></blockquote><blockquote><p>为了实现项目开箱即用的伟大理想，这时候可以使用 <code>package.json</code> 的 <code>engines</code> 字段来指定项目 <code>node</code> 版本：</p></blockquote><pre><code>&#123;  &quot;engines&quot;: &#123;    &quot;node&quot;: &quot;&gt;=0&quot;  &#125;&#125;</code></pre><blockquote><p>该字段也可以指定适用的 <code>npm</code> 版本：</p></blockquote><pre><code>&#123;  &quot;engines&quot;: &#123;    &quot;npm&quot;: &quot;&gt;= 0&quot;  &#125;&#125;</code></pre><blockquote><p>需要注意的是，<code>engines</code> 属性仅起到一个说明的作用，当用户版本不符合指定值时也不影响依赖的安装。</p></blockquote><h3 id="自定义字段"><a href="#自定义字段" class="headerlink" title="自定义字段"></a>自定义字段</h3><blockquote><p>一些第三方 npm 包，会在 package.json 中定义字段。</p></blockquote><blockquote><p>例如 husky 等 pre-commit</p></blockquote><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>重新认识 package.json</li><li>一文搞懂 peerDependencies</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;NPM-包描述文件&quot;&gt;&lt;a href=&quot;#NPM-包描述文件&quot; class=&quot;headerlink&quot; title=&quot;NPM 包描述文件&quot;&gt;&lt;/a&gt;NPM 包描述文件&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;npm&lt;/code&gt; 即 npde packa</summary>
      
    
    
    
    
    <category term="Npm" scheme="http://yoursite.com/tags/Npm/"/>
    
  </entry>
  
  <entry>
    <title>Npm和Package描述文件</title>
    <link href="http://yoursite.com/2023/02/06/Npm%E5%92%8CPackage%E6%8F%8F%E8%BF%B0%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2023/02/06/Npm%E5%92%8CPackage%E6%8F%8F%E8%BF%B0%E6%96%87%E4%BB%B6/</id>
    <published>2023-02-06T09:21:24.000Z</published>
    <updated>2023-02-08T03:34:07.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npm-和-package-json"><a href="#npm-和-package-json" class="headerlink" title="npm 和 package.json"></a>npm 和 package.json</h1><p>npm 是一个包管理器，它让 JavaScript 开发者分享、复用代码更方便。一个网站里通常有几十甚至上百个 package，分散在各处，通常会将这些包按照各自的功能进行划分（类似我们安卓开发中的划分子模块），但是如果重复造一些轮子，不如上传到一个公共平台，让更多的人一起使用、参与这个特定功能的模块。</p><p>管理本地安装 npm 包的最好方式就是创建 package.json 文件。</p><p>一个 package.json 文件可以有以下几点作用：</p><ul><li>作为一个描述文件，描述了你的项目依赖哪些包</li><li>允许我们使用 “语义化版本规则”（后面介绍）指明你项目依赖包的版本</li><li>让你的构建更好地与其他开发者分享，便于重复使用</li></ul><h2 id="npm-安装"><a href="#npm-安装" class="headerlink" title="npm 安装"></a>npm 安装</h2><p>npm 是依附于 node.js 的，我们可以去它的官网 <a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a> 下载安装 node.js。</p><pre><code class="js">node - v;npm - v;</code></pre><h2 id="npm-更新"><a href="#npm-更新" class="headerlink" title="npm 更新"></a>npm 更新</h2><pre><code class="js">npm install npm@latest -g</code></pre><h2 id="npm-创建-package-json-文件"><a href="#npm-创建-package-json-文件" class="headerlink" title="npm 创建 package.json 文件"></a>npm 创建 package.json 文件</h2><pre><code class="js">npm init --yes // 跳过问题</code></pre><p>package.json</p><ul><li>name 全部小写，没有空格，可以使用下划线或者横线</li><li>version x.x.x 的格式符合“语义化版本规则”</li><li>description：描述信息，有助于搜索</li><li>main: 入口文件，一般都是 index.js</li><li>scripts：支持的脚本，默认是一个空的 test</li><li>keywords：关键字，有助于在人们使用 npm search 搜索时发现你的项目</li><li>author：作者信息</li><li>license：默认是 MIT</li><li>bugs：当前项目的一些错误信息，如果有的话</li><li>dependencies：在生产环境中需要用到的依赖</li><li>devDependencies：在开发、测试环境中用到的依赖</li></ul><h2 id="npm-安装本地包"><a href="#npm-安装本地包" class="headerlink" title="npm 安装本地包"></a>npm 安装本地包</h2><p>dependencies</p><pre><code class="js">npm install &lt;package_name&gt;ornpm install &lt;package_name&gt; --save</code></pre><p>devDependencies：在开发、测试环境中用到的依赖</p><pre><code class="js">npm install &lt;package_name&gt; --save-dev</code></pre><h3 id="安装指定版本包"><a href="#安装指定版本包" class="headerlink" title="安装指定版本包"></a>安装指定版本包</h3><pre><code class="js">npm install nuxt@latestnpm install nuxt@3.0.0npm install nuxt@&quot;&gt;=3.0.0 &lt;3.2.0&quot;</code></pre><h3 id="更新本地包"><a href="#更新本地包" class="headerlink" title="更新本地包"></a>更新本地包</h3><pre><code class="js">npm outdated // 查看是否有新版本npm update // 更新所有包版本npm update &lt;package_name&gt; // 更新某个包版本</code></pre><p>npm update 的工作过程</p><ol><li>先到远程仓库查询最新版本</li><li>然后对比本地版本，如果本地版本不存在，或者远程版本较新</li><li>查看 package.json 中对应的语义版本规则</li><li>如果当前新版本符合语义规则，就更新，否则不更新</li></ol><h3 id="拆卸本地包"><a href="#拆卸本地包" class="headerlink" title="拆卸本地包"></a>拆卸本地包</h3><pre><code class="js">npm uninstall &lt;package_name&gt;</code></pre><h2 id="npm-全局包管理"><a href="#npm-全局包管理" class="headerlink" title="npm 全局包管理"></a>npm 全局包管理</h2><pre><code class="js">npm install &lt;package_name&gt; -g // 全局安装一个包npm outdated -g --depth=0 // 全局检测包版本npm update &lt;package_name&gt; -g // 全局更新一个包npm uninstall &lt;package_name&gt; -g // 全局删除一个包</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;npm-和-package-json&quot;&gt;&lt;a href=&quot;#npm-和-package-json&quot; class=&quot;headerlink&quot; title=&quot;npm 和 package.json&quot;&gt;&lt;/a&gt;npm 和 package.json&lt;/h1&gt;&lt;p&gt;npm 是一</summary>
      
    
    
    
    
    <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>2023个人总结</title>
    <link href="http://yoursite.com/2023/01/28/2023%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2023/01/28/2023%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</id>
    <published>2023-01-28T01:11:44.000Z</published>
    <updated>2023-01-28T01:32:02.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h2><ul><li>php(version 4.0) 2015 放弃</li><li>jquery (version 1.64) 2015 放弃</li><li>angular(version 1.54) 2016 放弃</li><li>express(v 2.0) 2016 放弃</li><li>react(v 15.6) 2017 放弃</li><li>nextjs(v 7.0) 2018 放弃</li><li>nestjs(v 6.0) 2018 放弃</li><li>vue(v 2.0) 2018 使用</li><li>nuxtjs(v 2.0) 2019 使用</li><li>vue(v 3.0) 2022 使用</li><li>nuxtjs(v 3.0) 2022 使用</li><li>python(v 3.8) 2022 学习</li><li>flask(v 2.1) 2022 学习</li></ul><h3 id="2023计划"><a href="#2023计划" class="headerlink" title="2023计划"></a>2023计划</h3><ul><li>英语学习</li><li>python学习</li><li>web3学习</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;技能&quot;&gt;&lt;a href=&quot;#技能&quot; class=&quot;headerlink&quot; title=&quot;技能&quot;&gt;&lt;/a&gt;技能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;php(version 4.0) 2015 放弃&lt;/li&gt;
&lt;li&gt;jquery (version 1.64) 2015 放弃&lt;</summary>
      
    
    
    
    
    <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Mysql的processlist中处理表连接</title>
    <link href="http://yoursite.com/2023/01/16/Mysql%E7%9A%84processlist%E4%B8%AD%E5%A4%84%E7%90%86%E8%A1%A8%E8%BF%9E%E6%8E%A5/"/>
    <id>http://yoursite.com/2023/01/16/Mysql%E7%9A%84processlist%E4%B8%AD%E5%A4%84%E7%90%86%E8%A1%A8%E8%BF%9E%E6%8E%A5/</id>
    <published>2023-01-16T08:22:53.000Z</published>
    <updated>2023-01-20T09:11:22.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="processlist中大量sleep"><a href="#processlist中大量sleep" class="headerlink" title="processlist中大量sleep"></a>processlist中大量sleep</h2><p>在生产环境切换mysql数据库，切换后数据库连接池爆满，抛出异常“too many connections”；</p><p>出现这种现象，比较常见的原因是连接数真不够了，需要设置连接数：</p><h3 id="连接数不够解决"><a href="#连接数不够解决" class="headerlink" title="连接数不够解决"></a>连接数不够解决</h3><pre><code class="js">mysql -u root -p;show full processlist;kill id;</code></pre><h3 id="查看最大连接数"><a href="#查看最大连接数" class="headerlink" title="查看最大连接数"></a>查看最大连接数</h3><pre><code class="js">show variables like &quot;max_connections&quot;;</code></pre><p>查看最大连接数，应该是与上面查询到的连接数相同，才会出现too many connections的情况</p><pre><code class="js">set GLOBAL max_connections=1000;</code></pre><p>修改最大连接数，但是这不是一劳永逸的方法，应该要让它自动杀死那些sleep的进程。</p><h3 id="自动杀死那些sleep的进程"><a href="#自动杀死那些sleep的进程" class="headerlink" title="自动杀死那些sleep的进程"></a>自动杀死那些sleep的进程</h3><pre><code class="js">show global variables like &#39;wait_timeout&#39;;</code></pre><p>这个数值指的是mysql在关闭一个非交互的连接之前要等待的秒数，默认是28800s</p><pre><code class="js">set global wait_timeout=300; </code></pre><p>修改这个数值，这里可以随意，最好控制在几分钟内</p><pre><code class="js">set global interactive_timeout=500; </code></pre><p>修改这个数值，表示mysql在关闭一个连接之前要等待的秒数，至此可以让mysql自动关闭那些没用的连接，但要注意的是，正在使用的连接到了时间也会被关闭，因此这个时间值要合适</p><h3 id="笨方法"><a href="#笨方法" class="headerlink" title="笨方法"></a>笨方法</h3><pre><code class="js">select concat(&#39;KILL &#39;,id,&#39;;&#39;) from information_schema.processlist where user=&#39;root&#39;;</code></pre><p>先把要kill的连接id都查询出来,然后一个个kill</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;processlist中大量sleep&quot;&gt;&lt;a href=&quot;#processlist中大量sleep&quot; class=&quot;headerlink&quot; title=&quot;processlist中大量sleep&quot;&gt;&lt;/a&gt;processlist中大量sleep&lt;/h2&gt;&lt;p&gt;在生</summary>
      
    
    
    
    
    <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Flask-sqlalchemy使用</title>
    <link href="http://yoursite.com/2023/01/12/Flask-sqlalchemy%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2023/01/12/Flask-sqlalchemy%E4%BD%BF%E7%94%A8/</id>
    <published>2023-01-12T07:48:11.000Z</published>
    <updated>2023-01-20T09:11:13.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><pre><code class="js">1.  filter()    把过滤器添加到原查询上，返回一个新查询2.  filter_by()    把等值过滤器添加到原查询上，返回一个新查询3.  limit    使用指定的值限定原查询返回的结果4.  offset()    偏移原查询返回的结果，返回一个新查询5.  order_by()    根据指定条件对原查询结果进行排序，返回一个新查询6.  group_by()    根据指定条件对原查询结果进行分组，返回一个新查询7.  all()    以列表形式返回查询的所有结果8.  first()    返回查询的第一个结果，如果未查到，返回 None9.  first_or_404()    返回查询的第一个结果，如果未查到，返回 40410.  get()    返回指定主键对应的行，如不存在，返回 None11.  get_or_404()    返回指定主键对应的行，如不存在，返回 40412.  count()    返回查询结果的数量13.  paginate()    返回一个Paginate对象，它包含指定范围内的结果</code></pre><pre><code class="js">1.  &quot;&quot;&quot;2.  查询所有用户数据3.  User.query.all()5.  查询有多少个用户6.  User.query.count()8.  查询第1个用户9.  User.query.first()10.  User.query.get(1) # 根据id查询12.  查询id为4的用户[3种方式]13.  User.query.get(4)14.  User.query.filter_by(id=4).all() # 简单查询 使用关键字实参的形式来设置字段名15.  User.query.filter(User.id == 4).all() # 复杂查询 使用恒等式等其他形式来设置条件17.  查询名字结尾字符为g的所有用户[开始 / 包含]18.  User.query.filter(User.name.endswith(&quot;g&quot;)).all()19.  User.query.filter(User.name.startswith(&quot;w&quot;)).all()20.  User.query.filter(User.name.contains(&quot;n&quot;)).all()21.  User.query.filter(User.name.like(&quot;%n%g&quot;)).all() 模糊查询23.  查询名字和邮箱都以li开头的所有用户[2种方式]24.  User.query.filter(User.name.startswith(&quot;li&quot;), User.email.startswith(&quot;li&quot;)).all()26.  from sqlalchemy import and_27.  User.query.filter(and_(User.name.startswith(&quot;li&quot;), User.email.startswith(&quot;li&quot;))).all()29.  查询age是25 或者 \`email\`以\`itheima.com\`结尾的所有用户30.  from sqlalchemy import or_31.  User.query.filter(or_(User.age == 25, User.email.endswith(&quot;itheima.com&quot;))).all()33.  查询名字不等于wang的所有用户[2种方式]34.  from sqlalchemy import not_35.  User.query.filter(not_(User.name == &quot;wang&quot;)).all()36.  User.query.filter(User.name != &quot;wang&quot;).all()38.  查询id为[1, 3, 5, 7, 9]的用户39.  User.query.filter(User.id.in_([1, 3, 5, 7, 9])).all()41.  所有用户先按年龄从小到大, 再按id从大到小排序, 取前5个42.  User.query.order_by(User.age, User.id.desc()).limit(5).all()44.  分页查询, 每页3个, 查询第2页的数据45.  pn = User.query.paginate(2, 3)46.  pn.items 获取该页的数据 pn.page 获取当前的页码 pn.pages 获取总页数</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;查询&quot;&gt;&lt;a href=&quot;#查询&quot; class=&quot;headerlink&quot; title=&quot;查询&quot;&gt;&lt;/a&gt;查询&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;1.  filter()    把过滤器添加到原查询上，返回一个新查询

2.  filter_by(</summary>
      
    
    
    
    
    <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令的使用</title>
    <link href="http://yoursite.com/2023/01/11/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2023/01/11/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2023-01-11T04:09:38.000Z</published>
    <updated>2023-01-20T09:11:18.462Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git名词"><a href="#git名词" class="headerlink" title="git名词"></a>git名词</h3><ul><li>workspace :工作区</li><li>Index&#x2F;Stage : 暂存区</li><li>Repository : 仓库区(或本地仓库)</li><li>Remote :远程仓库区</li></ul><h3 id="常用操作分部解析"><a href="#常用操作分部解析" class="headerlink" title="常用操作分部解析"></a>常用操作分部解析</h3><ul><li>在任何目录创建新的git仓库,执行 git init**,** .git文件就是本地的一个仓库</li><li>git status 查看修改状态</li><li>git add ,是将文件放入了暂存区,可以使用git checkout “文件名” 将文件从暂存区重新拿到工作区</li><li>git commit ,是将文件从暂存区放入到本地.git仓库</li><li>git status, 查看文件的状态,在暂存区还是在本地仓库,还是已经在本地仓库,或者已经提交(通常这些vscode工具一目了然)</li><li>git pull ,拉取的默认是你自己的分支,详细:git pull origin dev, git pull origin master 拉去远程master分支</li></ul><h3 id="git-配置"><a href="#git-配置" class="headerlink" title="git 配置"></a>git 配置</h3><pre><code># 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot;</code></pre><h3 id="常用流程"><a href="#常用流程" class="headerlink" title="常用流程"></a>常用流程</h3><ul><li>git add .</li><li>git commit -m ‘ ‘</li><li>git pull</li><li>git push</li></ul><h3 id="常用git命令行快捷方式"><a href="#常用git命令行快捷方式" class="headerlink" title="常用git命令行快捷方式"></a>常用git命令行快捷方式</h3><ul><li>gaa …… git add .</li><li>gcam ‘’ …… git commit -m ‘’</li><li>gl ……. git pull</li><li>gp ……. git push</li></ul><p>执行cat ~&#x2F;.oh-my-zsh&#x2F;plugins&#x2F;git&#x2F;git.plugin.zsh 查看更多简写</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>git log</li><li>git reflog(涉及到的所有操作步骤)</li><li>git reset –hard HEAD</li><li>git checkout file 恢复暂存区的文件到工作区</li><li>git checkout branch 切换分支</li><li>git stash</li><li>git stash pop</li><li>git branch -r 查看远程分支</li><li>git branch -a 查看所有分支</li><li>git remote 列出所有的远程主机</li><li>git pull –all 拉取远程所有的分支</li><li>git commit –amend -message&#x3D;””(修改最近的一次提交注释)</li><li><code>git checkout (branchname)</code> 切换分支命令</li><li><code>git branch (branchname)</code> 创建分支命令</li><li><code>git branch -d (branchname)</code> 删除分支命令</li><li>git push origin –delete Chapater6 删除远程分支命令</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;git名词&quot;&gt;&lt;a href=&quot;#git名词&quot; class=&quot;headerlink&quot; title=&quot;git名词&quot;&gt;&lt;/a&gt;git名词&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;workspace :工作区&lt;/li&gt;
&lt;li&gt;Index&amp;#x2F;Stage : 暂存区&lt;/li&gt;
</summary>
      
    
    
    
    
    <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>AndroidStudio操作</title>
    <link href="http://yoursite.com/2023/01/11/AndroidStudio%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2023/01/11/AndroidStudio%E6%93%8D%E4%BD%9C/</id>
    <published>2023-01-11T04:09:05.000Z</published>
    <updated>2023-01-20T09:11:05.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-studio操作"><a href="#Android-studio操作" class="headerlink" title="Android studio操作"></a>Android studio操作</h1><p>command + shift + R 当前文件替换</p><p>command + shift + F 全局查找</p><p>command + shift + R 全局替换</p><p>command + O 全局搜索类**&#x2F;<strong>文件</strong>&#x2F;<strong>关键字</strong>&#x2F;(<strong>包括系统类</strong>,<strong>自定义类</strong>)**</p><p>command + option + O 全局搜索方法</p><p>option + enter 将<strong>StatelessWidget</strong>转 <strong>StatefulWidget</strong>   快速修复  ****快速生成构造方法</p><p>command  + option + W 抽取代码为单独的<strong>Widget</strong></p><p>command  + option + M 抽取代码为单独的方法**,<strong>或者抽取成</strong>get**方法</p><p>command + option + L 格式化代码</p><p>command + D 复制单行</p><p>option + shift + up&#x2F;down上下移动代码</p><p>command + \  热重载**(hot reload)**</p><p>control+ R 运行项目</p><p>command+ delete 删除行</p><p><strong>Shift</strong> 双击 ****万能搜索</p><p>stless 快速创建一个<strong>StatelessWidget</strong></p><p>stful 快速创建一个<strong>StatefulWidget</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android-studio操作&quot;&gt;&lt;a href=&quot;#Android-studio操作&quot; class=&quot;headerlink&quot; title=&quot;Android studio操作&quot;&gt;&lt;/a&gt;Android studio操作&lt;/h1&gt;&lt;p&gt;command + shif</summary>
      
    
    
    
    
    <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>SEO技巧</title>
    <link href="http://yoursite.com/2023/01/11/SEO%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2023/01/11/SEO%E6%8A%80%E5%B7%A7/</id>
    <published>2023-01-11T04:08:10.000Z</published>
    <updated>2023-01-20T09:11:51.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SEO技巧"><a href="#SEO技巧" class="headerlink" title="SEO技巧"></a>SEO技巧</h1><p>这篇文章其实是我本人的总结，因为工作中做完了一个官方网站并成功上线，最后组长检查代码看到我的keyword等一系列信息都是空的，把我骂得狗血淋头。一言不合就作总结，总结一些简单但是我们能做的seo小技巧，送给想把网站做到极致的人。</p><h2 id="SEO要点："><a href="#SEO要点：" class="headerlink" title="SEO要点："></a><strong>SEO要点：</strong></h2><ol><li>语义化html标签，用合适的标签嵌套合适的内容，不可过分依赖div，对浏览器更友善就能更容易被抓取。</li><li>重要的内容html代码放在前面，放在左边。搜索引擎爬虫是从左往右，从上到下进行抓取的，利用布局来实现重要的代码在上面</li><li>重要内容要写在html架构里面，蜘蛛不会抓取js的内容，</li><li>尽量减少使用iframe，因为蜘蛛不会抓取iframe的内容。</li><li>为图片img加上alt属性，加了alt就不必加title了，避免搜索引擎认为我们恶意优化。alt能让图片没加载时都能有文字提示。</li><li>需要强调的地方加上title，本页面内跳转a标签内也要加title。</li><li>重要的地方可以保留文字，有些地方必须用图，但是蜘蛛不会爬img，这时应该设置文本，再用缩进隐藏的方法去掉文字，例如logo的优化就是这样做的。注意隐藏不能用display：none，蜘蛛不会检索display：none的内容，应用这个方法的标签一般是logo，标题等重要信息</li><li>尽量做到js、css、html的分离，不要在html中写样式代码。</li><li>注释的东西能去掉应该去掉，对搜索引擎更加友好</li><li>css放在头部，js放在尾部，尽量使用外链或者工具对css和js进行压缩</li><li>减少http的请求，使页面更快加载。</li><li>使用本地缓存更快地访问网站，使用cdn网络，加快用户访问速度。</li><li>使用G-ZIP压缩，浏览速度更快，搜索引擎抓取信息量更大</li></ol><h2 id="关键一点是头部的title，description，keyword的设置。"><a href="#关键一点是头部的title，description，keyword的设置。" class="headerlink" title="关键一点是头部的title，description，keyword的设置。"></a><strong>关键一点是头部的title，description，keyword的设置。</strong></h2><ol><li>title设置不宜过长，要简短，网站的名字与相关的小内容，一般为10-20个字。不能重复</li><li>keywords设置10个关键词，没个词不能太长，简短且符合你网站的特点，不能重复</li><li>description，50个字内描述你的网站</li></ol><p><strong>description写原创的话，并包含2-3个关键词比较好</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SEO技巧&quot;&gt;&lt;a href=&quot;#SEO技巧&quot; class=&quot;headerlink&quot; title=&quot;SEO技巧&quot;&gt;&lt;/a&gt;SEO技巧&lt;/h1&gt;&lt;p&gt;这篇文章其实是我本人的总结，因为工作中做完了一个官方网站并成功上线，最后组长检查代码看到我的keyword等一系列信</summary>
      
    
    
    
    
    <category term="SEO" scheme="http://yoursite.com/tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置</title>
    <link href="http://yoursite.com/2023/01/11/Nginx%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2023/01/11/Nginx%E9%85%8D%E7%BD%AE/</id>
    <published>2023-01-11T04:05:22.000Z</published>
    <updated>2023-01-20T09:24:41.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><pre><code class="js">user www-data;#启动进程,通常设置成和cpu的数量相等worker_processes 2;pid /run/nginx.pid;include /etc/nginx/modules-enabled/*.conf;events &#123;    worker_connections 768;    # multi_accept on;&#125;http &#123;    ##    # Basic Settings    ##    sendfile on;    tcp_nopush on;    types_hash_max_size 2048;    # server_tokens off;    # server_names_hash_bucket_size 64;    # server_name_in_redirect off;    include /etc/nginx/mime.types;    default_type application/octet-stream;    ##    # SSL Settings    ##    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE    ssl_prefer_server_ciphers on;    ##    # Logging Settings    ##    access_log /var/log/nginx/access.log;    error_log /var/log/nginx/error.log;    # Gzip Settings    gzip on;    gzip_min_length 1000;    gzip_vary on;    gzip_proxied any;    gzip_comp_level 6;    gzip_buffers 16 8k;    gzip_http_version 1.1;    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;    ##    # Virtual Host Configs    ##    include /etc/nginx/conf.d/*.conf;    include /etc/nginx/sites-enabled/*;    map $sent_http_content_type $expires &#123;        &quot;text/html&quot; epoch;        &quot;text/html; charset=utf-8&quot; epoch;        default off;    &#125;    server &#123;        listen 80;        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life;        return 301 https://$host$request_uri;        # gzip on;        # gzip_types text/plain application/xml text/css application/javascript;        # gzip_min_length 1000;        # location / &#123;        #     expires $expires;        #     proxy_redirect off;        #     proxy_set_header Host $host;        #     proxy_set_header X-Real-IP $remote_addr;        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        #     proxy_set_header X-Forwarded-Proto $scheme;        #     proxy_read_timeout 1m;        #     proxy_connect_timeout 1m;        #     proxy_pass http://127.0.0.1:3000/;        # &#125;        # location ~ /.well-known &#123;        #     allow all;        # &#125;        # location ^~ /.well-known/pki-validation/ &#123;        #     add_header Cache-Control no-cache;        #     default_type &quot;text/plain&quot;;        #     rewrite /.well-known/pki-validation/(.*) /$1 break;        #     root /var/www/whatever;        # &#125;        # location /nuxt3-tag &#123;        #     expires $expires;        #     proxy_redirect off;        #     proxy_set_header Host $host;        #     proxy_set_header X-Real-IP $remote_addr;        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        #     proxy_set_header X-Forwarded-Proto $scheme;        #     proxy_read_timeout 1m;        #     proxy_connect_timeout 1m;        #     proxy_pass http://127.0.0.1:3000/nuxt3-tag;        # &#125;        # location /stable &#123;        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;        # &#125;        # location /nuxt3 &#123;        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;        # &#125;        # location /tag &#123;        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;        # &#125;        # location /stable/api &#123;        #     proxy_pass http://www.ptg.life:5000/api;        #     proxy_set_header Access-Control-Max-Age 86400;        #     proxy_set_header Host $host;        #     proxy_redirect off;        #     proxy_set_header X-Real-IP $remote_addr;        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        #     proxy_connect_timeout 60;        #     proxy_read_timeout 60;        #     proxy_send_timeout 60;        # &#125;        # location /static/ &#123;        #     valid_referers none blocked *.ptg.life;        #     if ($invalid_referer) &#123;        #         return 403;        #         break;        #     &#125;        #     expires 30d;        #     autoindex on;        #     root /data;        # &#125;    &#125;    server &#123;        listen 443 ssl;        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;        # 新版的nginx只用listen 443 ssl就行,需要注释        # ssl on;        keepalive_timeout 10m;        server_tokens off;        # 缓存SSL握手产生的参数和加密密钥的时长        ssl_session_timeout 10m;        # 证书        ssl_certificate /etc/nginx/certificate.crt;        ssl_certificate_key /etc/nginx/private.key;        # 日志        access_log /var/log/nginx/nginx.vhost.access.log;        error_log /var/log/nginx/nginx.vhost.error.log;        # 根用iframe嵌入做个隐式url        location / &#123;            index index.html index.htm index.html inde.php;            root /usr/share/nginx/html;        &#125;        location ~ /.well-known &#123;            allow all;        &#125;        location ^~ /.well-known/pki-validation/ &#123;            add_header Cache-Control no-cache;            default_type &quot;text/plain&quot;;            rewrite /.well-known/pki-validation/(.*) /$1 break;            root /var/www/whatever;        &#125;        location /nuxt3-tag/ &#123;            expires $expires;            proxy_redirect off;            proxy_set_header Host $host;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            proxy_set_header X-Forwarded-Proto $scheme;            proxy_read_timeout 1m;            proxy_connect_timeout 1m;            proxy_pass http://127.0.0.1:3000/nuxt3-tag/;        &#125;        location /naifu/ &#123;            expires $expires;            proxy_redirect off;            proxy_set_header Host $host;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            proxy_set_header X-Forwarded-Proto $scheme;            proxy_read_timeout 1m;            proxy_connect_timeout 1m;            proxy_pass http://127.0.0.1:3000/naifu/;        &#125;        location /nuxt3 &#123;            rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent;        &#125;        location /tag &#123;            rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent;        &#125;        # flask的接口代理        location /stable/api &#123;            proxy_pass http://127.0.0.1:5000/api;            proxy_set_header Access-Control-Max-Age 86400;            proxy_set_header Host $host;            proxy_redirect off;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            proxy_connect_timeout 60;            proxy_read_timeout 60;            proxy_send_timeout 60;        &#125;        location /static/ &#123;            valid_referers none blocked *.ptg.life;            if ($invalid_referer) &#123;                return 403;                break;            &#125;            expires 30d;            autoindex on;            root /data;        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;nginx配置&quot;&gt;&lt;a href=&quot;#nginx配置&quot; class=&quot;headerlink&quot; title=&quot;nginx配置&quot;&gt;&lt;/a&gt;nginx配置&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;user www-data;
#启动进程,通常设置成和cpu的</summary>
      
    
    
    
    <category term="Nginx" scheme="http://yoursite.com/categories/Nginx/"/>
    
    
    <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置Https</title>
    <link href="http://yoursite.com/2023/01/11/Nginx%E9%85%8D%E7%BD%AEHttps/"/>
    <id>http://yoursite.com/2023/01/11/Nginx%E9%85%8D%E7%BD%AEHttps/</id>
    <published>2023-01-11T04:04:52.000Z</published>
    <updated>2023-01-20T09:22:17.917Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSL-证书部署"><a href="#SSL-证书部署" class="headerlink" title="SSL 证书部署"></a><strong><strong>SSL 证书部署</strong></strong></h2><p>首先申请免费证书,推荐阿里或者七牛云<a href="https://cn.aliyun.com/product/cas?from_alibabacloud=&source=5176.11533457&userCode=ywqc0ubl&type=copy">https://cn.aliyun.com/product/cas?from_alibabacloud&#x3D;&amp;source&#x3D;5176.11533457&amp;userCode&#x3D;ywqc0ubl&amp;type&#x3D;copy</a></p><p>下载申请好的 ssl 证书文件压缩包到本地并解压到&#x2F;etc&#x2F;nginx&#x2F;</p><pre><code class="jsx">/etc/nginx/certificate.crt;/etc/nginx/private.key;</code></pre><p>将这两个文件上传至服务器的&#x2F;etc&#x2F;nginx&#x2F;目录里</p><pre><code class="jsx">scp /Users/lilin/Downloads/certificate.crt root@xxx.xx.xxx.xx:/etc/nginx/scp /Users/lilin/Downloads/private.crt root@xxx.xx.xxx.xx:/etc/nginx/</code></pre><h2 id="nginx-conf配置"><a href="#nginx-conf配置" class="headerlink" title="nginx.conf配置"></a>nginx.conf配置</h2><p>配置 https <a href="https://link.segmentfault.com/?enc=j1N+5oPWtgTmj4YYsFd5ww==.x32KBqxEXmGOwmMZfGjqRXhbghKgM1LsJhVbG+8iji5BQ1P9tGkbxC2u/dahY+V6">server</a>.注释掉之前的 http server 配置,新增 https server</p><pre><code class="jsx">将http重定向httpsserver &#123;        listen 80;        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;        return 301 https://$host$request_uri; &#125;server &#123;        listen 443 ssl;        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;        # 新版的nginx只用listen 443 ssl就行,需要注释        # ssl on;        keepalive_timeout 10m;        server_tokens off;        # 缓存SSL握手产生的参数和加密密钥的时长        ssl_session_timeout 10m;        # 证书        ssl_certificate /etc/nginx/certificate.crt;        ssl_certificate_key /etc/nginx/private.key;        # 日志        access_log /var/log/nginx/nginx.vhost.access.log;        error_log /var/log/nginx/nginx.vhost.error.log;        # 根用iframe嵌入做个隐式url        location / &#123;            index index.html index.htm index.html inde.php;            root /usr/share/nginx/html;        &#125;    &#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SSL-证书部署&quot;&gt;&lt;a href=&quot;#SSL-证书部署&quot; class=&quot;headerlink&quot; title=&quot;SSL 证书部署&quot;&gt;&lt;/a&gt;&lt;strong&gt;&lt;strong&gt;SSL 证书部署&lt;/strong&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;首先申请免费证书,推荐阿</summary>
      
    
    
    
    <category term="Nginx" scheme="http://yoursite.com/categories/Nginx/"/>
    
    
    <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
    <category term="Https" scheme="http://yoursite.com/tags/Https/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18安装nginx</title>
    <link href="http://yoursite.com/2023/01/11/Ubuntu18%E5%AE%89%E8%A3%85nginx/"/>
    <id>http://yoursite.com/2023/01/11/Ubuntu18%E5%AE%89%E8%A3%85nginx/</id>
    <published>2023-01-11T04:04:03.000Z</published>
    <updated>2023-01-20T09:11:57.239Z</updated>
    
    <content type="html"><![CDATA[<h3 id="apt安装sudo-apt-update"><a href="#apt安装sudo-apt-update" class="headerlink" title="apt安装sudo apt update"></a><strong>apt安装</strong>sudo apt update</h3><pre><code class="jsx">sudo apt install nginxnginx -V默认安装路径 /etc/nginx/nginx.conf</code></pre><h3 id="nginx安装位置"><a href="#nginx安装位置" class="headerlink" title="nginx安装位置"></a><strong>nginx安装位置</strong></h3><pre><code class="jsx">**whereis nginx**</code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a><strong>启动</strong></h3><pre><code class="jsx">service nginx start</code></pre><h3 id="检查nginx配置文件"><a href="#检查nginx配置文件" class="headerlink" title="检查nginx配置文件"></a><strong>检查nginx配置文件</strong></h3><pre><code class="jsx">service nginx reload</code></pre><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a><strong>重启</strong></h3><pre><code class="jsx">nginx -s reopen</code></pre><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a><strong>停止</strong></h3><pre><code class="jsx">nginx -s stop</code></pre><h3 id="端口占用"><a href="#端口占用" class="headerlink" title="端口占用"></a>端口占用</h3><pre><code class="jsx">查看端口netstat -lntpnginx端口tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      248057/nginx: master结束端口kill 248057重启nginxservice nginx restart</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;apt安装sudo-apt-update&quot;&gt;&lt;a href=&quot;#apt安装sudo-apt-update&quot; class=&quot;headerlink&quot; title=&quot;apt安装sudo apt update&quot;&gt;&lt;/a&gt;&lt;strong&gt;apt安装&lt;/strong&gt;sudo</summary>
      
    
    
    
    
    <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>React基础</title>
    <link href="http://yoursite.com/2018/05/09/React%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/05/09/React%E5%9F%BA%E7%A1%80/</id>
    <published>2018-05-09T09:39:55.000Z</published>
    <updated>2023-01-20T09:11:44.048Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><a href="https://reactjs.org/docs/hello-world.html">react官网</a></p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h4 id="1-无状态组件"><a href="#1-无状态组件" class="headerlink" title="1. 无状态组件"></a>1. 无状态组件</h4><ul><li>在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。</li><li>无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。</li><li>无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。</li></ul><pre><code>import React from &quot;react&quot;;//创建方式一,相当于es5的函数声明的方式创建 function NoState (props) &#123;     return (         &lt;div&gt;this is NoState Component&lt;/div&gt;     ) &#125;</code></pre><pre><code>//创建方式二,相当于es5的函数表达式的方式创建const NoState = (props) =&gt; &#123;    return (        &lt;div&gt;this is Nostate Component&lt;/div&gt;    )&#125;export default NoState</code></pre><hr><ul><li>无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。</li><li>无状态组件没有实例化得过程，因此无法访问组件this中的对象</li><li>无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理</li><li>无状态组件只能访问传入的props，同样的props会得到同样的渲染结果</li></ul><p>当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来<br>代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。<br>第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同</p><pre><code>// helloWorld.jsximport React, &#123;Component&#125; from &#39;react&#39;;class HelloWorld extends Component &#123;    clickHander = () =&gt; &#123;        console.log(this.props);        console.log(this.props.name);    &#125;    render() &#123;        return (            &lt;div onClick=&#123;this.clickHander&#125;&gt;&#123; this.props.name &#125; say: Hello World!&lt;/div&gt;        )    &#125;&#125;export default HelloWorld;</code></pre><h2 id="组件之间的交互"><a href="#组件之间的交互" class="headerlink" title="组件之间的交互"></a>组件之间的交互</h2><h4 id="父组件与子组件之间的交互"><a href="#父组件与子组件之间的交互" class="headerlink" title="父组件与子组件之间的交互"></a>父组件与子组件之间的交互</h4><ol><li>父组件修改子组件，只需要修改传入的props属性</li><li>子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行<br>子组件与子组件之间的交互</li><li>通过影响共同的父组件来进行交互</li></ol><pre><code>state = &#123;    switch: 0,    name: this.props.name1&#125;clickHander = () =&gt; &#123;    const &#123;name1, name2&#125; = this.props;    if (this.state.switch === 0) &#123;        this.setState(&#123;            switch: 1,            name: name2        &#125;)    &#125; else &#123;        this.setState(&#123;            switch: 0,            name: name1        &#125;)    &#125;&#125;;render() &#123;    return (        &lt;div onClick=&#123;this.clickHander&#125;&gt;hello world !&#123;this.state.name&#125;&lt;/div&gt;    )&#125;</code></pre><p>先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。</p><p>state &#x3D; {} &#x2F;&#x2F; 等同于ES5构造函数中的this.state &#x3D; {}<br>在对象中，我们可以通过this.state的方式来访问state中所存储的属性<br>setState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变<br>react赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了<br>而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行<br>&#x2F;&#x2F; 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: ‘Jason’})&#x2F;&#x2F; 然后立即查看它的值console.log(this.state.name) &#x2F;&#x2F; 仍然为Tom，不会立即改变</p><h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p>react组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样</p><pre><code>// 当然可能命名会是其他的，大概表达一个意思，不深究哈&#123;    nodeName: &#39;div&#39;,    className: &#39;hello-world&#39;,    style: &#123;&#125;,    parentNodes: &#39;root&#39;,    childrenNodes: []    ...&#125;</code></pre><p>而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的</p><pre><code>import React, &#123; Component &#125; from &#39;react&#39;;class HelloWorld extends Component &#123;    clickHander = () =&gt; &#123;        console.log(this.refs)    &#125;     render () &#123;        return (            &lt;div className=&quot;container&quot; onClick=&#123;this.clickHander&#125;&gt;                &lt;div ref=&quot;hello&quot; className=&quot;hello&quot;&gt;Hello&lt;/div&gt;                &lt;div ref=&quot;world&quot; className=&quot;world&quot;&gt;World&lt;/div&gt;            &lt;/div&gt;        )    &#125;&#125;export default HelloWorld;</code></pre><p>为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替<br>我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。<br>当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。</p><pre><code>// src/helloWorld.jsximport React, &#123; Component &#125; from &#39;react&#39;;class HelloWorld extends Component &#123;    clickHander = () =&gt; &#123;        console.log(this.refs)    &#125; refCallback = (elem) =&gt; &#123;        console.log(elem);    &#125; render () &#123;        return (            &lt;div className=&quot;container&quot; onClick=&#123;this.clickHander&#125;&gt;                &lt;div ref=&quot;hello&quot; className=&quot;hello&quot;&gt;Hello&lt;/div&gt;                &lt;div ref=&#123;this.refCallback&#125; className=&quot;world&quot;&gt;World&lt;/div&gt;            &lt;/div&gt;        )    &#125;&#125;export default HelloWorld;</code></pre><h3 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h3><p>件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数</p><h5 id="react组件有三种状态"><a href="#react组件有三种状态" class="headerlink" title="react组件有三种状态"></a>react组件有三种状态</h5><ul><li>Mounted：已经插入真实DOM</li><li>Updating：正在被重新渲染</li><li>Unmounted：已移出真实DOM</li><li></li></ul><h5 id="每个状态的处理函数"><a href="#每个状态的处理函数" class="headerlink" title="每个状态的处理函数"></a>每个状态的处理函数</h5><ul><li>will：函数在进入状态之前调用</li><li>did：函数在进入状态之后调用</li></ul><h5 id="组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中"><a href="#组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中" class="headerlink" title="组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中"></a>组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中</h5><ul><li>componentWillMount 在首次渲染完成之前，此时可修改组件的state</li><li>componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM</li></ul><h5 id="组件属性-我们前面提到的props与state-更新的前后时刻"><a href="#组件属性-我们前面提到的props与state-更新的前后时刻" class="headerlink" title="组件属性(我们前面提到的props与state)更新的前后时刻"></a>组件属性(我们前面提到的props与state)更新的前后时刻</h5><ul><li>componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state</li><li>componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素</li></ul><h6 id="组件取消挂载之前-取消之后就没必要提供钩子函数了"><a href="#组件取消挂载之前-取消之后就没必要提供钩子函数了" class="headerlink" title="组件取消挂载之前(取消之后就没必要提供钩子函数了)"></a>组件取消挂载之前(取消之后就没必要提供钩子函数了)</h6><p><code>componentWillUnmount</code></p><h6 id="两个特殊的处理函数"><a href="#两个特殊的处理函数" class="headerlink" title="两个特殊的处理函数"></a>两个特殊的处理函数</h6><ul><li><code>componentWillReceiveProps(object nextProps)</code>：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变-&gt;然后componentWillReceiveProps去判断是否需要重新渲染(<code>shouldComponentUpdate</code>)-&gt;如果不需要则继续running-&gt;如果需要则执行<code>componentWillUpdate</code>-&gt;渲染DOM树之后执行<code>componentDidUpdate</code>-&gt;进入running</li><li><code>shouldComponentUpdate(nextProps, nextState)</code>(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变-&gt;判断是否需要重新渲染新的props和state(<code>shouldComponentUpdate</code>) -&gt; 根据判断决定执行render过程还是继续·保持running状态</li></ul><h6 id="三个统一调用的方法-用于组件初始化，获取默认属性和状态"><a href="#三个统一调用的方法-用于组件初始化，获取默认属性和状态" class="headerlink" title="三个统一调用的方法,用于组件初始化，获取默认属性和状态"></a>三个统一调用的方法,用于组件初始化，获取默认属性和状态</h6><ul><li>getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享</li><li>getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props</li><li>render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出</li></ul><h6 id="已挂载的方法"><a href="#已挂载的方法" class="headerlink" title="已挂载的方法"></a>已挂载的方法</h6><ul><li>component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候</li></ul><blockquote><p>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。</p></blockquote><p><img src="http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg" alt="image"></p><h2 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a>PropTypes</h2><pre><code>import PropTypes from &#39;prop-types&#39;;MyComponent.propTypes = &#123;  // You can declare that a prop is a specific JS primitive. By default, these  // are all optional.  optionalArray: PropTypes.array,  optionalBool: PropTypes.bool,  optionalFunc: PropTypes.func,  optionalNumber: PropTypes.number,  optionalObject: PropTypes.object,  optionalString: PropTypes.string,  optionalSymbol: PropTypes.symbol,  // Anything that can be rendered: numbers, strings, elements or an array  // (or fragment) containing these types.  optionalNode: PropTypes.node,  // A React element.  optionalElement: PropTypes.element,  // You can also declare that a prop is an instance of a class. This uses  // JS&#39;s instanceof operator.  optionalMessage: PropTypes.instanceOf(Message),  // You can ensure that your prop is limited to specific values by treating  // it as an enum.  optionalEnum: PropTypes.oneOf([&#39;News&#39;, &#39;Photos&#39;]),  // An object that could be one of many types  optionalUnion: PropTypes.oneOfType([    PropTypes.string,    PropTypes.number,    PropTypes.instanceOf(Message)  ]),  // An array of a certain type  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),  // An object with property values of a certain type  optionalObjectOf: PropTypes.objectOf(PropTypes.number),  // An object taking on a particular shape  optionalObjectWithShape: PropTypes.shape(&#123;    color: PropTypes.string,    fontSize: PropTypes.number  &#125;),  // You can chain any of the above with `isRequired` to make sure a warning  // is shown if the prop isn&#39;t provided.  requiredFunc: PropTypes.func.isRequired,  // A value of any data type  requiredAny: PropTypes.any.isRequired,  // You can also specify a custom validator. It should return an Error  // object if the validation fails. Don&#39;t `console.warn` or throw, as this  // won&#39;t work inside `oneOfType`.  customProp: function(props, propName, componentName) &#123;    if (!/matchme/.test(props[propName])) &#123;      return new Error(        &#39;Invalid prop `&#39; + propName + &#39;` supplied to&#39; +        &#39; `&#39; + componentName + &#39;`. Validation failed.&#39;      );    &#125;  &#125;,  // You can also supply a custom validator to `arrayOf` and `objectOf`.  // It should return an Error object if the validation fails. The validator  // will be called for each key in the array or object. The first two  // arguments of the validator are the array or object itself, and the  // current item&#39;s key.  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) &#123;    if (!/matchme/.test(propValue[key])) &#123;      return new Error(        &#39;Invalid prop `&#39; + propFullName + &#39;` supplied to&#39; +        &#39; `&#39; + componentName + &#39;`. Validation failed.&#39;      );    &#125;  &#125;)&#125;;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;a href=&quot;https://reactjs.org/docs/hello-world.html&quot;&gt;react官网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;组件&quot;&gt;&lt;a href=&quot;#组件&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    
    <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
</feed>
