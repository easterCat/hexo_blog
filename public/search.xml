<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mysql的processlist中处理表连接</title>
      <link href="/2023/01/16/Mysql%E7%9A%84processlist%E4%B8%AD%E5%A4%84%E7%90%86%E8%A1%A8%E8%BF%9E%E6%8E%A5/"/>
      <url>/2023/01/16/Mysql%E7%9A%84processlist%E4%B8%AD%E5%A4%84%E7%90%86%E8%A1%A8%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="processlist中大量sleep"><a href="#processlist中大量sleep" class="headerlink" title="processlist中大量sleep"></a>processlist中大量sleep</h2><p>在生产环境切换mysql数据库，切换后数据库连接池爆满，抛出异常“too many connections”；</p><p>出现这种现象，比较常见的原因是连接数真不够了，需要设置连接数：</p><h3 id="连接数不够解决"><a href="#连接数不够解决" class="headerlink" title="连接数不够解决"></a>连接数不够解决</h3><pre><code class="js">mysql -u root -p;show full processlist;kill id;</code></pre><h3 id="查看最大连接数"><a href="#查看最大连接数" class="headerlink" title="查看最大连接数"></a>查看最大连接数</h3><pre><code class="js">show variables like &quot;max_connections&quot;;</code></pre><p>查看最大连接数，应该是与上面查询到的连接数相同，才会出现too many connections的情况</p><pre><code class="js">set GLOBAL max_connections=1000;</code></pre><p>修改最大连接数，但是这不是一劳永逸的方法，应该要让它自动杀死那些sleep的进程。</p><h3 id="自动杀死那些sleep的进程"><a href="#自动杀死那些sleep的进程" class="headerlink" title="自动杀死那些sleep的进程"></a>自动杀死那些sleep的进程</h3><pre><code class="js">show global variables like &#39;wait_timeout&#39;;</code></pre><p>这个数值指的是mysql在关闭一个非交互的连接之前要等待的秒数，默认是28800s</p><pre><code class="js">set global wait_timeout=300; </code></pre><p>修改这个数值，这里可以随意，最好控制在几分钟内</p><pre><code class="js">set global interactive_timeout=500; </code></pre><p>修改这个数值，表示mysql在关闭一个连接之前要等待的秒数，至此可以让mysql自动关闭那些没用的连接，但要注意的是，正在使用的连接到了时间也会被关闭，因此这个时间值要合适</p><h3 id="笨方法"><a href="#笨方法" class="headerlink" title="笨方法"></a>笨方法</h3><pre><code class="js">select concat(&#39;KILL &#39;,id,&#39;;&#39;) from information_schema.processlist where user=&#39;root&#39;;</code></pre><p>先把要kill的连接id都查询出来,然后一个个kill</p>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask-sqlalchemy使用</title>
      <link href="/2023/01/12/Flask-sqlalchemy%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/01/12/Flask-sqlalchemy%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><pre><code class="js">1.  filter()    把过滤器添加到原查询上，返回一个新查询2.  filter_by()    把等值过滤器添加到原查询上，返回一个新查询3.  limit    使用指定的值限定原查询返回的结果4.  offset()    偏移原查询返回的结果，返回一个新查询5.  order_by()    根据指定条件对原查询结果进行排序，返回一个新查询6.  group_by()    根据指定条件对原查询结果进行分组，返回一个新查询7.  all()    以列表形式返回查询的所有结果8.  first()    返回查询的第一个结果，如果未查到，返回 None9.  first_or_404()    返回查询的第一个结果，如果未查到，返回 40410.  get()    返回指定主键对应的行，如不存在，返回 None11.  get_or_404()    返回指定主键对应的行，如不存在，返回 40412.  count()    返回查询结果的数量13.  paginate()    返回一个Paginate对象，它包含指定范围内的结果</code></pre><pre><code class="js">1.  &quot;&quot;&quot;2.  查询所有用户数据3.  User.query.all()5.  查询有多少个用户6.  User.query.count()8.  查询第1个用户9.  User.query.first()10.  User.query.get(1) # 根据id查询12.  查询id为4的用户[3种方式]13.  User.query.get(4)14.  User.query.filter_by(id=4).all() # 简单查询 使用关键字实参的形式来设置字段名15.  User.query.filter(User.id == 4).all() # 复杂查询 使用恒等式等其他形式来设置条件17.  查询名字结尾字符为g的所有用户[开始 / 包含]18.  User.query.filter(User.name.endswith(&quot;g&quot;)).all()19.  User.query.filter(User.name.startswith(&quot;w&quot;)).all()20.  User.query.filter(User.name.contains(&quot;n&quot;)).all()21.  User.query.filter(User.name.like(&quot;%n%g&quot;)).all() 模糊查询23.  查询名字和邮箱都以li开头的所有用户[2种方式]24.  User.query.filter(User.name.startswith(&quot;li&quot;), User.email.startswith(&quot;li&quot;)).all()26.  from sqlalchemy import and_27.  User.query.filter(and_(User.name.startswith(&quot;li&quot;), User.email.startswith(&quot;li&quot;))).all()29.  查询age是25 或者 \`email\`以\`itheima.com\`结尾的所有用户30.  from sqlalchemy import or_31.  User.query.filter(or_(User.age == 25, User.email.endswith(&quot;itheima.com&quot;))).all()33.  查询名字不等于wang的所有用户[2种方式]34.  from sqlalchemy import not_35.  User.query.filter(not_(User.name == &quot;wang&quot;)).all()36.  User.query.filter(User.name != &quot;wang&quot;).all()38.  查询id为[1, 3, 5, 7, 9]的用户39.  User.query.filter(User.id.in_([1, 3, 5, 7, 9])).all()41.  所有用户先按年龄从小到大, 再按id从大到小排序, 取前5个42.  User.query.order_by(User.age, User.id.desc()).limit(5).all()44.  分页查询, 每页3个, 查询第2页的数据45.  pn = User.query.paginate(2, 3)46.  pn.items 获取该页的数据 pn.page 获取当前的页码 pn.pages 获取总页数</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令的使用</title>
      <link href="/2023/01/11/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/01/11/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="git名词"><a href="#git名词" class="headerlink" title="git名词"></a>git名词</h3><ul><li>workspace :工作区</li><li>Index&#x2F;Stage : 暂存区</li><li>Repository : 仓库区(或本地仓库)</li><li>Remote :远程仓库区</li></ul><h3 id="常用操作分部解析"><a href="#常用操作分部解析" class="headerlink" title="常用操作分部解析"></a>常用操作分部解析</h3><ul><li>在任何目录创建新的git仓库,执行 git init**,** .git文件就是本地的一个仓库</li><li>git status 查看修改状态</li><li>git add ,是将文件放入了暂存区,可以使用git checkout “文件名” 将文件从暂存区重新拿到工作区</li><li>git commit ,是将文件从暂存区放入到本地.git仓库</li><li>git status, 查看文件的状态,在暂存区还是在本地仓库,还是已经在本地仓库,或者已经提交(通常这些vscode工具一目了然)</li><li>git pull ,拉取的默认是你自己的分支,详细:git pull origin dev, git pull origin master 拉去远程master分支</li></ul><h3 id="git-配置"><a href="#git-配置" class="headerlink" title="git 配置"></a>git 配置</h3><pre><code># 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot;</code></pre><h3 id="常用流程"><a href="#常用流程" class="headerlink" title="常用流程"></a>常用流程</h3><ul><li>git add .</li><li>git commit -m ‘ ‘</li><li>git pull</li><li>git push</li></ul><h3 id="常用git命令行快捷方式"><a href="#常用git命令行快捷方式" class="headerlink" title="常用git命令行快捷方式"></a>常用git命令行快捷方式</h3><ul><li>gaa …… git add .</li><li>gcam ‘’ …… git commit -m ‘’</li><li>gl ……. git pull</li><li>gp ……. git push</li></ul><p>执行cat ~&#x2F;.oh-my-zsh&#x2F;plugins&#x2F;git&#x2F;git.plugin.zsh 查看更多简写</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>git log</li><li>git reflog(涉及到的所有操作步骤)</li><li>git reset –hard HEAD</li><li>git checkout file 恢复暂存区的文件到工作区</li><li>git checkout branch 切换分支</li><li>git stash</li><li>git stash pop</li><li>git branch -r 查看远程分支</li><li>git branch -a 查看所有分支</li><li>git remote 列出所有的远程主机</li><li>git pull –all 拉取远程所有的分支</li><li>git commit –amend -message&#x3D;””(修改最近的一次提交注释)</li><li><code>git checkout (branchname)</code> 切换分支命令</li><li><code>git branch (branchname)</code> 创建分支命令</li><li><code>git branch -d (branchname)</code> 删除分支命令</li><li>git push origin –delete Chapater6 删除远程分支命令</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio操作</title>
      <link href="/2023/01/11/AndroidStudio%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/01/11/AndroidStudio%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-studio操作"><a href="#Android-studio操作" class="headerlink" title="Android studio操作"></a>Android studio操作</h1><p>command + shift + R 当前文件替换</p><p>command + shift + F 全局查找</p><p>command + shift + R 全局替换</p><p>command + O 全局搜索类**&#x2F;<strong>文件</strong>&#x2F;<strong>关键字</strong>&#x2F;(<strong>包括系统类</strong>,<strong>自定义类</strong>)**</p><p>command + option + O 全局搜索方法</p><p>option + enter 将<strong>StatelessWidget</strong>转 <strong>StatefulWidget</strong>   快速修复  ****快速生成构造方法</p><p>command  + option + W 抽取代码为单独的<strong>Widget</strong></p><p>command  + option + M 抽取代码为单独的方法**,<strong>或者抽取成</strong>get**方法</p><p>command + option + L 格式化代码</p><p>command + D 复制单行</p><p>option + shift + up&#x2F;down上下移动代码</p><p>command + \  热重载**(hot reload)**</p><p>control+ R 运行项目</p><p>command+ delete 删除行</p><p><strong>Shift</strong> 双击 ****万能搜索</p><p>stless 快速创建一个<strong>StatelessWidget</strong></p><p>stful 快速创建一个<strong>StatefulWidget</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SEO技巧</title>
      <link href="/2023/01/11/SEO%E6%8A%80%E5%B7%A7/"/>
      <url>/2023/01/11/SEO%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="SEO技巧"><a href="#SEO技巧" class="headerlink" title="SEO技巧"></a>SEO技巧</h1><p>这篇文章其实是我本人的总结，因为工作中做完了一个官方网站并成功上线，最后组长检查代码看到我的keyword等一系列信息都是空的，把我骂得狗血淋头。一言不合就作总结，总结一些简单但是我们能做的seo小技巧，送给想把网站做到极致的人。</p><h2 id="SEO要点："><a href="#SEO要点：" class="headerlink" title="SEO要点："></a><strong>SEO要点：</strong></h2><ol><li>语义化html标签，用合适的标签嵌套合适的内容，不可过分依赖div，对浏览器更友善就能更容易被抓取。</li><li>重要的内容html代码放在前面，放在左边。搜索引擎爬虫是从左往右，从上到下进行抓取的，利用布局来实现重要的代码在上面</li><li>重要内容要写在html架构里面，蜘蛛不会抓取js的内容，</li><li>尽量减少使用iframe，因为蜘蛛不会抓取iframe的内容。</li><li>为图片img加上alt属性，加了alt就不必加title了，避免搜索引擎认为我们恶意优化。alt能让图片没加载时都能有文字提示。</li><li>需要强调的地方加上title，本页面内跳转a标签内也要加title。</li><li>重要的地方可以保留文字，有些地方必须用图，但是蜘蛛不会爬img，这时应该设置文本，再用缩进隐藏的方法去掉文字，例如logo的优化就是这样做的。注意隐藏不能用display：none，蜘蛛不会检索display：none的内容，应用这个方法的标签一般是logo，标题等重要信息</li><li>尽量做到js、css、html的分离，不要在html中写样式代码。</li><li>注释的东西能去掉应该去掉，对搜索引擎更加友好</li><li>css放在头部，js放在尾部，尽量使用外链或者工具对css和js进行压缩</li><li>减少http的请求，使页面更快加载。</li><li>使用本地缓存更快地访问网站，使用cdn网络，加快用户访问速度。</li><li>使用G-ZIP压缩，浏览速度更快，搜索引擎抓取信息量更大</li></ol><h2 id="关键一点是头部的title，description，keyword的设置。"><a href="#关键一点是头部的title，description，keyword的设置。" class="headerlink" title="关键一点是头部的title，description，keyword的设置。"></a><strong>关键一点是头部的title，description，keyword的设置。</strong></h2><ol><li>title设置不宜过长，要简短，网站的名字与相关的小内容，一般为10-20个字。不能重复</li><li>keywords设置10个关键词，没个词不能太长，简短且符合你网站的特点，不能重复</li><li>description，50个字内描述你的网站</li></ol><p><strong>description写原创的话，并包含2-3个关键词比较好</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> SEO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置</title>
      <link href="/2023/01/11/Nginx%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/01/11/Nginx%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><pre><code class="js">user www-data;#启动进程,通常设置成和cpu的数量相等worker_processes 2;pid /run/nginx.pid;include /etc/nginx/modules-enabled/*.conf;events &#123;    worker_connections 768;    # multi_accept on;&#125;http &#123;    ##    # Basic Settings    ##    sendfile on;    tcp_nopush on;    types_hash_max_size 2048;    # server_tokens off;    # server_names_hash_bucket_size 64;    # server_name_in_redirect off;    include /etc/nginx/mime.types;    default_type application/octet-stream;    ##    # SSL Settings    ##    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE    ssl_prefer_server_ciphers on;    ##    # Logging Settings    ##    access_log /var/log/nginx/access.log;    error_log /var/log/nginx/error.log;    # Gzip Settings    gzip on;    gzip_min_length 1000;    gzip_vary on;    gzip_proxied any;    gzip_comp_level 6;    gzip_buffers 16 8k;    gzip_http_version 1.1;    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;    ##    # Virtual Host Configs    ##    include /etc/nginx/conf.d/*.conf;    include /etc/nginx/sites-enabled/*;    map $sent_http_content_type $expires &#123;        &quot;text/html&quot; epoch;        &quot;text/html; charset=utf-8&quot; epoch;        default off;    &#125;    server &#123;        listen 80;        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life;        return 301 https://$host$request_uri;        # gzip on;        # gzip_types text/plain application/xml text/css application/javascript;        # gzip_min_length 1000;        # location / &#123;        #     expires $expires;        #     proxy_redirect off;        #     proxy_set_header Host $host;        #     proxy_set_header X-Real-IP $remote_addr;        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        #     proxy_set_header X-Forwarded-Proto $scheme;        #     proxy_read_timeout 1m;        #     proxy_connect_timeout 1m;        #     proxy_pass http://127.0.0.1:3000/;        # &#125;        # location ~ /.well-known &#123;        #     allow all;        # &#125;        # location ^~ /.well-known/pki-validation/ &#123;        #     add_header Cache-Control no-cache;        #     default_type &quot;text/plain&quot;;        #     rewrite /.well-known/pki-validation/(.*) /$1 break;        #     root /var/www/whatever;        # &#125;        # location /nuxt3-tag &#123;        #     expires $expires;        #     proxy_redirect off;        #     proxy_set_header Host $host;        #     proxy_set_header X-Real-IP $remote_addr;        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        #     proxy_set_header X-Forwarded-Proto $scheme;        #     proxy_read_timeout 1m;        #     proxy_connect_timeout 1m;        #     proxy_pass http://127.0.0.1:3000/nuxt3-tag;        # &#125;        # location /stable &#123;        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;        # &#125;        # location /nuxt3 &#123;        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;        # &#125;        # location /tag &#123;        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;        # &#125;        # location /stable/api &#123;        #     proxy_pass http://www.ptg.life:5000/api;        #     proxy_set_header Access-Control-Max-Age 86400;        #     proxy_set_header Host $host;        #     proxy_redirect off;        #     proxy_set_header X-Real-IP $remote_addr;        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        #     proxy_connect_timeout 60;        #     proxy_read_timeout 60;        #     proxy_send_timeout 60;        # &#125;        # location /static/ &#123;        #     valid_referers none blocked *.ptg.life;        #     if ($invalid_referer) &#123;        #         return 403;        #         break;        #     &#125;        #     expires 30d;        #     autoindex on;        #     root /data;        # &#125;    &#125;    server &#123;        listen 443 ssl;        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;        # 新版的nginx只用listen 443 ssl就行,需要注释        # ssl on;        keepalive_timeout 10m;        server_tokens off;        # 缓存SSL握手产生的参数和加密密钥的时长        ssl_session_timeout 10m;        # 证书        ssl_certificate /etc/nginx/certificate.crt;        ssl_certificate_key /etc/nginx/private.key;        # 日志        access_log /var/log/nginx/nginx.vhost.access.log;        error_log /var/log/nginx/nginx.vhost.error.log;        # 根用iframe嵌入做个隐式url        location / &#123;            index index.html index.htm index.html inde.php;            root /usr/share/nginx/html;        &#125;        location ~ /.well-known &#123;            allow all;        &#125;        location ^~ /.well-known/pki-validation/ &#123;            add_header Cache-Control no-cache;            default_type &quot;text/plain&quot;;            rewrite /.well-known/pki-validation/(.*) /$1 break;            root /var/www/whatever;        &#125;        location /nuxt3-tag/ &#123;            expires $expires;            proxy_redirect off;            proxy_set_header Host $host;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            proxy_set_header X-Forwarded-Proto $scheme;            proxy_read_timeout 1m;            proxy_connect_timeout 1m;            proxy_pass http://127.0.0.1:3000/nuxt3-tag/;        &#125;        location /naifu/ &#123;            expires $expires;            proxy_redirect off;            proxy_set_header Host $host;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            proxy_set_header X-Forwarded-Proto $scheme;            proxy_read_timeout 1m;            proxy_connect_timeout 1m;            proxy_pass http://127.0.0.1:3000/naifu/;        &#125;        location /nuxt3 &#123;            rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent;        &#125;        location /tag &#123;            rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent;        &#125;        # flask的接口代理        location /stable/api &#123;            proxy_pass http://127.0.0.1:5000/api;            proxy_set_header Access-Control-Max-Age 86400;            proxy_set_header Host $host;            proxy_redirect off;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            proxy_connect_timeout 60;            proxy_read_timeout 60;            proxy_send_timeout 60;        &#125;        location /static/ &#123;            valid_referers none blocked *.ptg.life;            if ($invalid_referer) &#123;                return 403;                break;            &#125;            expires 30d;            autoindex on;            root /data;        &#125;    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置Https</title>
      <link href="/2023/01/11/Nginx%E9%85%8D%E7%BD%AEHttps/"/>
      <url>/2023/01/11/Nginx%E9%85%8D%E7%BD%AEHttps/</url>
      
        <content type="html"><![CDATA[<h2 id="SSL-证书部署"><a href="#SSL-证书部署" class="headerlink" title="SSL 证书部署"></a><strong><strong>SSL 证书部署</strong></strong></h2><p>首先申请免费证书,推荐阿里或者七牛云<a href="https://cn.aliyun.com/product/cas?from_alibabacloud=&source=5176.11533457&userCode=ywqc0ubl&type=copy">https://cn.aliyun.com/product/cas?from_alibabacloud&#x3D;&amp;source&#x3D;5176.11533457&amp;userCode&#x3D;ywqc0ubl&amp;type&#x3D;copy</a></p><p>下载申请好的 ssl 证书文件压缩包到本地并解压到&#x2F;etc&#x2F;nginx&#x2F;</p><pre><code class="jsx">/etc/nginx/certificate.crt;/etc/nginx/private.key;</code></pre><p>将这两个文件上传至服务器的&#x2F;etc&#x2F;nginx&#x2F;目录里</p><pre><code class="jsx">scp /Users/lilin/Downloads/certificate.crt root@xxx.xx.xxx.xx:/etc/nginx/scp /Users/lilin/Downloads/private.crt root@xxx.xx.xxx.xx:/etc/nginx/</code></pre><h2 id="nginx-conf配置"><a href="#nginx-conf配置" class="headerlink" title="nginx.conf配置"></a>nginx.conf配置</h2><p>配置 https <a href="https://link.segmentfault.com/?enc=j1N+5oPWtgTmj4YYsFd5ww==.x32KBqxEXmGOwmMZfGjqRXhbghKgM1LsJhVbG+8iji5BQ1P9tGkbxC2u/dahY+V6">server</a>.注释掉之前的 http server 配置,新增 https server</p><pre><code class="jsx">将http重定向httpsserver &#123;        listen 80;        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;        return 301 https://$host$request_uri; &#125;server &#123;        listen 443 ssl;        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;        # 新版的nginx只用listen 443 ssl就行,需要注释        # ssl on;        keepalive_timeout 10m;        server_tokens off;        # 缓存SSL握手产生的参数和加密密钥的时长        ssl_session_timeout 10m;        # 证书        ssl_certificate /etc/nginx/certificate.crt;        ssl_certificate_key /etc/nginx/private.key;        # 日志        access_log /var/log/nginx/nginx.vhost.access.log;        error_log /var/log/nginx/nginx.vhost.error.log;        # 根用iframe嵌入做个隐式url        location / &#123;            index index.html index.htm index.html inde.php;            root /usr/share/nginx/html;        &#125;    &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18安装nginx</title>
      <link href="/2023/01/11/Ubuntu18%E5%AE%89%E8%A3%85nginx/"/>
      <url>/2023/01/11/Ubuntu18%E5%AE%89%E8%A3%85nginx/</url>
      
        <content type="html"><![CDATA[<h3 id="apt安装sudo-apt-update"><a href="#apt安装sudo-apt-update" class="headerlink" title="apt安装sudo apt update"></a><strong>apt安装</strong>sudo apt update</h3><pre><code class="jsx">sudo apt install nginxnginx -V默认安装路径 /etc/nginx/nginx.conf</code></pre><h3 id="nginx安装位置"><a href="#nginx安装位置" class="headerlink" title="nginx安装位置"></a><strong>nginx安装位置</strong></h3><pre><code class="jsx">**whereis nginx**</code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a><strong>启动</strong></h3><pre><code class="jsx">service nginx start</code></pre><h3 id="检查nginx配置文件"><a href="#检查nginx配置文件" class="headerlink" title="检查nginx配置文件"></a><strong>检查nginx配置文件</strong></h3><pre><code class="jsx">service nginx reload</code></pre><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a><strong>重启</strong></h3><pre><code class="jsx">nginx -s reopen</code></pre><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a><strong>停止</strong></h3><pre><code class="jsx">nginx -s stop</code></pre><h3 id="端口占用"><a href="#端口占用" class="headerlink" title="端口占用"></a>端口占用</h3><pre><code class="jsx">查看端口netstat -lntpnginx端口tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      248057/nginx: master结束端口kill 248057重启nginxservice nginx restart</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React基础</title>
      <link href="/2018/05/09/React%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/05/09/React%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><a href="https://reactjs.org/docs/hello-world.html">react官网</a></p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h4 id="1-无状态组件"><a href="#1-无状态组件" class="headerlink" title="1. 无状态组件"></a>1. 无状态组件</h4><ul><li>在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。</li><li>无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。</li><li>无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。</li></ul><pre><code>import React from &quot;react&quot;;//创建方式一,相当于es5的函数声明的方式创建 function NoState (props) &#123;     return (         &lt;div&gt;this is NoState Component&lt;/div&gt;     ) &#125;</code></pre><pre><code>//创建方式二,相当于es5的函数表达式的方式创建const NoState = (props) =&gt; &#123;    return (        &lt;div&gt;this is Nostate Component&lt;/div&gt;    )&#125;export default NoState</code></pre><hr><ul><li>无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。</li><li>无状态组件没有实例化得过程，因此无法访问组件this中的对象</li><li>无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理</li><li>无状态组件只能访问传入的props，同样的props会得到同样的渲染结果</li></ul><p>当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来<br>代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。<br>第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同</p><pre><code>// helloWorld.jsximport React, &#123;Component&#125; from &#39;react&#39;;class HelloWorld extends Component &#123;    clickHander = () =&gt; &#123;        console.log(this.props);        console.log(this.props.name);    &#125;    render() &#123;        return (            &lt;div onClick=&#123;this.clickHander&#125;&gt;&#123; this.props.name &#125; say: Hello World!&lt;/div&gt;        )    &#125;&#125;export default HelloWorld;</code></pre><h2 id="组件之间的交互"><a href="#组件之间的交互" class="headerlink" title="组件之间的交互"></a>组件之间的交互</h2><h4 id="父组件与子组件之间的交互"><a href="#父组件与子组件之间的交互" class="headerlink" title="父组件与子组件之间的交互"></a>父组件与子组件之间的交互</h4><ol><li>父组件修改子组件，只需要修改传入的props属性</li><li>子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行<br>子组件与子组件之间的交互</li><li>通过影响共同的父组件来进行交互</li></ol><pre><code>state = &#123;    switch: 0,    name: this.props.name1&#125;clickHander = () =&gt; &#123;    const &#123;name1, name2&#125; = this.props;    if (this.state.switch === 0) &#123;        this.setState(&#123;            switch: 1,            name: name2        &#125;)    &#125; else &#123;        this.setState(&#123;            switch: 0,            name: name1        &#125;)    &#125;&#125;;render() &#123;    return (        &lt;div onClick=&#123;this.clickHander&#125;&gt;hello world !&#123;this.state.name&#125;&lt;/div&gt;    )&#125;</code></pre><p>先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。</p><p>state &#x3D; {} &#x2F;&#x2F; 等同于ES5构造函数中的this.state &#x3D; {}<br>在对象中，我们可以通过this.state的方式来访问state中所存储的属性<br>setState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变<br>react赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了<br>而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行<br>&#x2F;&#x2F; 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: ‘Jason’})&#x2F;&#x2F; 然后立即查看它的值console.log(this.state.name) &#x2F;&#x2F; 仍然为Tom，不会立即改变</p><h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p>react组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样</p><pre><code>// 当然可能命名会是其他的，大概表达一个意思，不深究哈&#123;    nodeName: &#39;div&#39;,    className: &#39;hello-world&#39;,    style: &#123;&#125;,    parentNodes: &#39;root&#39;,    childrenNodes: []    ...&#125;</code></pre><p>而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的</p><pre><code>import React, &#123; Component &#125; from &#39;react&#39;;class HelloWorld extends Component &#123;    clickHander = () =&gt; &#123;        console.log(this.refs)    &#125;     render () &#123;        return (            &lt;div className=&quot;container&quot; onClick=&#123;this.clickHander&#125;&gt;                &lt;div ref=&quot;hello&quot; className=&quot;hello&quot;&gt;Hello&lt;/div&gt;                &lt;div ref=&quot;world&quot; className=&quot;world&quot;&gt;World&lt;/div&gt;            &lt;/div&gt;        )    &#125;&#125;export default HelloWorld;</code></pre><p>为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替<br>我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。<br>当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。</p><pre><code>// src/helloWorld.jsximport React, &#123; Component &#125; from &#39;react&#39;;class HelloWorld extends Component &#123;    clickHander = () =&gt; &#123;        console.log(this.refs)    &#125; refCallback = (elem) =&gt; &#123;        console.log(elem);    &#125; render () &#123;        return (            &lt;div className=&quot;container&quot; onClick=&#123;this.clickHander&#125;&gt;                &lt;div ref=&quot;hello&quot; className=&quot;hello&quot;&gt;Hello&lt;/div&gt;                &lt;div ref=&#123;this.refCallback&#125; className=&quot;world&quot;&gt;World&lt;/div&gt;            &lt;/div&gt;        )    &#125;&#125;export default HelloWorld;</code></pre><h3 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h3><p>件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数</p><h5 id="react组件有三种状态"><a href="#react组件有三种状态" class="headerlink" title="react组件有三种状态"></a>react组件有三种状态</h5><ul><li>Mounted：已经插入真实DOM</li><li>Updating：正在被重新渲染</li><li>Unmounted：已移出真实DOM</li><li></li></ul><h5 id="每个状态的处理函数"><a href="#每个状态的处理函数" class="headerlink" title="每个状态的处理函数"></a>每个状态的处理函数</h5><ul><li>will：函数在进入状态之前调用</li><li>did：函数在进入状态之后调用</li></ul><h5 id="组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中"><a href="#组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中" class="headerlink" title="组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中"></a>组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中</h5><ul><li>componentWillMount 在首次渲染完成之前，此时可修改组件的state</li><li>componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM</li></ul><h5 id="组件属性-我们前面提到的props与state-更新的前后时刻"><a href="#组件属性-我们前面提到的props与state-更新的前后时刻" class="headerlink" title="组件属性(我们前面提到的props与state)更新的前后时刻"></a>组件属性(我们前面提到的props与state)更新的前后时刻</h5><ul><li>componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state</li><li>componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素</li></ul><h6 id="组件取消挂载之前-取消之后就没必要提供钩子函数了"><a href="#组件取消挂载之前-取消之后就没必要提供钩子函数了" class="headerlink" title="组件取消挂载之前(取消之后就没必要提供钩子函数了)"></a>组件取消挂载之前(取消之后就没必要提供钩子函数了)</h6><p><code>componentWillUnmount</code></p><h6 id="两个特殊的处理函数"><a href="#两个特殊的处理函数" class="headerlink" title="两个特殊的处理函数"></a>两个特殊的处理函数</h6><ul><li><code>componentWillReceiveProps(object nextProps)</code>：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变-&gt;然后componentWillReceiveProps去判断是否需要重新渲染(<code>shouldComponentUpdate</code>)-&gt;如果不需要则继续running-&gt;如果需要则执行<code>componentWillUpdate</code>-&gt;渲染DOM树之后执行<code>componentDidUpdate</code>-&gt;进入running</li><li><code>shouldComponentUpdate(nextProps, nextState)</code>(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变-&gt;判断是否需要重新渲染新的props和state(<code>shouldComponentUpdate</code>) -&gt; 根据判断决定执行render过程还是继续·保持running状态</li></ul><h6 id="三个统一调用的方法-用于组件初始化，获取默认属性和状态"><a href="#三个统一调用的方法-用于组件初始化，获取默认属性和状态" class="headerlink" title="三个统一调用的方法,用于组件初始化，获取默认属性和状态"></a>三个统一调用的方法,用于组件初始化，获取默认属性和状态</h6><ul><li>getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享</li><li>getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props</li><li>render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出</li></ul><h6 id="已挂载的方法"><a href="#已挂载的方法" class="headerlink" title="已挂载的方法"></a>已挂载的方法</h6><ul><li>component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候</li></ul><blockquote><p>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。</p></blockquote><p><img src="http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg" alt="image"></p><h2 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a>PropTypes</h2><pre><code>import PropTypes from &#39;prop-types&#39;;MyComponent.propTypes = &#123;  // You can declare that a prop is a specific JS primitive. By default, these  // are all optional.  optionalArray: PropTypes.array,  optionalBool: PropTypes.bool,  optionalFunc: PropTypes.func,  optionalNumber: PropTypes.number,  optionalObject: PropTypes.object,  optionalString: PropTypes.string,  optionalSymbol: PropTypes.symbol,  // Anything that can be rendered: numbers, strings, elements or an array  // (or fragment) containing these types.  optionalNode: PropTypes.node,  // A React element.  optionalElement: PropTypes.element,  // You can also declare that a prop is an instance of a class. This uses  // JS&#39;s instanceof operator.  optionalMessage: PropTypes.instanceOf(Message),  // You can ensure that your prop is limited to specific values by treating  // it as an enum.  optionalEnum: PropTypes.oneOf([&#39;News&#39;, &#39;Photos&#39;]),  // An object that could be one of many types  optionalUnion: PropTypes.oneOfType([    PropTypes.string,    PropTypes.number,    PropTypes.instanceOf(Message)  ]),  // An array of a certain type  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),  // An object with property values of a certain type  optionalObjectOf: PropTypes.objectOf(PropTypes.number),  // An object taking on a particular shape  optionalObjectWithShape: PropTypes.shape(&#123;    color: PropTypes.string,    fontSize: PropTypes.number  &#125;),  // You can chain any of the above with `isRequired` to make sure a warning  // is shown if the prop isn&#39;t provided.  requiredFunc: PropTypes.func.isRequired,  // A value of any data type  requiredAny: PropTypes.any.isRequired,  // You can also specify a custom validator. It should return an Error  // object if the validation fails. Don&#39;t `console.warn` or throw, as this  // won&#39;t work inside `oneOfType`.  customProp: function(props, propName, componentName) &#123;    if (!/matchme/.test(props[propName])) &#123;      return new Error(        &#39;Invalid prop `&#39; + propName + &#39;` supplied to&#39; +        &#39; `&#39; + componentName + &#39;`. Validation failed.&#39;      );    &#125;  &#125;,  // You can also supply a custom validator to `arrayOf` and `objectOf`.  // It should return an Error object if the validation fails. The validator  // will be called for each key in the array or object. The first two  // arguments of the validator are the array or object itself, and the  // current item&#39;s key.  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) &#123;    if (!/matchme/.test(propValue[key])) &#123;      return new Error(        &#39;Invalid prop `&#39; + propFullName + &#39;` supplied to&#39; +        &#39; `&#39; + componentName + &#39;`. Validation failed.&#39;      );    &#125;  &#125;)&#125;;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
