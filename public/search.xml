<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>flask-sqlalchemy使用</title>
      <link href="/2023/01/12/flask-sqlalchemy%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/01/12/flask-sqlalchemy%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span>  <span class="hljs-title function_">filter</span>()    把过滤器添加到原查询上，返回一个新查询<br><br><span class="hljs-number">2.</span>  <span class="hljs-title function_">filter_by</span>()    把等值过滤器添加到原查询上，返回一个新查询<br><br><span class="hljs-number">3.</span>  limit    使用指定的值限定原查询返回的结果<br><br><span class="hljs-number">4.</span>  <span class="hljs-title function_">offset</span>()    偏移原查询返回的结果，返回一个新查询<br><br><span class="hljs-number">5.</span>  <span class="hljs-title function_">order_by</span>()    根据指定条件对原查询结果进行排序，返回一个新查询<br><br><span class="hljs-number">6.</span>  <span class="hljs-title function_">group_by</span>()    根据指定条件对原查询结果进行分组，返回一个新查询<br><br><span class="hljs-number">7.</span>  <span class="hljs-title function_">all</span>()    以列表形式返回查询的所有结果<br><br><span class="hljs-number">8.</span>  <span class="hljs-title function_">first</span>()    返回查询的第一个结果，如果未查到，返回 <span class="hljs-title class_">None</span><br><br><span class="hljs-number">9.</span>  <span class="hljs-title function_">first_or_404</span>()    返回查询的第一个结果，如果未查到，返回 <span class="hljs-number">404</span><br><br><span class="hljs-number">10.</span>  <span class="hljs-title function_">get</span>()    返回指定主键对应的行，如不存在，返回 <span class="hljs-title class_">None</span><br><br><span class="hljs-number">11.</span>  <span class="hljs-title function_">get_or_404</span>()    返回指定主键对应的行，如不存在，返回 <span class="hljs-number">404</span><br><br><span class="hljs-number">12.</span>  <span class="hljs-title function_">count</span>()    返回查询结果的数量<br><br><span class="hljs-number">13.</span>  <span class="hljs-title function_">paginate</span>()    返回一个<span class="hljs-title class_">Paginate</span>对象，它包含指定范围内的结果<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span>  <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">2.  查询所有用户数据</span><br><span class="hljs-string"></span><br><span class="hljs-string">3.  User.query.all()</span><br><span class="hljs-string"></span><br><span class="hljs-string">5.  查询有多少个用户</span><br><span class="hljs-string"></span><br><span class="hljs-string">6.  User.query.count()</span><br><span class="hljs-string"></span><br><span class="hljs-string">8.  查询第1个用户</span><br><span class="hljs-string"></span><br><span class="hljs-string">9.  User.query.first()</span><br><span class="hljs-string"></span><br><span class="hljs-string">10.  User.query.get(1) # 根据id查询</span><br><span class="hljs-string"></span><br><span class="hljs-string">12.  查询id为4的用户[3种方式]</span><br><span class="hljs-string"></span><br><span class="hljs-string">13.  User.query.get(4)</span><br><span class="hljs-string"></span><br><span class="hljs-string">14.  User.query.filter_by(id=4).all() # 简单查询 使用关键字实参的形式来设置字段名</span><br><span class="hljs-string"></span><br><span class="hljs-string">15.  User.query.filter(User.id == 4).all() # 复杂查询 使用恒等式等其他形式来设置条件</span><br><span class="hljs-string"></span><br><span class="hljs-string">17.  查询名字结尾字符为g的所有用户[开始 / 包含]</span><br><span class="hljs-string"></span><br><span class="hljs-string">18.  User.query.filter(User.name.endswith(&quot;</span>g<span class="hljs-string">&quot;)).all()</span><br><span class="hljs-string"></span><br><span class="hljs-string">19.  User.query.filter(User.name.startswith(&quot;</span>w<span class="hljs-string">&quot;)).all()</span><br><span class="hljs-string"></span><br><span class="hljs-string">20.  User.query.filter(User.name.contains(&quot;</span>n<span class="hljs-string">&quot;)).all()</span><br><span class="hljs-string"></span><br><span class="hljs-string">21.  User.query.filter(User.name.like(&quot;</span>%n%g<span class="hljs-string">&quot;)).all() 模糊查询</span><br><span class="hljs-string"></span><br><span class="hljs-string">23.  查询名字和邮箱都以li开头的所有用户[2种方式]</span><br><span class="hljs-string"></span><br><span class="hljs-string">24.  User.query.filter(User.name.startswith(&quot;</span>li<span class="hljs-string">&quot;), User.email.startswith(&quot;</span>li<span class="hljs-string">&quot;)).all()</span><br><span class="hljs-string"></span><br><span class="hljs-string">26.  from sqlalchemy import and_</span><br><span class="hljs-string"></span><br><span class="hljs-string">27.  User.query.filter(and_(User.name.startswith(&quot;</span>li<span class="hljs-string">&quot;), User.email.startswith(&quot;</span>li<span class="hljs-string">&quot;))).all()</span><br><span class="hljs-string"></span><br><span class="hljs-string">29.  查询age是25 或者 \`email\`以\`itheima.com\`结尾的所有用户</span><br><span class="hljs-string"></span><br><span class="hljs-string">30.  from sqlalchemy import or_</span><br><span class="hljs-string"></span><br><span class="hljs-string">31.  User.query.filter(or_(User.age == 25, User.email.endswith(&quot;</span>itheima.<span class="hljs-property">com</span><span class="hljs-string">&quot;))).all()</span><br><span class="hljs-string"></span><br><span class="hljs-string">33.  查询名字不等于wang的所有用户[2种方式]</span><br><span class="hljs-string"></span><br><span class="hljs-string">34.  from sqlalchemy import not_</span><br><span class="hljs-string"></span><br><span class="hljs-string">35.  User.query.filter(not_(User.name == &quot;</span>wang<span class="hljs-string">&quot;)).all()</span><br><span class="hljs-string"></span><br><span class="hljs-string">36.  User.query.filter(User.name != &quot;</span>wang<span class="hljs-string">&quot;).all()</span><br><span class="hljs-string"></span><br><span class="hljs-string">38.  查询id为[1, 3, 5, 7, 9]的用户</span><br><span class="hljs-string"></span><br><span class="hljs-string">39.  User.query.filter(User.id.in_([1, 3, 5, 7, 9])).all()</span><br><span class="hljs-string"></span><br><span class="hljs-string">41.  所有用户先按年龄从小到大, 再按id从大到小排序, 取前5个</span><br><span class="hljs-string"></span><br><span class="hljs-string">42.  User.query.order_by(User.age, User.id.desc()).limit(5).all()</span><br><span class="hljs-string"></span><br><span class="hljs-string">44.  分页查询, 每页3个, 查询第2页的数据</span><br><span class="hljs-string"></span><br><span class="hljs-string">45.  pn = User.query.paginate(2, 3)</span><br><span class="hljs-string"></span><br><span class="hljs-string">46.  pn.items 获取该页的数据 pn.page 获取当前的页码 pn.pages 获取总页数</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令的使用</title>
      <link href="/2023/01/11/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/01/11/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="git名词"><a href="#git名词" class="headerlink" title="git名词"></a>git名词</h3><ul><li>workspace :工作区</li><li>Index&#x2F;Stage : 暂存区</li><li>Repository : 仓库区(或本地仓库)</li><li>Remote :远程仓库区</li></ul><h3 id="常用操作分部解析"><a href="#常用操作分部解析" class="headerlink" title="常用操作分部解析"></a>常用操作分部解析</h3><ul><li>在任何目录创建新的git仓库,执行 git init**,** .git文件就是本地的一个仓库</li><li>git status 查看修改状态</li><li>git add ,是将文件放入了暂存区,可以使用git checkout “文件名” 将文件从暂存区重新拿到工作区</li><li>git commit ,是将文件从暂存区放入到本地.git仓库</li><li>git status, 查看文件的状态,在暂存区还是在本地仓库,还是已经在本地仓库,或者已经提交(通常这些vscode工具一目了然)</li><li>git pull ,拉取的默认是你自己的分支,详细:git pull origin dev, git pull origin master 拉去远程master分支</li></ul><h3 id="git-配置"><a href="#git-配置" class="headerlink" title="git 配置"></a>git 配置</h3><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-comment"># 显示当前的Git配置</span><br>$ <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-built_in">--list</span><br><br><span class="hljs-comment"># 编辑Git配置文件</span><br>$ <span class="hljs-string">git</span> <span class="hljs-string">config</span> -<span class="hljs-string">e</span> [<span class="hljs-built_in">--global]</span><br><br><span class="hljs-comment"># 设置提交代码时的用户信息</span><br>$ <span class="hljs-string">git</span> <span class="hljs-string">config</span> [<span class="hljs-built_in">--global]</span> <span class="hljs-string">user</span>.<span class="hljs-string">name</span> <span class="hljs-string">&quot;[name]&quot;</span><br>$ <span class="hljs-string">git</span> <span class="hljs-string">config</span> [<span class="hljs-built_in">--global]</span> <span class="hljs-string">user</span>.<span class="hljs-string">email</span> <span class="hljs-string">&quot;[email address]&quot;</span><br></code></pre></td></tr></table></figure><h3 id="常用流程"><a href="#常用流程" class="headerlink" title="常用流程"></a>常用流程</h3><ul><li>git add .</li><li>git commit -m ‘ ‘</li><li>git pull</li><li>git push</li></ul><h3 id="常用git命令行快捷方式"><a href="#常用git命令行快捷方式" class="headerlink" title="常用git命令行快捷方式"></a>常用git命令行快捷方式</h3><ul><li>gaa …… git add .</li><li>gcam ‘’ …… git commit -m ‘’</li><li>gl ……. git pull</li><li>gp ……. git push</li></ul><p>执行cat ~&#x2F;.oh-my-zsh&#x2F;plugins&#x2F;git&#x2F;git.plugin.zsh 查看更多简写</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>git log</li><li>git reflog(涉及到的所有操作步骤)</li><li>git reset –hard HEAD</li><li>git checkout file 恢复暂存区的文件到工作区</li><li>git checkout branch 切换分支</li><li>git stash</li><li>git stash pop</li><li>git branch -r 查看远程分支</li><li>git branch -a 查看所有分支</li><li>git remote 列出所有的远程主机</li><li>git pull –all 拉取远程所有的分支</li><li>git commit –amend -message&#x3D;””(修改最近的一次提交注释)</li><li><code>git checkout (branchname)</code> 切换分支命令</li><li><code>git branch (branchname)</code> 创建分支命令</li><li><code>git branch -d (branchname)</code> 删除分支命令</li><li>git push origin –delete Chapater6 删除远程分支命令</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio操作</title>
      <link href="/2023/01/11/AndroidStudio%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/01/11/AndroidStudio%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-studio操作"><a href="#Android-studio操作" class="headerlink" title="Android studio操作"></a>Android studio操作</h1><p>command + shift + R 当前文件替换</p><p>command + shift + F 全局查找</p><p>command + shift + R 全局替换</p><p>command + O 全局搜索类**&#x2F;<strong>文件</strong>&#x2F;<strong>关键字</strong>&#x2F;(<strong>包括系统类</strong>,<strong>自定义类</strong>)**</p><p>command + option + O 全局搜索方法</p><p>option + enter 将<strong>StatelessWidget</strong>转 <strong>StatefulWidget</strong>   快速修复  ****快速生成构造方法</p><p>command  + option + W 抽取代码为单独的<strong>Widget</strong></p><p>command  + option + M 抽取代码为单独的方法**,<strong>或者抽取成</strong>get**方法</p><p>command + option + L 格式化代码</p><p>command + D 复制单行</p><p>option + shift + up&#x2F;down上下移动代码</p><p>command + \  热重载**(hot reload)**</p><p>control+ R 运行项目</p><p>command+ delete 删除行</p><p><strong>Shift</strong> 双击 ****万能搜索</p><p>stless 快速创建一个<strong>StatelessWidget</strong></p><p>stful 快速创建一个<strong>StatefulWidget</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>studio操作</title>
      <link href="/2023/01/11/studio%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/01/11/studio%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SEO技巧</title>
      <link href="/2023/01/11/SEO%E6%8A%80%E5%B7%A7/"/>
      <url>/2023/01/11/SEO%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="SEO技巧"><a href="#SEO技巧" class="headerlink" title="SEO技巧"></a>SEO技巧</h1><p>这篇文章其实是我本人的总结，因为工作中做完了一个官方网站并成功上线，最后组长检查代码看到我的keyword等一系列信息都是空的，把我骂得狗血淋头。一言不合就作总结，总结一些简单但是我们能做的seo小技巧，送给想把网站做到极致的人。</p><h2 id="SEO要点："><a href="#SEO要点：" class="headerlink" title="SEO要点："></a><strong>SEO要点：</strong></h2><ol><li>语义化html标签，用合适的标签嵌套合适的内容，不可过分依赖div，对浏览器更友善就能更容易被抓取。</li><li>重要的内容html代码放在前面，放在左边。搜索引擎爬虫是从左往右，从上到下进行抓取的，利用布局来实现重要的代码在上面</li><li>重要内容要写在html架构里面，蜘蛛不会抓取js的内容，</li><li>尽量减少使用iframe，因为蜘蛛不会抓取iframe的内容。</li><li>为图片img加上alt属性，加了alt就不必加title了，避免搜索引擎认为我们恶意优化。alt能让图片没加载时都能有文字提示。</li><li>需要强调的地方加上title，本页面内跳转a标签内也要加title。</li><li>重要的地方可以保留文字，有些地方必须用图，但是蜘蛛不会爬img，这时应该设置文本，再用缩进隐藏的方法去掉文字，例如logo的优化就是这样做的。注意隐藏不能用display：none，蜘蛛不会检索display：none的内容，应用这个方法的标签一般是logo，标题等重要信息</li><li>尽量做到js、css、html的分离，不要在html中写样式代码。</li><li>注释的东西能去掉应该去掉，对搜索引擎更加友好</li><li>css放在头部，js放在尾部，尽量使用外链或者工具对css和js进行压缩</li><li>减少http的请求，使页面更快加载。</li><li>使用本地缓存更快地访问网站，使用cdn网络，加快用户访问速度。</li><li>使用G-ZIP压缩，浏览速度更快，搜索引擎抓取信息量更大</li></ol><h2 id="关键一点是头部的title，description，keyword的设置。"><a href="#关键一点是头部的title，description，keyword的设置。" class="headerlink" title="关键一点是头部的title，description，keyword的设置。"></a><strong>关键一点是头部的title，description，keyword的设置。</strong></h2><ol><li>title设置不宜过长，要简短，网站的名字与相关的小内容，一般为10-20个字。不能重复</li><li>keywords设置10个关键词，没个词不能太长，简短且符合你网站的特点，不能重复</li><li>description，50个字内描述你的网站</li></ol><p><strong>description写原创的话，并包含2-3个关键词比较好</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置</title>
      <link href="/2023/01/11/nginx%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/01/11/nginx%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><code class="hljs js">user www-data;<br>#启动进程,通常设置成和cpu的数量相等<br>worker_processes <span class="hljs-number">2</span>;<br>pid /run/nginx.<span class="hljs-property">pid</span>;<br>include /etc/nginx/modules-enabled<span class="hljs-comment">/*.conf;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">events &#123;</span><br><span class="hljs-comment">    worker_connections 768;</span><br><span class="hljs-comment">    # multi_accept on;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">http &#123;</span><br><span class="hljs-comment">    ##</span><br><span class="hljs-comment">    # Basic Settings</span><br><span class="hljs-comment">    ##</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    sendfile on;</span><br><span class="hljs-comment">    tcp_nopush on;</span><br><span class="hljs-comment">    types_hash_max_size 2048;</span><br><span class="hljs-comment">    # server_tokens off;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    # server_names_hash_bucket_size 64;</span><br><span class="hljs-comment">    # server_name_in_redirect off;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    include /etc/nginx/mime.types;</span><br><span class="hljs-comment">    default_type application/octet-stream;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    ##</span><br><span class="hljs-comment">    # SSL Settings</span><br><span class="hljs-comment">    ##</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE</span><br><span class="hljs-comment">    ssl_prefer_server_ciphers on;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    ##</span><br><span class="hljs-comment">    # Logging Settings</span><br><span class="hljs-comment">    ##</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    access_log /var/log/nginx/access.log;</span><br><span class="hljs-comment">    error_log /var/log/nginx/error.log;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    # Gzip Settings</span><br><span class="hljs-comment">    gzip on;</span><br><span class="hljs-comment">    gzip_min_length 1000;</span><br><span class="hljs-comment">    gzip_vary on;</span><br><span class="hljs-comment">    gzip_proxied any;</span><br><span class="hljs-comment">    gzip_comp_level 6;</span><br><span class="hljs-comment">    gzip_buffers 16 8k;</span><br><span class="hljs-comment">    gzip_http_version 1.1;</span><br><span class="hljs-comment">    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    ##</span><br><span class="hljs-comment">    # Virtual Host Configs</span><br><span class="hljs-comment">    ##</span><br><span class="hljs-comment">    include /etc/nginx/conf.d/*.conf;</span><br><span class="hljs-comment">    include /etc/nginx/sites-enabled/*;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    map $sent_http_content_type $expires &#123;</span><br><span class="hljs-comment">        &quot;text/html&quot; epoch;</span><br><span class="hljs-comment">        &quot;text/html; charset=utf-8&quot; epoch;</span><br><span class="hljs-comment">        default off;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    server &#123;</span><br><span class="hljs-comment">        listen 80;</span><br><span class="hljs-comment">        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life;</span><br><span class="hljs-comment">        return 301 https://$host$request_uri;</span><br><span class="hljs-comment">        # gzip on;</span><br><span class="hljs-comment">        # gzip_types text/plain application/xml text/css application/javascript;</span><br><span class="hljs-comment">        # gzip_min_length 1000;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        # location / &#123;</span><br><span class="hljs-comment">        #     expires $expires;</span><br><span class="hljs-comment">        #     proxy_redirect off;</span><br><span class="hljs-comment">        #     proxy_set_header Host $host;</span><br><span class="hljs-comment">        #     proxy_set_header X-Real-IP $remote_addr;</span><br><span class="hljs-comment">        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="hljs-comment">        #     proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="hljs-comment">        #     proxy_read_timeout 1m;</span><br><span class="hljs-comment">        #     proxy_connect_timeout 1m;</span><br><span class="hljs-comment">        #     proxy_pass http://127.0.0.1:3000/;</span><br><span class="hljs-comment">        # &#125;</span><br><span class="hljs-comment">        # location ~ /.well-known &#123;</span><br><span class="hljs-comment">        #     allow all;</span><br><span class="hljs-comment">        # &#125;</span><br><span class="hljs-comment">        # location ^~ /.well-known/pki-validation/ &#123;</span><br><span class="hljs-comment">        #     add_header Cache-Control no-cache;</span><br><span class="hljs-comment">        #     default_type &quot;text/plain&quot;;</span><br><span class="hljs-comment">        #     rewrite /.well-known/pki-validation/(.*) /$1 break;</span><br><span class="hljs-comment">        #     root /var/www/whatever;</span><br><span class="hljs-comment">        # &#125;</span><br><span class="hljs-comment">        # location /nuxt3-tag &#123;</span><br><span class="hljs-comment">        #     expires $expires;</span><br><span class="hljs-comment">        #     proxy_redirect off;</span><br><span class="hljs-comment">        #     proxy_set_header Host $host;</span><br><span class="hljs-comment">        #     proxy_set_header X-Real-IP $remote_addr;</span><br><span class="hljs-comment">        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="hljs-comment">        #     proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="hljs-comment">        #     proxy_read_timeout 1m;</span><br><span class="hljs-comment">        #     proxy_connect_timeout 1m;</span><br><span class="hljs-comment">        #     proxy_pass http://127.0.0.1:3000/nuxt3-tag;</span><br><span class="hljs-comment">        # &#125;</span><br><span class="hljs-comment">        # location /stable &#123;</span><br><span class="hljs-comment">        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;</span><br><span class="hljs-comment">        # &#125;</span><br><span class="hljs-comment">        # location /nuxt3 &#123;</span><br><span class="hljs-comment">        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;</span><br><span class="hljs-comment">        # &#125;</span><br><span class="hljs-comment">        # location /tag &#123;</span><br><span class="hljs-comment">        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;</span><br><span class="hljs-comment">        # &#125;</span><br><span class="hljs-comment">        # location /stable/api &#123;</span><br><span class="hljs-comment">        #     proxy_pass http://www.ptg.life:5000/api;</span><br><span class="hljs-comment">        #     proxy_set_header Access-Control-Max-Age 86400;</span><br><span class="hljs-comment">        #     proxy_set_header Host $host;</span><br><span class="hljs-comment">        #     proxy_redirect off;</span><br><span class="hljs-comment">        #     proxy_set_header X-Real-IP $remote_addr;</span><br><span class="hljs-comment">        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="hljs-comment">        #     proxy_connect_timeout 60;</span><br><span class="hljs-comment">        #     proxy_read_timeout 60;</span><br><span class="hljs-comment">        #     proxy_send_timeout 60;</span><br><span class="hljs-comment">        # &#125;</span><br><span class="hljs-comment">        # location /static/ &#123;</span><br><span class="hljs-comment">        #     valid_referers none blocked *.ptg.life;</span><br><span class="hljs-comment">        #     if ($invalid_referer) &#123;</span><br><span class="hljs-comment">        #         return 403;</span><br><span class="hljs-comment">        #         break;</span><br><span class="hljs-comment">        #     &#125;</span><br><span class="hljs-comment">        #     expires 30d;</span><br><span class="hljs-comment">        #     autoindex on;</span><br><span class="hljs-comment">        #     root /data;</span><br><span class="hljs-comment">        # &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    server &#123;</span><br><span class="hljs-comment">        listen 443 ssl;</span><br><span class="hljs-comment">        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        # 新版的nginx只用listen 443 ssl就行,需要注释</span><br><span class="hljs-comment">        # ssl on;</span><br><span class="hljs-comment">        keepalive_timeout 10m;</span><br><span class="hljs-comment">        server_tokens off;</span><br><span class="hljs-comment">        # 缓存SSL握手产生的参数和加密密钥的时长</span><br><span class="hljs-comment">        ssl_session_timeout 10m;</span><br><span class="hljs-comment">        # 证书</span><br><span class="hljs-comment">        ssl_certificate /etc/nginx/certificate.crt;</span><br><span class="hljs-comment">        ssl_certificate_key /etc/nginx/private.key;</span><br><span class="hljs-comment">        # 日志</span><br><span class="hljs-comment">        access_log /var/log/nginx/nginx.vhost.access.log;</span><br><span class="hljs-comment">        error_log /var/log/nginx/nginx.vhost.error.log;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        # 根用iframe嵌入做个隐式url</span><br><span class="hljs-comment">        location / &#123;</span><br><span class="hljs-comment">            index index.html index.htm index.html inde.php;</span><br><span class="hljs-comment">            root /usr/share/nginx/html;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        location ~ /.well-known &#123;</span><br><span class="hljs-comment">            allow all;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        location ^~ /.well-known/pki-validation/ &#123;</span><br><span class="hljs-comment">            add_header Cache-Control no-cache;</span><br><span class="hljs-comment">            default_type &quot;text/plain&quot;;</span><br><span class="hljs-comment">            rewrite /.well-known/pki-validation/(.*) /$1 break;</span><br><span class="hljs-comment">            root /var/www/whatever;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        location /nuxt3-tag/ &#123;</span><br><span class="hljs-comment">            expires $expires;</span><br><span class="hljs-comment">            proxy_redirect off;</span><br><span class="hljs-comment">            proxy_set_header Host $host;</span><br><span class="hljs-comment">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="hljs-comment">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="hljs-comment">            proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="hljs-comment">            proxy_read_timeout 1m;</span><br><span class="hljs-comment">            proxy_connect_timeout 1m;</span><br><span class="hljs-comment">            proxy_pass http://127.0.0.1:3000/nuxt3-tag/;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        location /naifu/ &#123;</span><br><span class="hljs-comment">            expires $expires;</span><br><span class="hljs-comment">            proxy_redirect off;</span><br><span class="hljs-comment">            proxy_set_header Host $host;</span><br><span class="hljs-comment">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="hljs-comment">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="hljs-comment">            proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="hljs-comment">            proxy_read_timeout 1m;</span><br><span class="hljs-comment">            proxy_connect_timeout 1m;</span><br><span class="hljs-comment">            proxy_pass http://127.0.0.1:3000/naifu/;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        location /nuxt3 &#123;</span><br><span class="hljs-comment">            rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        location /tag &#123;</span><br><span class="hljs-comment">            rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        # flask的接口代理</span><br><span class="hljs-comment">        location /stable/api &#123;</span><br><span class="hljs-comment">            proxy_pass http://127.0.0.1:5000/api;</span><br><span class="hljs-comment">            proxy_set_header Access-Control-Max-Age 86400;</span><br><span class="hljs-comment">            proxy_set_header Host $host;</span><br><span class="hljs-comment">            proxy_redirect off;</span><br><span class="hljs-comment">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="hljs-comment">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="hljs-comment">            proxy_connect_timeout 60;</span><br><span class="hljs-comment">            proxy_read_timeout 60;</span><br><span class="hljs-comment">            proxy_send_timeout 60;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        location /static/ &#123;</span><br><span class="hljs-comment">            valid_referers none blocked *.ptg.life;</span><br><span class="hljs-comment">            if ($invalid_referer) &#123;</span><br><span class="hljs-comment">                return 403;</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            expires 30d;</span><br><span class="hljs-comment">            autoindex on;</span><br><span class="hljs-comment">            root /data;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置https</title>
      <link href="/2023/01/11/nginx%E9%85%8D%E7%BD%AEhttps/"/>
      <url>/2023/01/11/nginx%E9%85%8D%E7%BD%AEhttps/</url>
      
        <content type="html"><![CDATA[<h2 id="SSL-证书部署"><a href="#SSL-证书部署" class="headerlink" title="SSL 证书部署"></a><strong><strong>SSL 证书部署</strong></strong></h2><p>首先申请免费证书,推荐阿里或者七牛云<a href="https://cn.aliyun.com/product/cas?from_alibabacloud=&source=5176.11533457&userCode=ywqc0ubl&type=copy">https://cn.aliyun.com/product/cas?from_alibabacloud&#x3D;&amp;source&#x3D;5176.11533457&amp;userCode&#x3D;ywqc0ubl&amp;type&#x3D;copy</a></p><p>下载申请好的 ssl 证书文件压缩包到本地并解压到&#x2F;etc&#x2F;nginx&#x2F;</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx">/etc/nginx/certificate.<span class="hljs-property">crt</span>;<br><span class="hljs-regexp">/etc/</span>nginx/private.<span class="hljs-property">key</span>;<br></code></pre></td></tr></table></figure><p>将这两个文件上传至服务器的&#x2F;etc&#x2F;nginx&#x2F;目录里</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx">scp /<span class="hljs-title class_">Users</span>/lilin/<span class="hljs-title class_">Downloads</span>/certificate.<span class="hljs-property">crt</span> root@xxx.<span class="hljs-property">xx</span>.<span class="hljs-property">xxx</span>.<span class="hljs-property">xx</span>:<span class="hljs-regexp">/etc/</span>nginx/<br>scp /<span class="hljs-title class_">Users</span>/lilin/<span class="hljs-title class_">Downloads</span>/private.<span class="hljs-property">crt</span> root@xxx.<span class="hljs-property">xx</span>.<span class="hljs-property">xxx</span>.<span class="hljs-property">xx</span>:<span class="hljs-regexp">/etc/</span>nginx/<br></code></pre></td></tr></table></figure><h2 id="nginx-conf配置"><a href="#nginx-conf配置" class="headerlink" title="nginx.conf配置"></a>nginx.conf配置</h2><p>配置 https <a href="https://link.segmentfault.com/?enc=j1N+5oPWtgTmj4YYsFd5ww==.x32KBqxEXmGOwmMZfGjqRXhbghKgM1LsJhVbG+8iji5BQ1P9tGkbxC2u/dahY+V6">server</a>.注释掉之前的 http server 配置,新增 https server</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jsx">将http重定向https<br>server &#123;<br>        listen <span class="hljs-number">80</span>;<br>        server_name ptg.<span class="hljs-property">life</span> www.<span class="hljs-property">ptg</span>.<span class="hljs-property">life</span> noval.<span class="hljs-property">ptg</span>.<span class="hljs-property">life</span> prompt.<span class="hljs-property">ptg</span>.<span class="hljs-property">life</span> naifu.<span class="hljs-property">ptg</span>.<span class="hljs-property">life</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">301</span> <span class="hljs-attr">https</span>:<span class="hljs-comment">//$host$request_uri;</span><br> &#125;<br><br>server &#123;<br>        listen <span class="hljs-number">443</span> ssl;<br>        server_name ptg.<span class="hljs-property">life</span> www.<span class="hljs-property">ptg</span>.<span class="hljs-property">life</span> noval.<span class="hljs-property">ptg</span>.<span class="hljs-property">life</span> prompt.<span class="hljs-property">ptg</span>.<span class="hljs-property">life</span> naifu.<span class="hljs-property">ptg</span>.<span class="hljs-property">life</span>;<br><br>        # 新版的nginx只用listen <span class="hljs-number">443</span> ssl就行,需要注释<br>        # ssl on;<br>        keepalive_timeout 10m;<br>        server_tokens off;<br>        # 缓存<span class="hljs-variable constant_">SSL</span>握手产生的参数和加密密钥的时长<br>        ssl_session_timeout 10m;<br>        # 证书<br>        ssl_certificate /etc/nginx/certificate.<span class="hljs-property">crt</span>;<br>        ssl_certificate_key /etc/nginx/private.<span class="hljs-property">key</span>;<br>        # 日志<br>        access_log /<span class="hljs-keyword">var</span>/log/nginx/nginx.<span class="hljs-property">vhost</span>.<span class="hljs-property">access</span>.<span class="hljs-property">log</span>;<br>        error_log /<span class="hljs-keyword">var</span>/log/nginx/nginx.<span class="hljs-property">vhost</span>.<span class="hljs-property">error</span>.<span class="hljs-property">log</span>;<br><br>        # 根用iframe嵌入做个隐式url<br>        location / &#123;<br>            index index.<span class="hljs-property">html</span> index.<span class="hljs-property">htm</span> index.<span class="hljs-property">html</span> inde.<span class="hljs-property">php</span>;<br>            root /usr/share/nginx/html;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu18安装nginx</title>
      <link href="/2023/01/11/ubuntu18%E5%AE%89%E8%A3%85nginx/"/>
      <url>/2023/01/11/ubuntu18%E5%AE%89%E8%A3%85nginx/</url>
      
        <content type="html"><![CDATA[<h3 id="apt安装sudo-apt-update"><a href="#apt安装sudo-apt-update" class="headerlink" title="apt安装sudo apt update"></a><strong>apt安装</strong>sudo apt update</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">sudo apt install nginx<br><br>nginx -V<br><br>默认安装路径 /etc/nginx/nginx.<span class="hljs-property">conf</span><br></code></pre></td></tr></table></figure><h3 id="nginx安装位置"><a href="#nginx安装位置" class="headerlink" title="nginx安装位置"></a><strong>nginx安装位置</strong></h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">**whereis nginx**<br></code></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a><strong>启动</strong></h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">service nginx start<br></code></pre></td></tr></table></figure><h3 id="检查nginx配置文件"><a href="#检查nginx配置文件" class="headerlink" title="检查nginx配置文件"></a><strong>检查nginx配置文件</strong></h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">service nginx reload<br></code></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a><strong>重启</strong></h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">nginx -s reopen<br></code></pre></td></tr></table></figure><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a><strong>停止</strong></h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">nginx -s stop<br></code></pre></td></tr></table></figure><h3 id="端口占用"><a href="#端口占用" class="headerlink" title="端口占用"></a>端口占用</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx">查看端口<br>netstat -lntp<br><br>nginx端口<br>tcp        <span class="hljs-number">0</span>      <span class="hljs-number">0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">80</span>              <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:*               <span class="hljs-variable constant_">LISTEN</span>      <span class="hljs-number">248057</span>/<span class="hljs-attr">nginx</span>: master<br><br>结束端口<br>kill <span class="hljs-number">248057</span><br><br>重启nginx<br>service nginx restart<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/11/hello-world/"/>
      <url>/2023/01/11/hello-world/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p><hr><h2 id="title-Hello-World"><a href="#title-Hello-World" class="headerlink" title="title: Hello World"></a>title: Hello World</h2><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start-1"><a href="#Quick-Start-1" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-1"><a href="#Create-a-new-post-1" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server-1"><a href="#Run-server-1" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files-1"><a href="#Generate-static-files-1" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites-1"><a href="#Deploy-to-remote-sites-1" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p><hr><h2 id="title-Hello-World-1"><a href="#title-Hello-World-1" class="headerlink" title="title: Hello World"></a>title: Hello World</h2><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start-2"><a href="#Quick-Start-2" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-2"><a href="#Create-a-new-post-2" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server-2"><a href="#Run-server-2" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files-2"><a href="#Generate-static-files-2" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites-2"><a href="#Deploy-to-remote-sites-2" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 哈哈哈1223 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react基础2</title>
      <link href="/2018/05/09/react%E5%9F%BA%E7%A1%802/"/>
      <url>/2018/05/09/react%E5%9F%BA%E7%A1%802/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><a href="https://reactjs.org/docs/hello-world.html">react官网</a></p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h4 id="1-无状态组件"><a href="#1-无状态组件" class="headerlink" title="1. 无状态组件"></a>1. 无状态组件</h4><ul><li>在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。</li><li>无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。</li><li>无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。</li></ul><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta">import React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">//创建方式一,相当于es5的函数声明的方式创建</span><br> function NoState (props) &#123;<br>     <span class="hljs-keyword">return</span> (<br>         &lt;<span class="hljs-keyword">div</span>&gt;<span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> NoState Component&lt;/<span class="hljs-keyword">div</span>&gt;<br>     )<br> &#125;<br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">//创建方式二,相当于es5的函数表达式的方式创建</span><br><span class="hljs-keyword">const</span> NoState = (props) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (<br>        &lt;<span class="hljs-keyword">div</span>&gt;<span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> Nostate Component&lt;/<span class="hljs-keyword">div</span>&gt;<br>    )<br>&#125;<br><br>export <span class="hljs-literal">default</span> NoState<br></code></pre></td></tr></table></figure><hr><ul><li>无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。</li><li>无状态组件没有实例化得过程，因此无法访问组件this中的对象</li><li>无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理</li><li>无状态组件只能访问传入的props，同样的props会得到同样的渲染结果</li></ul><p>当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来<br>代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。<br>第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// helloWorld.jsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-type">React</span>, &#123;<span class="hljs-type">Component</span>&#125; from &#x27;react&#x27;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    clickHander = () =&gt; &#123;<br>        console.log(<span class="hljs-keyword">this</span>.props);<br>        console.log(<span class="hljs-keyword">this</span>.props.name);<br>    &#125;<br><br>    render() &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div onClick=&#123;<span class="hljs-keyword">this</span>.clickHander&#125;&gt;&#123; <span class="hljs-keyword">this</span>.props.name &#125; say: <span class="hljs-type">Hello</span> <span class="hljs-type">World</span>!&lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-type">HelloWorld</span>;<br></code></pre></td></tr></table></figure><h2 id="组件之间的交互"><a href="#组件之间的交互" class="headerlink" title="组件之间的交互"></a>组件之间的交互</h2><h4 id="父组件与子组件之间的交互"><a href="#父组件与子组件之间的交互" class="headerlink" title="父组件与子组件之间的交互"></a>父组件与子组件之间的交互</h4><ol><li>父组件修改子组件，只需要修改传入的props属性</li><li>子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行<br>子组件与子组件之间的交互</li><li>通过影响共同的父组件来进行交互</li></ol><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">state</span> = &#123;<br>    switch: <span class="hljs-number">0</span>,<br>    name: this.props.name1<br>&#125;<br>clickHander = () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123;name1, name2&#125; = this.props;<br>    if (this.<span class="hljs-keyword">state</span>.switch === <span class="hljs-number">0</span>) &#123;<br>        this.<span class="hljs-built_in">set</span>State(&#123;<br>            switch: <span class="hljs-number">1</span>,<br>            name: name2<br>        &#125;)<br>    &#125; else &#123;<br>        this.<span class="hljs-built_in">set</span>State(&#123;<br>            switch: <span class="hljs-number">0</span>,<br>            name: name1<br>        &#125;)<br>    &#125;<br>&#125;;<br>render() &#123;<br>    return (<br>        <span class="hljs-variable">&lt;div onClick=&#123;this.clickHander&#125;&gt;</span>hello world !&#123;this.<span class="hljs-keyword">state</span>.name&#125;&lt;/div&gt;<br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p>先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。</p><p>state &#x3D; {} &#x2F;&#x2F; 等同于ES5构造函数中的this.state &#x3D; {}<br>在对象中，我们可以通过this.state的方式来访问state中所存储的属性<br>setState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变<br>react赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了<br>而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行<br>&#x2F;&#x2F; 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: ‘Jason’})&#x2F;&#x2F; 然后立即查看它的值console.log(this.state.name) &#x2F;&#x2F; 仍然为Tom，不会立即改变</p><h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p>react组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 当然可能命名会是其他的，大概表达一个意思，不深究哈<br>&#123;<br>    nodeName: <span class="hljs-string">&#x27;div&#x27;</span>,<br>    className: <span class="hljs-string">&#x27;hello-world&#x27;</span>,<br>    style: &#123;&#125;,<br>    parentNodes: <span class="hljs-string">&#x27;root&#x27;</span>,<br>    childrenNodes: []<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> <span class="hljs-type">React</span>, &#123; <span class="hljs-type">Component</span> &#125; from &#x27;react&#x27;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    clickHander = () =&gt; &#123;<br>        console.log(<span class="hljs-keyword">this</span>.refs)<br>    &#125; <br>    render () &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div className=<span class="hljs-string">&quot;container&quot;</span> onClick=&#123;<span class="hljs-keyword">this</span>.clickHander&#125;&gt;<br>                &lt;div ref=<span class="hljs-string">&quot;hello&quot;</span> className=<span class="hljs-string">&quot;hello&quot;</span>&gt;<span class="hljs-type">Hello</span>&lt;/div&gt;<br>                &lt;div ref=<span class="hljs-string">&quot;world&quot;</span> className=<span class="hljs-string">&quot;world&quot;</span>&gt;<span class="hljs-type">World</span>&lt;/div&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-type">HelloWorld</span>;<br></code></pre></td></tr></table></figure><p>为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替<br>我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。<br>当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// src/helloWorld.jsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    clickHander = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span>)<br>    &#125; refCallback = <span class="hljs-function">(<span class="hljs-params">elem</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(elem);<br>    &#125; render () &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.clickHander&#125;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.refCallback&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;world&quot;</span>&gt;</span>World<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HelloWorld</span>;<br></code></pre></td></tr></table></figure><h3 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h3><p>件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数</p><h5 id="react组件有三种状态"><a href="#react组件有三种状态" class="headerlink" title="react组件有三种状态"></a>react组件有三种状态</h5><ul><li>Mounted：已经插入真实DOM</li><li>Updating：正在被重新渲染</li><li>Unmounted：已移出真实DOM</li><li></li></ul><h5 id="每个状态的处理函数"><a href="#每个状态的处理函数" class="headerlink" title="每个状态的处理函数"></a>每个状态的处理函数</h5><ul><li>will：函数在进入状态之前调用</li><li>did：函数在进入状态之后调用</li></ul><h5 id="组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中"><a href="#组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中" class="headerlink" title="组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中"></a>组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中</h5><ul><li>componentWillMount 在首次渲染完成之前，此时可修改组件的state</li><li>componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM</li></ul><h5 id="组件属性-我们前面提到的props与state-更新的前后时刻"><a href="#组件属性-我们前面提到的props与state-更新的前后时刻" class="headerlink" title="组件属性(我们前面提到的props与state)更新的前后时刻"></a>组件属性(我们前面提到的props与state)更新的前后时刻</h5><ul><li>componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state</li><li>componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素</li></ul><h6 id="组件取消挂载之前-取消之后就没必要提供钩子函数了"><a href="#组件取消挂载之前-取消之后就没必要提供钩子函数了" class="headerlink" title="组件取消挂载之前(取消之后就没必要提供钩子函数了)"></a>组件取消挂载之前(取消之后就没必要提供钩子函数了)</h6><p><code>componentWillUnmount</code></p><h6 id="两个特殊的处理函数"><a href="#两个特殊的处理函数" class="headerlink" title="两个特殊的处理函数"></a>两个特殊的处理函数</h6><ul><li><code>componentWillReceiveProps(object nextProps)</code>：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变-&gt;然后componentWillReceiveProps去判断是否需要重新渲染(<code>shouldComponentUpdate</code>)-&gt;如果不需要则继续running-&gt;如果需要则执行<code>componentWillUpdate</code>-&gt;渲染DOM树之后执行<code>componentDidUpdate</code>-&gt;进入running</li><li><code>shouldComponentUpdate(nextProps, nextState)</code>(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变-&gt;判断是否需要重新渲染新的props和state(<code>shouldComponentUpdate</code>) -&gt; 根据判断决定执行render过程还是继续·保持running状态</li></ul><h6 id="三个统一调用的方法-用于组件初始化，获取默认属性和状态"><a href="#三个统一调用的方法-用于组件初始化，获取默认属性和状态" class="headerlink" title="三个统一调用的方法,用于组件初始化，获取默认属性和状态"></a>三个统一调用的方法,用于组件初始化，获取默认属性和状态</h6><ul><li>getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享</li><li>getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props</li><li>render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出</li></ul><h6 id="已挂载的方法"><a href="#已挂载的方法" class="headerlink" title="已挂载的方法"></a>已挂载的方法</h6><ul><li>component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候</li></ul><blockquote><p>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。</p></blockquote><p><img src="http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg" alt="image"></p><h2 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a>PropTypes</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs arcade">import PropTypes from <span class="hljs-string">&#x27;prop-types&#x27;</span>;<br><br>MyComponent.propTypes = &#123;<br>  <span class="hljs-comment">// You can declare that a prop is a specific JS primitive. By default, these</span><br>  <span class="hljs-comment">// are all optional.</span><br>  optionalArray: PropTypes.<span class="hljs-built_in">array</span>,<br>  <span class="hljs-attr">optionalBool</span>: PropTypes.bool,<br>  <span class="hljs-attr">optionalFunc</span>: PropTypes.func,<br>  <span class="hljs-attr">optionalNumber</span>: PropTypes.<span class="hljs-built_in">number</span>,<br>  <span class="hljs-attr">optionalObject</span>: PropTypes.object,<br>  <span class="hljs-attr">optionalString</span>: PropTypes.string,<br>  <span class="hljs-attr">optionalSymbol</span>: PropTypes.symbol,<br><br>  <span class="hljs-comment">// Anything that can be rendered: numbers, strings, elements or an array</span><br>  <span class="hljs-comment">// (or fragment) containing these types.</span><br>  optionalNode: PropTypes.node,<br><br>  <span class="hljs-comment">// A React element.</span><br>  optionalElement: PropTypes.element,<br><br>  <span class="hljs-comment">// You can also declare that a prop is an instance of a class. This uses</span><br>  <span class="hljs-comment">// JS&#x27;s instanceof operator.</span><br>  optionalMessage: PropTypes.instanceOf(Message),<br><br>  <span class="hljs-comment">// You can ensure that your prop is limited to specific values by treating</span><br>  <span class="hljs-comment">// it as an enum.</span><br>  optionalEnum: PropTypes.oneOf([<span class="hljs-string">&#x27;News&#x27;</span>, <span class="hljs-string">&#x27;Photos&#x27;</span>]),<br><br>  <span class="hljs-comment">// An object that could be one of many types</span><br>  optionalUnion: PropTypes.oneOfType([<br>    PropTypes.string,<br>    PropTypes.<span class="hljs-built_in">number</span>,<br>    PropTypes.instanceOf(Message)<br>  ]),<br><br>  <span class="hljs-comment">// An array of a certain type</span><br>  optionalArrayOf: PropTypes.arrayOf(PropTypes.<span class="hljs-built_in">number</span>),<br><br>  <span class="hljs-comment">// An object with property values of a certain type</span><br>  optionalObjectOf: PropTypes.objectOf(PropTypes.<span class="hljs-built_in">number</span>),<br><br>  <span class="hljs-comment">// An object taking on a particular shape</span><br>  optionalObjectWithShape: PropTypes.shape(&#123;<br>    <span class="hljs-attr">color</span>: PropTypes.string,<br>    <span class="hljs-attr">fontSize</span>: PropTypes.<span class="hljs-built_in">number</span><br>  &#125;),<br><br>  <span class="hljs-comment">// You can chain any of the above with `isRequired` to make sure a warning</span><br>  <span class="hljs-comment">// is shown if the prop isn&#x27;t provided.</span><br>  requiredFunc: PropTypes.func.isRequired,<br><br>  <span class="hljs-comment">// A value of any data type</span><br>  requiredAny: PropTypes.<span class="hljs-built_in">any</span>.isRequired,<br><br>  <span class="hljs-comment">// You can also specify a custom validator. It should return an Error</span><br>  <span class="hljs-comment">// object if the validation fails. Don&#x27;t `console.warn` or throw, as this</span><br>  <span class="hljs-comment">// won&#x27;t work inside `oneOfType`.</span><br>  customProp: <span class="hljs-keyword">function</span>(<span class="hljs-params">props, propName, componentName</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/matchme/</span>.test(props[propName])) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Error(<br>        <span class="hljs-string">&#x27;Invalid prop `&#x27;</span> + propName + <span class="hljs-string">&#x27;` supplied to&#x27;</span> +<br>        <span class="hljs-string">&#x27; `&#x27;</span> + componentName + <span class="hljs-string">&#x27;`. Validation failed.&#x27;</span><br>      );<br>    &#125;<br>  &#125;,<br><br>  <span class="hljs-comment">// You can also supply a custom validator to `arrayOf` and `objectOf`.</span><br>  <span class="hljs-comment">// It should return an Error object if the validation fails. The validator</span><br>  <span class="hljs-comment">// will be called for each key in the array or object. The first two</span><br>  <span class="hljs-comment">// arguments of the validator are the array or object itself, and the</span><br>  <span class="hljs-comment">// current item&#x27;s key.</span><br>  customArrayProp: PropTypes.arrayOf(<span class="hljs-keyword">function</span>(<span class="hljs-params">propValue, key, componentName, location, propFullName</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/matchme/</span>.test(propValue[key])) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Error(<br>        <span class="hljs-string">&#x27;Invalid prop `&#x27;</span> + propFullName + <span class="hljs-string">&#x27;` supplied to&#x27;</span> +<br>        <span class="hljs-string">&#x27; `&#x27;</span> + componentName + <span class="hljs-string">&#x27;`. Validation failed.&#x27;</span><br>      );<br>    &#125;<br>  &#125;)<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react基础</title>
      <link href="/2018/05/09/react%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/05/09/react%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><a href="https://reactjs.org/docs/hello-world.html">react官网</a></p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h4 id="1-无状态组件"><a href="#1-无状态组件" class="headerlink" title="1. 无状态组件"></a>1. 无状态组件</h4><ul><li>在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。</li><li>无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。</li><li>无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。</li></ul><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta">import React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">//创建方式一,相当于es5的函数声明的方式创建</span><br> function NoState (props) &#123;<br>     <span class="hljs-keyword">return</span> (<br>         &lt;<span class="hljs-keyword">div</span>&gt;<span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> NoState Component&lt;/<span class="hljs-keyword">div</span>&gt;<br>     )<br> &#125;<br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">//创建方式二,相当于es5的函数表达式的方式创建</span><br><span class="hljs-keyword">const</span> NoState = (props) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (<br>        &lt;<span class="hljs-keyword">div</span>&gt;<span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> Nostate Component&lt;/<span class="hljs-keyword">div</span>&gt;<br>    )<br>&#125;<br><br>export <span class="hljs-literal">default</span> NoState<br></code></pre></td></tr></table></figure><hr><ul><li>无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。</li><li>无状态组件没有实例化得过程，因此无法访问组件this中的对象</li><li>无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理</li><li>无状态组件只能访问传入的props，同样的props会得到同样的渲染结果</li></ul><p>当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来<br>代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。<br>第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// helloWorld.jsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-type">React</span>, &#123;<span class="hljs-type">Component</span>&#125; from &#x27;react&#x27;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    clickHander = () =&gt; &#123;<br>        console.log(<span class="hljs-keyword">this</span>.props);<br>        console.log(<span class="hljs-keyword">this</span>.props.name);<br>    &#125;<br><br>    render() &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div onClick=&#123;<span class="hljs-keyword">this</span>.clickHander&#125;&gt;&#123; <span class="hljs-keyword">this</span>.props.name &#125; say: <span class="hljs-type">Hello</span> <span class="hljs-type">World</span>!&lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-type">HelloWorld</span>;<br></code></pre></td></tr></table></figure><h2 id="组件之间的交互"><a href="#组件之间的交互" class="headerlink" title="组件之间的交互"></a>组件之间的交互</h2><h4 id="父组件与子组件之间的交互"><a href="#父组件与子组件之间的交互" class="headerlink" title="父组件与子组件之间的交互"></a>父组件与子组件之间的交互</h4><ol><li>父组件修改子组件，只需要修改传入的props属性</li><li>子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行<br>子组件与子组件之间的交互</li><li>通过影响共同的父组件来进行交互</li></ol><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">state</span> = &#123;<br>    switch: <span class="hljs-number">0</span>,<br>    name: this.props.name1<br>&#125;<br>clickHander = () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123;name1, name2&#125; = this.props;<br>    if (this.<span class="hljs-keyword">state</span>.switch === <span class="hljs-number">0</span>) &#123;<br>        this.<span class="hljs-built_in">set</span>State(&#123;<br>            switch: <span class="hljs-number">1</span>,<br>            name: name2<br>        &#125;)<br>    &#125; else &#123;<br>        this.<span class="hljs-built_in">set</span>State(&#123;<br>            switch: <span class="hljs-number">0</span>,<br>            name: name1<br>        &#125;)<br>    &#125;<br>&#125;;<br>render() &#123;<br>    return (<br>        <span class="hljs-variable">&lt;div onClick=&#123;this.clickHander&#125;&gt;</span>hello world !&#123;this.<span class="hljs-keyword">state</span>.name&#125;&lt;/div&gt;<br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p>先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。</p><p>state &#x3D; {} &#x2F;&#x2F; 等同于ES5构造函数中的this.state &#x3D; {}<br>在对象中，我们可以通过this.state的方式来访问state中所存储的属性<br>setState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变<br>react赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了<br>而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行<br>&#x2F;&#x2F; 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: ‘Jason’})&#x2F;&#x2F; 然后立即查看它的值console.log(this.state.name) &#x2F;&#x2F; 仍然为Tom，不会立即改变</p><h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p>react组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 当然可能命名会是其他的，大概表达一个意思，不深究哈<br>&#123;<br>    nodeName: <span class="hljs-string">&#x27;div&#x27;</span>,<br>    className: <span class="hljs-string">&#x27;hello-world&#x27;</span>,<br>    style: &#123;&#125;,<br>    parentNodes: <span class="hljs-string">&#x27;root&#x27;</span>,<br>    childrenNodes: []<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> <span class="hljs-type">React</span>, &#123; <span class="hljs-type">Component</span> &#125; from &#x27;react&#x27;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    clickHander = () =&gt; &#123;<br>        console.log(<span class="hljs-keyword">this</span>.refs)<br>    &#125; <br>    render () &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div className=<span class="hljs-string">&quot;container&quot;</span> onClick=&#123;<span class="hljs-keyword">this</span>.clickHander&#125;&gt;<br>                &lt;div ref=<span class="hljs-string">&quot;hello&quot;</span> className=<span class="hljs-string">&quot;hello&quot;</span>&gt;<span class="hljs-type">Hello</span>&lt;/div&gt;<br>                &lt;div ref=<span class="hljs-string">&quot;world&quot;</span> className=<span class="hljs-string">&quot;world&quot;</span>&gt;<span class="hljs-type">World</span>&lt;/div&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-type">HelloWorld</span>;<br></code></pre></td></tr></table></figure><p>为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替<br>我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。<br>当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// src/helloWorld.jsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    clickHander = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span>)<br>    &#125; refCallback = <span class="hljs-function">(<span class="hljs-params">elem</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(elem);<br>    &#125; render () &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.clickHander&#125;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.refCallback&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;world&quot;</span>&gt;</span>World<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HelloWorld</span>;<br></code></pre></td></tr></table></figure><h3 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h3><p>件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数</p><h5 id="react组件有三种状态"><a href="#react组件有三种状态" class="headerlink" title="react组件有三种状态"></a>react组件有三种状态</h5><ul><li>Mounted：已经插入真实DOM</li><li>Updating：正在被重新渲染</li><li>Unmounted：已移出真实DOM</li><li></li></ul><h5 id="每个状态的处理函数"><a href="#每个状态的处理函数" class="headerlink" title="每个状态的处理函数"></a>每个状态的处理函数</h5><ul><li>will：函数在进入状态之前调用</li><li>did：函数在进入状态之后调用</li></ul><h5 id="组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中"><a href="#组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中" class="headerlink" title="组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中"></a>组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中</h5><ul><li>componentWillMount 在首次渲染完成之前，此时可修改组件的state</li><li>componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM</li></ul><h5 id="组件属性-我们前面提到的props与state-更新的前后时刻"><a href="#组件属性-我们前面提到的props与state-更新的前后时刻" class="headerlink" title="组件属性(我们前面提到的props与state)更新的前后时刻"></a>组件属性(我们前面提到的props与state)更新的前后时刻</h5><ul><li>componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state</li><li>componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素</li></ul><h6 id="组件取消挂载之前-取消之后就没必要提供钩子函数了"><a href="#组件取消挂载之前-取消之后就没必要提供钩子函数了" class="headerlink" title="组件取消挂载之前(取消之后就没必要提供钩子函数了)"></a>组件取消挂载之前(取消之后就没必要提供钩子函数了)</h6><p><code>componentWillUnmount</code></p><h6 id="两个特殊的处理函数"><a href="#两个特殊的处理函数" class="headerlink" title="两个特殊的处理函数"></a>两个特殊的处理函数</h6><ul><li><code>componentWillReceiveProps(object nextProps)</code>：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变-&gt;然后componentWillReceiveProps去判断是否需要重新渲染(<code>shouldComponentUpdate</code>)-&gt;如果不需要则继续running-&gt;如果需要则执行<code>componentWillUpdate</code>-&gt;渲染DOM树之后执行<code>componentDidUpdate</code>-&gt;进入running</li><li><code>shouldComponentUpdate(nextProps, nextState)</code>(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变-&gt;判断是否需要重新渲染新的props和state(<code>shouldComponentUpdate</code>) -&gt; 根据判断决定执行render过程还是继续·保持running状态</li></ul><h6 id="三个统一调用的方法-用于组件初始化，获取默认属性和状态"><a href="#三个统一调用的方法-用于组件初始化，获取默认属性和状态" class="headerlink" title="三个统一调用的方法,用于组件初始化，获取默认属性和状态"></a>三个统一调用的方法,用于组件初始化，获取默认属性和状态</h6><ul><li>getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享</li><li>getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props</li><li>render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出</li></ul><h6 id="已挂载的方法"><a href="#已挂载的方法" class="headerlink" title="已挂载的方法"></a>已挂载的方法</h6><ul><li>component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候</li></ul><blockquote><p>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。</p></blockquote><p><img src="http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg" alt="image"></p><h2 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a>PropTypes</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs arcade">import PropTypes from <span class="hljs-string">&#x27;prop-types&#x27;</span>;<br><br>MyComponent.propTypes = &#123;<br>  <span class="hljs-comment">// You can declare that a prop is a specific JS primitive. By default, these</span><br>  <span class="hljs-comment">// are all optional.</span><br>  optionalArray: PropTypes.<span class="hljs-built_in">array</span>,<br>  <span class="hljs-attr">optionalBool</span>: PropTypes.bool,<br>  <span class="hljs-attr">optionalFunc</span>: PropTypes.func,<br>  <span class="hljs-attr">optionalNumber</span>: PropTypes.<span class="hljs-built_in">number</span>,<br>  <span class="hljs-attr">optionalObject</span>: PropTypes.object,<br>  <span class="hljs-attr">optionalString</span>: PropTypes.string,<br>  <span class="hljs-attr">optionalSymbol</span>: PropTypes.symbol,<br><br>  <span class="hljs-comment">// Anything that can be rendered: numbers, strings, elements or an array</span><br>  <span class="hljs-comment">// (or fragment) containing these types.</span><br>  optionalNode: PropTypes.node,<br><br>  <span class="hljs-comment">// A React element.</span><br>  optionalElement: PropTypes.element,<br><br>  <span class="hljs-comment">// You can also declare that a prop is an instance of a class. This uses</span><br>  <span class="hljs-comment">// JS&#x27;s instanceof operator.</span><br>  optionalMessage: PropTypes.instanceOf(Message),<br><br>  <span class="hljs-comment">// You can ensure that your prop is limited to specific values by treating</span><br>  <span class="hljs-comment">// it as an enum.</span><br>  optionalEnum: PropTypes.oneOf([<span class="hljs-string">&#x27;News&#x27;</span>, <span class="hljs-string">&#x27;Photos&#x27;</span>]),<br><br>  <span class="hljs-comment">// An object that could be one of many types</span><br>  optionalUnion: PropTypes.oneOfType([<br>    PropTypes.string,<br>    PropTypes.<span class="hljs-built_in">number</span>,<br>    PropTypes.instanceOf(Message)<br>  ]),<br><br>  <span class="hljs-comment">// An array of a certain type</span><br>  optionalArrayOf: PropTypes.arrayOf(PropTypes.<span class="hljs-built_in">number</span>),<br><br>  <span class="hljs-comment">// An object with property values of a certain type</span><br>  optionalObjectOf: PropTypes.objectOf(PropTypes.<span class="hljs-built_in">number</span>),<br><br>  <span class="hljs-comment">// An object taking on a particular shape</span><br>  optionalObjectWithShape: PropTypes.shape(&#123;<br>    <span class="hljs-attr">color</span>: PropTypes.string,<br>    <span class="hljs-attr">fontSize</span>: PropTypes.<span class="hljs-built_in">number</span><br>  &#125;),<br><br>  <span class="hljs-comment">// You can chain any of the above with `isRequired` to make sure a warning</span><br>  <span class="hljs-comment">// is shown if the prop isn&#x27;t provided.</span><br>  requiredFunc: PropTypes.func.isRequired,<br><br>  <span class="hljs-comment">// A value of any data type</span><br>  requiredAny: PropTypes.<span class="hljs-built_in">any</span>.isRequired,<br><br>  <span class="hljs-comment">// You can also specify a custom validator. It should return an Error</span><br>  <span class="hljs-comment">// object if the validation fails. Don&#x27;t `console.warn` or throw, as this</span><br>  <span class="hljs-comment">// won&#x27;t work inside `oneOfType`.</span><br>  customProp: <span class="hljs-keyword">function</span>(<span class="hljs-params">props, propName, componentName</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/matchme/</span>.test(props[propName])) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Error(<br>        <span class="hljs-string">&#x27;Invalid prop `&#x27;</span> + propName + <span class="hljs-string">&#x27;` supplied to&#x27;</span> +<br>        <span class="hljs-string">&#x27; `&#x27;</span> + componentName + <span class="hljs-string">&#x27;`. Validation failed.&#x27;</span><br>      );<br>    &#125;<br>  &#125;,<br><br>  <span class="hljs-comment">// You can also supply a custom validator to `arrayOf` and `objectOf`.</span><br>  <span class="hljs-comment">// It should return an Error object if the validation fails. The validator</span><br>  <span class="hljs-comment">// will be called for each key in the array or object. The first two</span><br>  <span class="hljs-comment">// arguments of the validator are the array or object itself, and the</span><br>  <span class="hljs-comment">// current item&#x27;s key.</span><br>  customArrayProp: PropTypes.arrayOf(<span class="hljs-keyword">function</span>(<span class="hljs-params">propValue, key, componentName, location, propFullName</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/matchme/</span>.test(propValue[key])) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Error(<br>        <span class="hljs-string">&#x27;Invalid prop `&#x27;</span> + propFullName + <span class="hljs-string">&#x27;` supplied to&#x27;</span> +<br>        <span class="hljs-string">&#x27; `&#x27;</span> + componentName + <span class="hljs-string">&#x27;`. Validation failed.&#x27;</span><br>      );<br>    &#125;<br>  &#125;)<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello,world</title>
      <link href="/2018/05/09/hello-world-1/"/>
      <url>/2018/05/09/hello-world-1/</url>
      
        <content type="html"><![CDATA[<h4 id="今天是个好日子"><a href="#今天是个好日子" class="headerlink" title="今天是个好日子"></a>今天是个好日子</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 哈哈哈1223 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
