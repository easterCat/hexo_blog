{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"easterCat","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2018-05-09T09:02:05.000Z","updated":"2023-01-11T02:56:11.681Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-02-26T08:36:55.000Z","updated":"2023-02-21T09:35:15.110Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-02-26T08:36:55.000Z","updated":"2023-02-21T09:35:15.111Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"photos","date":"2018-05-09T09:27:51.000Z","updated":"2023-01-11T02:56:11.682Z","comments":true,"path":"photos/index.html","permalink":"http://yoursite.com/photos/index.html","excerpt":"","text":""}],"posts":[{"title":"Nvm管理工具","slug":"Nvm管理工具","date":"2023-02-08T03:33:38.000Z","updated":"2023-02-21T09:35:15.105Z","comments":true,"path":"2023/02/08/Nvm管理工具/","link":"","permalink":"http://yoursite.com/2023/02/08/Nvm%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/","excerpt":"","text":"NVM安装 Linux 安装 wget -qO- https://raw.githubusercontent.com/creationix/nvm/v1/install.sh | bash source ~/.bashrc MacOS 安装 curl -0- https://raw.githubusercontent.com/creationix/nvm/v8/install.sh | bash 常用命令# 显示所有信息 nvm --help # 显示当前安装的nvm版本 nvm --version # 安装指定的版本，如果不存在.nvmrc,就从指定的资源下载安装 nvm install [-s] &lt;version&gt; # 安装指定的版本，平且下载最新的npm nvm install [-s] &lt;version&gt; -latest-npm # 卸载指定的版本 nvm uninstall &lt;version&gt; # 使用已经安装的版本 切换版本 nvm use [--silent] &lt;version&gt; # 查看当前使用的node版本 nvm current # 查看已经安装的版本 nvm ls # 查看指定版本 nvm ls &lt;version&gt; # 显示远程所有可以安装的nodejs版本 nvm ls-remote # 查看长期支持的版本 nvm ls-remote --lts # 安装罪行的npm nvm install-latest-npm # 重新安装指定的版本 nvm reinstall-packages &lt;version&gt; # 显示nvm的cache nvm cache dir # 清空nvm的cache nvm cache clear","categories":[],"tags":[{"name":"Node","slug":"Node","permalink":"http://yoursite.com/tags/Node/"}]},{"title":"Npm配置文件","slug":"Npm配置文件","date":"2023-02-08T03:32:46.000Z","updated":"2023-02-21T09:35:15.105Z","comments":true,"path":"2023/02/08/Npm配置文件/","link":"","permalink":"http://yoursite.com/2023/02/08/Npm%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/","excerpt":"","text":"配置文件 .npmrc .npmignore .npm .npmrc# 查看 .npmrc 文件在哪里 npm config ls -l npm 的缓存目录在哪里 npm config get cache npm 的全局 node 包在哪里 那些通过 npm install xxx -g 或者 cnpm install xxx -g 或者 yarn global add xxx 安装的 xxx 文件，到底安装在什么地方？ npm config get prefix 默认情况下： Windows 系统的路径基础部分是： %APPDATA%/npm/ MacOS 系统下路径基础部分是 /usr/local 默认的全局安装包位置： Windows 系统下路径是： %APPDATA%/npm/node_modules/ MacOS 系统下路径是： /usr/local/lib/node_modules/ 当然对于全局包路径的查看，还可以使用下面的命令：npm root -g .npmignore.npm","categories":[],"tags":[{"name":"Npm","slug":"Npm","permalink":"http://yoursite.com/tags/Npm/"}]},{"title":"Npm脚本命令","slug":"Npm脚本命令","date":"2023-02-08T03:32:00.000Z","updated":"2023-02-21T09:35:15.104Z","comments":true,"path":"2023/02/08/Npm脚本命令/","link":"","permalink":"http://yoursite.com/2023/02/08/Npm%E8%84%9A%E6%9C%AC%E5%91%BD%E4%BB%A4/","excerpt":"","text":"npm-cli 脚本命令 npm access：在发布的包上设置访问级别 npm adduser：Add a registry user account 添加仓库用户账户 npm audit：Run a security audit 执行安全审计（自动安装应该更新的脆弱的模块包） bin：显示 npm bin 文件夹 bugs：在浏览器中打开依赖包的 BUG 讨论社区 build：构建依赖包 cache：管理模块的缓存 ci：Install a project with a clean slate completion：Tab Completion for npm config：管理 npm 配置文件 dedupe：Reduce duplication deprecate：Deprecate a version of a package npm dist-tag：修改依赖包分发标签 docs：在浏览器中打开依赖包的文档 doctor：Check your environments edit：Edit an installed package explore：Browse an installed package help-search：Search npm help documentation help：查看某条命令的详细帮助 hook：Manage registry hooks init：创建 npm 依赖包配置文件 install-ci-test：Install a project with a clean slate and run tests install-test：Install package(s) and run tests install：安装依赖包 link：符号连接包文件夹 logout：Log out of the registry npm ls：列出已安装依赖包 npm：javascript package manager org：Manage orgs outdated：检查过期的依赖包 owner：Manage package owners pack：Create a tarball from a package ping：Ping npm registry prefix：显示路径前缀 profile：变更注册表配置文件上的设置 prune：删除无关的软件包 publish：发布依赖包 rebuild：重新构建依赖包 repo：在浏览器中打开依赖包的储存仓库 restart：Restart a package root：查看包的安装路径 run-script：运行 npm script 脚本 search：搜索依赖包 shrinkwrap：Lock down dependency versions for publication star：收藏依赖包 stars：查看依赖包收藏夹 start：启动依赖包 stop：停止依赖包 team：Manage organization teams and team memberships test：测试依赖包 token：管理鉴权令牌 uninstall：移除依赖包 unpublish：从公有仓库中移除依赖包 update：U 更新模块 version：查看模块版本 npm view：查看模块的注册信息 whoami：显示当前 npm 用户信息 npm init 创建项目： # 按提示输入项目信息 npm init # 使用默认值创建项目 npm init -y npm install 安装依赖模块： npm install # 或者 npm i 安装多个模块 无需为你要安装的每个模块都输入一遍 npm i 指令： npm i gulp-pug npm i gulp-debug npm i gulp-sass # 只需输入一行命令即可一次性批量安装模块 npm i gulp-pug gulp-debug gulp-sass # 更便捷的是，如果安装的所有模块的前缀是相同的，则可以这样安装，无需输入完整模块名 npm i gulp&#123;-debug,-sass,-pug&#125; 安装标识# 安装包到生产环境依赖中 npm i gulp --save-prod # 更简化，你可以使用 `-P` 标识 npm i gulp -P # 同理，开发环境下的依赖安装，亦可使用 `-D` 代替 `--save-dev` npm i gulp -D 当不带任何安装标识时，npm 默认将模块作为依赖项目添加到 package.json 文件中。如果你想避免这样，你可以使用 no-save 安装： npm i vue --no-save 安装指定版本# 默认安装 latest 标签的版本 # 如果没有指定 latest，就是最新发布的版本 npm install react # 如果你想安装一个不是最新版本的安装包 npm i react@0 # 鉴于记住标签比记住版本数字容易，亦可使用 `npm v` 命令来查到的版本信息列表中的 `dist-tag` 来安装 npm i react@beta npm search# 搜索依赖包 npm search &lt;package-name&gt; npm search react # 或者 npm s &lt;package-name&gt; npm se &lt;package-name&gt; npm find &lt;package-name&gt; npm view# 查看包信息 npm view &lt;package-name&gt; npm view react # 或者 npm v react # 如果只想看安装包最近的版本信息 npm v &lt;package-name&gt; version # 如果想获取安装包完整的版本信息列表，可使用复数形式 npm v &lt;package-name&gt; versions 卸载模块 如果你不想转到 package.json 文件并手动删除依赖包，则可以用以下方法删除： npm uninstall vue 这个命令会删除 node_modules 文件夹及 package.json 中对应的包。当然，你也可以用 rm、un 或 r 来达到相同的效果： npm rm vue 如果由于某些原因，你只想从 node_modules 文件夹中删除安装包，但是想在 package.json 中保留其依赖项，那么你可以使用 no-save 标识。 npm rm vue --no-save npm ls npm ls此命令将以树状结构将已安装的软件包的所有版本及其依赖项打印到标准输出。 # 查看当前仓库使用模块（嵌套） npm ls # 查看当前仓库使用模块（仅单层） npm ls --depth 0 # 查看全局模块包已安装模块 npm ls -g # 查看全局模块包已安装模块（仅单层） npm ls -g --depth 0 npm outdate 大多数时候，你需要保持本地依赖的更新，你可以在项目目录下先查看一下安装包有没有版本更新： npm outdate 执行测试npm run tests npm test npm t 显示可用脚本 我们可以通过 npm run 安装 Github 包 可以直接安装来自 Github Repo 的模块： npm i https://github.com/sindresorhus/gulp-debug 或者你可以忽略域名安装： npm i sindresorhus/gulp-debug 打开模块包仓库主页 当然可以直接谷歌搜索，然后找到对应的包链接打开： npm repo create-react-app 列出所有 NPM 环境的可用变量 你可以使用这个命令来列出所有 NPM 环境的可用变量： npm run env | grep npm_ 默认情况下，npm 会重命名你的变量，给其加上前缀 npm_package，并将其结构保留在 package.json 文件中，即变为 config_build_folder。 在 npm 脚本中使用 npm 变量 你可以看到可用变量的完整列表，如果你想使用这些变量中的任何值，就可以在 package.json 中使用： &quot;scripts&quot;: &#123; &quot;build&quot;: &quot;gulp build --dist $npm_package_config_build_folder&quot; &#125; 当你执行 npm run build 的时候，实际执行的是这样的： gulp build --dist ./dist 检查过期的依赖包# 查看过期依赖包 npm outdated # 以 JSON 形式输出 npm outdated --json 设置镜像源 临时使用 npm --registry https://registry.npm.taobao.org install express 持久使用 npm config set registry https://registry.npm.taobao.org npm create","categories":[],"tags":[{"name":"Npm","slug":"Npm","permalink":"http://yoursite.com/tags/Npm/"}]},{"title":"Npm版本控制","slug":"Npm版本控制","date":"2023-02-08T03:31:02.000Z","updated":"2023-02-21T09:35:15.103Z","comments":true,"path":"2023/02/08/Npm版本控制/","link":"","permalink":"http://yoursite.com/2023/02/08/Npm%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/","excerpt":"","text":"npm 版本控制查看依赖包版本 通过执行以下命令能够查看某个依赖包的最新版本。 # 查看某个 package 的注册信息 npm view &lt;package-name&gt; # 查看某个 package 的最新版本 npm view &lt;package-name&gt; version # 查看某个 package 在 npm 服务器上所发布过的版本 npm view &lt;package-name&gt; versions # 查看仓库依赖树上所有包的版本信息 npm ls 语义化版本规范 npm 中的包模块版本都需要遵循 SemVer（Semantic Version，语义化版本）规范，这是由 Github 起草的一个具有指导意义的，统一的版本号表示规则。 标准版本 SemVer 规范的标准版本号采用 X.Y.Z 的格式，其中 X、Y 和 Z 为非负的整数，且禁止在数字前方补零。X 是主版本号、Y 是次版本号、而 Z 为修订号。每个元素必须以数值来递增。 主版本号（major）：当你做了不兼容的 API 修改 次版本号（minor）：当你做了向下兼容的功能性新增 修订号（patch）：当你做了向下兼容的问题修正。 版本是严格递增的，例如：16.2.0 -&gt; 16.2.1 -&gt; 16.3.0 -&gt; 16.4.0 先行版本 当某个版本改动比较大、并非稳定而且可能无法满足预期的兼容性需求时，你可能要先发布一个先行版本。 先行版本的格式是在修订版本号后面加上一个连接号（-），再加上一连串以点（.）分割的标识符，标识符可以由英文、数字和连接号（[0-9A-Za-z]）组成。 例如： # 格式 major.minor.patch-&#123;identifier&#125;.&#123;identifier&#125;.&#123;identifier&#125; # 示例 1：通常第一个 identifier 为版本号标签，关于版本号标签请看下文 # 常用于先行版本的版本号标签是 beta、rc、experimental 3-alpha.1 版本号标签 常用的版本号标签如下： 版本号标签 语义 说明 latest 默认 不指定版本情况下默认安装的最新版本 alpha 内测 内部测试版，一般不向外部发布，会有很多 BUG，一般只有测试人员使用 beta 公测 也是测试版本，这个阶段的版本会一直加入新的功能，在 Alpha 版之后推出 next 下一个 rc 候选 Release Candidate 系统平台上就是发行候选版本。RC 版不会再加入新的功能了，主要着重于除错 experimental 实验 给版本号添加标签的方式有两种： # 第一种方式：在发布时指定标签 # version-tag 替换为版本号标签的名称 npm publish --tag &lt;version-tag&gt; # 示例 npm publish --tag next react@0 npm publish --tag experimental vue@0 # 第二种方式：发布后执行以下命令 # package-name 替换为 npm 包名字 # version 替换为 npm 包的指定版本 # version-tag 替换为版本号标签的名称 npm dist-tag add &lt;package-name&gt;@&lt;version&gt; &lt;version-tag&gt; # 示例 npm dist-tag add react@0 alpha npm dist-tag add vue@0 next 版本号大小比较 格式： major.minor.patch-[pre-release]+[build-metadata] 版本号大小比较是从左往右依次比较 major、minor、patch、pre-release。build-metadata 对优先级无影响。 现行版本优先级低于正式版本，如： 1-alpha.1 &lt; 1 0-alpha.1 &lt; 0-beta &lt; 0 版本号大小与发版时间有关系吗？答案是 没有关系。 例如：依次发布 1.0.0-alpha.1、1.0.0-alpha.3、1.0.0-alpha.2。用户安装了 1.0.0-alpha.1，此时升级版本会安装 1.0.0-alpha.3。 版本号升级与标签之间的关系？ 执行 npm install &lt;package-name&gt; 或 npm update &lt;package-name&gt; 等同于执行 npm install &lt;package-name&gt;@latest 或 npm update &lt;pacakge-name&gt;@latest 。用户当前版本低于 latest 标签下的最高版本，而低于其他标签下的版本时，会安装其他标签下的版本。 例如： 用户安装了 1.0.0-alpha.1（alpha），此时发布了 1.0.0（latest），用户升级后的版本是 1.0.0（latest） 用户安装了 1.0.0-alpha.1（alpha），此时发布 1.0.0-beta.0（beta），用户升级后的版本时 1.0.0-beta.0（beta） 用户安装了 1.0.0（latest），此时发布了 2.0.0-alpha.1（alpha），用户升级后的版本不变，仍然是 1.0.0（latest） 版本工具使用 在开发中肯定少不了对一些版本号的操作，如果这些版本号符合 SemVer 规范 ，我们可以借助用于操作版本的 npm 包 semver 来帮助我们进行比较版本大小、提取版本信息等操作。 # 安装工具 npm install semver 具体用法示例： // 比较版本号大小 semver.gt(&#39;3&#39;, &#39;7&#39;); // false semver.lt(&#39;3&#39;, &#39;7&#39;); // true // 判断版本号是否符合规范，返回解析后符合规范的版本号 semver.valid(&#39;3&#39;); // &#39;3&#39; semver.valid(&#39;a.b.c&#39;); // null // 将其他版本号强制转换成 semver 版本号 semver.valid(semver.coerce(&#39;v2&#39;)); // &#39;0&#39; semver.valid(semver.coerce(&#39;3-alpha&#39;)); // &#39;7&#39; // 一些其他用法 semver.clean(&#39; =v3 &#39;); // &#39;3&#39; semver.satisfies(&#39;3&#39;, &#39;x || &gt;= 0 || 0 - 23&#39;); // true semver.minVersion(&#39;&gt;=0&#39;); // &#39;0&#39; 更多关于 semver 用法，请查阅官网 https://github.com/npm/node-semver 依赖版本管理 我们经常看到，在 package.json 中各种依赖的不同写法： &quot;dependencies&quot;: &#123; &quot;signale&quot;: &quot;0&quot;, &quot;figlet&quot;: &quot;*&quot;, &quot;react&quot;: &quot;x&quot;, &quot;table&quot;: &quot;~6&quot;, &quot;yargs&quot;: &quot;^0&quot; &#125; 前三个容易理解： &quot;signale&quot;: &quot;1.4.0&quot;：固定版本号 &quot;figlet&quot;: &quot;*&quot;：任意版本号（即 &gt;=0.0.0） &quot;react&quot;: &quot;16.x&quot;：匹配主要版本（&gt;=16.0.0 &lt; 17.0.0） &quot;react&quot;: &quot;16.3.x&quot;：匹配主要版本和次要版本（&gt;=16.3.0 &lt;16.4.0） 再看看后面两个，版本号包含 ~ 和 ^ 符号： ~：当安装依赖时获取到有最新版本时，安装到 x.y.z 中 z 的最新版本。即保持主版本号、次版本号不变的情况下，保持修订号的最新版本 ^：当安装依赖时获取到由最新版本时，安装到 x.y.z 中 y 和 z 都为最新版本。即保持主版本号不变的情况下，保持次版本号、修订版本号为最新版本。 在 package.json 中最常见应该时 &quot;yargs&quot;: &quot;^14.0.0&quot; 这种格式的依赖，因为我们在使用 npm install &lt;package-name&gt; 安装包时，npm 默认安装当前最新版本，然后在所安装的版本号前加 ^ 号。 注意，当主版本号为 0 的情况，会被认为是一个不稳定版本，情况与上面不同： 主版本号和次版本号都为 0: ^0.0.z、~0.0.z 都被当作固定版本，安装依赖时均不会发生变化。 主版本号为 0: ^0.y.z 表现和 ~0.y.z 相同，只保持修订号为最新版本。 1.0.0 的版本号用于界定公共 API。当你的软件发布到了正式环境，或者有稳定的 API 时，就可以发布 1.0.0 版本了。所以，当你决定对外部发布一个正式版本的 npm 包时，把它的版本标为 1.0.0。 除此以外，还包含以下规则： &gt;：接受高于指定版本的任何版本 &gt;= 接受等于或高于指定版本的任何版本 &lt;=：接受等于或低于指定版本的任何版本 &lt;：接受低于指定版本的任何版本 =：接受确切的版本 -：接受一定范围的版本，例如 2.1.0 - 2.6.2 ||：组合集合，例如 &lt; 2.1 || &gt; 2.6 可以合并其中一些符号，例如 0 || &gt;= 0 &lt; 0 即使用 1.0.0 或从 1.1.0 开始但低于 1.2.0 的版本。 锁定依赖版本 实际开发中，经常会因为各种依赖不一致而产生奇怪的问题，或者在某些场景下，我们不希望依赖被更新，建议在开发中使用 package-lock.json。 锁定依赖版本意味着在我们不手动执行更新的情况下，每次安装依赖都会安装固定版本。保证整个团队使用版本号一致的依赖。 每次安装固定版本，无需计算依赖版本范围，大部分场景下能大大加速依赖安装时间。 使用 package-lock.json 要确保 npm 的版本在 5.6 以上，因为在 5.0 - 5.6 中间，对 package-lock.json 的处理逻辑进行过几次更新，5.6 版本后处理逻辑逐渐稳定。 关于 package-lock.json 详细的结构，我们会在后面的章节进行解析。 定期更新依赖 实际开发场景下，我们虽然不需要每次都去安装新的版本，仍然需要定时去升级依赖版本，来让我们享受依赖包升级带来的问题修复、性能提升、新特性更新。 使用 npm outdated 可以帮助我们列出哪些还没有升级到最新版本的依赖： 黄色表示不符合我们指定的语意化版本范围 - 不需要升级 红色表示符合指定的语意化版本范围 - 需要升级 执行 npm update 会升级所有的红色依赖。 依赖版本控制的最佳实践参考资料 语义化版本 2.0.0","categories":[],"tags":[{"name":"Npm","slug":"Npm","permalink":"http://yoursite.com/tags/Npm/"}]},{"title":"Npm描述文件","slug":"Npm描述文件","date":"2023-02-08T03:30:18.000Z","updated":"2023-02-21T09:35:15.103Z","comments":true,"path":"2023/02/08/Npm描述文件/","link":"","permalink":"http://yoursite.com/2023/02/08/Npm%E6%8F%8F%E8%BF%B0%E6%96%87%E4%BB%B6/","excerpt":"","text":"NPM 包描述文件 npm 即 npde package module CommonJS 的包规范的定义由 包结构 和 包描述文件 两个部分组成，前者用于组织包中的各种文件，后者则用于描述包的相关信息，以供外部读取分析。 包结构 包实际上是一个存档文件，即一个目录直接打包为 .zip 或 .tar.gz 格式的文件，安装后解压还原为目录。完全符合 CommonJS 规范的包目录应该包含如下这些文件。 package.json：包描述文件 bin：用于存放二进制文件的目录 lib：用于存放 JavaScript 代码的目录 doc：用于存放文档的目录 test：用于存放单元测试用例的代码 包描述文件 包描述文件用于表达非代码相关的信息，它是一个 JSON 格式的文件，位于包的根目录下。NPM 的所有行为都与包描述文件的字段息息相关。 CommonJS 的包规范： name：包名。由小写的字母和数字组成，可以包含 .、_ 被 -，但不允许出现空格。 descript：包简介。 version：版本号。语义化的版本号，详细定义参看 http://semver.org keywords：关键词数组，用于分类搜索。 maintainers：包维护者列表。每个维护者由 name、email 和 web 这三个属性组成。 contributors：贡献者列表。 bugs：用于反馈 BUG 的网页地址或邮件地址 licenses：许可证列表。 repositories：托管源代码的位置列表，表明可以通过哪些方式和地址访问包的源代码 dependencies：包所需要的依赖的包列表 devDependencies：开发时所需要的依赖列表。 peerDependencies： 其他可选字段 homepage：当前包的网站地址 os：操作系统支持列表。 cpu：CPU 架构的支持列表 engine：支持的 JavaScript 引擎列表 builtin：标识当前包是否是内建在底层系统的标准组件 directories：包目录说明 implements：实现规范的列表 scripts：脚本说明对象。主要被包管理器用于安装、编译、测试和卸载包。 NPM 包规范额外的字段： author：包作者 bin：一些包作者希望包可以作为命令行工具使用。配置好 bin 字段后，通过 npm install package_name -g 命令可以将脚本添加到执行路径中，之后可以在命令行中直接执行 main：模块引入方法 require() 在引入包的时，会优先检查这个字段，并将其作为保重其余模块的入口 必备属性name name 字段定义了模块的名称，其命名时需要遵循官方的一些规范和建议： 模块名会成为模块 URL、命令行中的一个参数或者一个文件夹名称，任何非 URL 安全的字符在模块名中都不能使用（我们可以使用 validate-npm-package-name 包来检测模块名是否合法）； 语义化模块名，可以帮助开发者更快的找到需要的模块，并且避免意外获取错误的模块； 若模块名称中存在一些符号，将符号去除后不得与现有的模块名重复，例如：由于 react-router-dom 已经存在，react.router.dom、reactrouterdom 都不可以再创建。 name 字段不能与其他模块名重复，我们可以执行以下命令查看模块名是否已经被使用： npm view &lt;package-name&gt; 如果模块存在，可以查看该模块的基本信息 如果该模块名称未被使用过，则会抛出 404 错误 version npm 包中的模块版本都需要遵循 SemVer 规范，相关介绍可查阅 npm 版本控制 描述信息description &amp; keywords description 字段用于添加模块的描述信息，便于用户了解该模块。 keywords 字段用于给模块添加关键字。 当我们使用 npm 检索模块时，会对模块中的 description 字段和 keywords 字段进行匹配，写好 package.json 中的 description 和 keywords 将有利于增加我们模块的曝光率。 author author 字段用于描述主要作者。 contributors contributors 字段用于描述贡献者。 homepage homepage 字段用于描述项目的主页。 repository repository 字段用于描述模块的代码仓库。 bugs repository 字段用于描述提交 BUG 的地址。 依赖配置dependencies dependencies 字段指定了项目生产环境运行所依赖的模块（生产环境使用），如 antd、react、moment 等依赖库： 它们是我们生产环境所需要的依赖项，在把项目作为一个 npm 包的时候，用户安装 npm 包时只会安装 dependencies 里面的依赖。 devDepenedencies devDependencies 字段指定了项目开发所需要的模块（开发环境使用），如 webpack、typescript、babel 等： 在代码打包提交线上时，我们并不需要这些依赖包，所以我们将它放入 devDependencies 中。 peerDepenencies peerDependencies 字段的目的是提示宿主环境去安装满足插件 peerDependencies 所指定依赖的包，然后在插件 import 或者 require 所依赖的包的时候，永远都是引用宿主环境统一安装的 npm 包，最终解决插件与所依赖包不一致的问题。 举个例子，就拿目前基于 React 的 UI 组件库 ant-design@4.x 来说，因该 UI 组件库只是提供一套 React 组件库，它要求宿主环境需要安装指定的 React 版本。具体可以看它 package.json 中的配置： &#123; &quot;peerDependencies&quot;: &#123; &quot;react&quot;: &quot;&gt;=0&quot;, &quot;react-dom&quot;: &quot;&gt;=0&quot; &#125; &#125; 它要求宿主环境安装 react@&gt;=16.9.0 和 react-dom@&gt;=16.9.0 的版本，而在每个 antd 组件的定义文件顶部： import * as React from &#39;react&#39;; import * as ReactDOM from &#39;react-dom&#39;; 组件中引入的 react 和 react-dom 包其实都是宿主环境提供的依赖包。 有了 package.json 文件，开发直接使用 npm install &#x2F; yarn install 命令，就会在当前目录中自动安装所需要的模块，安装完成项目所需的运行和开发环境就配置好了。 optionalDependencies 不阻断安装依赖 bundledDependencies 打包依赖 目录文件main main 字段是 package.json 中的另一种元数据功能，它可以用来指定加载的入口文件。假如你的项目是一个 npm 包，当用户安装你的包后，require(my-module) 返回的是 main 字段中所列出文件的 module.exports 属性。 当不指定 main 字段时，默认值是模块根目录下面的 index.js 文件。 bin 用过 vue-cli 或 create-react-app 等脚手架的朋友们，不知道你们有没有好奇过，为什么安装这些脚手架后，就可以使用类似 vue create&#x2F;create-react-app 之类的命令，其实这和 package.json 中的 bin 字段有关。 bin 字段用来指定各个内部命令对应的可执行文件的位置。当 package.json 提供了 bin 字段后，即相当于做了一个命令名和本地文件名的映射。 当用户安装带有 bin 字段的包时， 如果是全局安装，npm 将会使用符号链接把这些文件链接到 /usr/local/node_modules/.bin/ 如果是本地安装，会链接到 ./node_modules/.bin/ 举个例子，如果要使用 my-app-cli 作为命令时，可以配置以下 bin 字段： &#123; &quot;bin&quot;: &#123; &quot;my-app-cli&quot;: &quot;./bin/cli.js&quot; &#125; &#125; 上面代码指定，my-app-cli 命令对应的可执行文件为 bin 子目录下的 cli.js，因此在安装了 my-app-cli 包的项目中，就可以很方便地利用 npm 执行脚本： &#123; &quot;scripts&quot;: &#123; &quot;start&quot;: &quot;node node_modules/.bin/my-app-cli&quot; &#125; &#125; 咦，怎么看起来和 vue create&#x2F;create-react-app 之类的命令不太像？原因： 当需要 node 环境时就需要加上 node 前缀 如果加上 node 前缀，就需要指定 my-app-cli 的路径 -&gt; node_modules/.bin，否则 node my-app-cli 会去查找当前路径下的 my-app-cli.js，这样肯定是不对。 若要实现像 vue create&#x2F;create-react-app 之类的命令一样简便的方式，则可以在上文提到的 bin 子目录下可执行文件 cli.js 中的第一行写入以下命令： #!/usr/bin/env node 这行命令的作用是告诉系统用 node 解析，这样命令就可以简写成 my-app-cli 了。 files files 字段用于描述我们使用 npm publish 命令后推送到 npm 服务器的文件列表，如果指定文件夹，则文件夹内的所有内容都会包含进来。 我们可以查看下载的 antd 的 package.json 的 files 字段，内容如下： &#123; &quot;files&quot;: [&quot;dist&quot;, &quot;lib&quot;, &quot;es&quot;] &#125; 另外，我们还可以通过配置一个 .npmignore 文件来排除一些文件， 防止大量的垃圾文件推送到 npm 上。 mandirectories脚本配置script scripts 字段是 package.json 中的一种元数据功能，它接受一个对象，对象的属性为可以通过 npm run 运行的脚本，值为实际运行的命令（通常是终端命令），如： &#123; &quot;scripts&quot;: &#123; &quot;start&quot;: &quot;node index.js&quot; &#125; &#125; 将终端命令放入 scripts 字段，既可以记录它们又可以实现轻松重用。 config发布配置private 一般公司的非开源项目，都会设置 private 属性的值为 true，这是因为 npm 拒绝发布私有模块，通过设置该字段可以防止私有模块被无意间发布出去。 preferGlobalpublishConfigos 假如我们开发了一个模块，只能跑在 darwin 系统下，我们需要保证 windows 用户不会安装到该模块，从而避免发生不必要的错误。 这时候，使用 os 属性则可以帮助我们实现以上的需求，该属性可以指定模块适用系统的系统，或者指定不能安装的系统黑名单（当在系统黑名单中的系统中安装模块则会报错）： &#123; // 适用系统 &quot;os&quot;: [&quot;darwin&quot;, &quot;linux&quot;], // 黑名单 &quot;os&quot;: [&quot;!win32&quot;] &#125; Tips：在 node 环境下可以使用 process.platform 来判断操作系统。 cpu 和上面的 os 字段类似，我们可以用 cpu 字段更精准的限制用户安装环境： &#123; // 适用 CPU &quot;cpu&quot;: [&quot;x64&quot;, &quot;ia32&quot;], // 黑名单 &quot;cpu&quot;: [&quot;!arm&quot;, &quot;!mips&quot;] &#125; Tips：在 node 环境下可以使用 process.arch 来判断 cpu 架构。 engines 有时候，新拉一个项目的时候，由于和其他开发使用的 node 版本不同，导致会出现很多奇奇怪怪的问题（如某些依赖安装报错、依赖安装完项目跑步起来等）。 为了实现项目开箱即用的伟大理想，这时候可以使用 package.json 的 engines 字段来指定项目 node 版本： &#123; &quot;engines&quot;: &#123; &quot;node&quot;: &quot;&gt;=0&quot; &#125; &#125; 该字段也可以指定适用的 npm 版本： &#123; &quot;engines&quot;: &#123; &quot;npm&quot;: &quot;&gt;= 0&quot; &#125; &#125; 需要注意的是，engines 属性仅起到一个说明的作用，当用户版本不符合指定值时也不影响依赖的安装。 自定义字段 一些第三方 npm 包，会在 package.json 中定义字段。 例如 husky 等 pre-commit 参考资料 重新认识 package.json 一文搞懂 peerDependencies","categories":[],"tags":[{"name":"Npm","slug":"Npm","permalink":"http://yoursite.com/tags/Npm/"}]},{"title":"Npm和Package描述文件","slug":"Npm和Package描述文件","date":"2023-02-06T09:21:24.000Z","updated":"2023-02-21T09:35:15.102Z","comments":true,"path":"2023/02/06/Npm和Package描述文件/","link":"","permalink":"http://yoursite.com/2023/02/06/Npm%E5%92%8CPackage%E6%8F%8F%E8%BF%B0%E6%96%87%E4%BB%B6/","excerpt":"","text":"npm 和 package.jsonnpm 是一个包管理器，它让 JavaScript 开发者分享、复用代码更方便。一个网站里通常有几十甚至上百个 package，分散在各处，通常会将这些包按照各自的功能进行划分（类似我们安卓开发中的划分子模块），但是如果重复造一些轮子，不如上传到一个公共平台，让更多的人一起使用、参与这个特定功能的模块。 管理本地安装 npm 包的最好方式就是创建 package.json 文件。 一个 package.json 文件可以有以下几点作用： 作为一个描述文件，描述了你的项目依赖哪些包 允许我们使用 “语义化版本规则”（后面介绍）指明你项目依赖包的版本 让你的构建更好地与其他开发者分享，便于重复使用 npm 安装npm 是依附于 node.js 的，我们可以去它的官网 https://nodejs.org/en/download/ 下载安装 node.js。 node - v; npm - v; npm 更新npm install npm@latest -g npm 创建 package.json 文件npm init --yes // 跳过问题 package.json name 全部小写，没有空格，可以使用下划线或者横线 version x.x.x 的格式符合“语义化版本规则” description：描述信息，有助于搜索 main: 入口文件，一般都是 index.js scripts：支持的脚本，默认是一个空的 test keywords：关键字，有助于在人们使用 npm search 搜索时发现你的项目 author：作者信息 license：默认是 MIT bugs：当前项目的一些错误信息，如果有的话 dependencies：在生产环境中需要用到的依赖 devDependencies：在开发、测试环境中用到的依赖 npm 安装本地包dependencies npm install &lt;package_name&gt; or npm install &lt;package_name&gt; --save devDependencies：在开发、测试环境中用到的依赖 npm install &lt;package_name&gt; --save-dev 安装指定版本包npm install nuxt@latest npm install nuxt@3.0.0 npm install nuxt@&quot;&gt;=3.0.0 &lt;3.2.0&quot; 更新本地包npm outdated // 查看是否有新版本 npm update // 更新所有包版本 npm update &lt;package_name&gt; // 更新某个包版本 npm update 的工作过程 先到远程仓库查询最新版本 然后对比本地版本，如果本地版本不存在，或者远程版本较新 查看 package.json 中对应的语义版本规则 如果当前新版本符合语义规则，就更新，否则不更新 拆卸本地包npm uninstall &lt;package_name&gt; npm 全局包管理npm install &lt;package_name&gt; -g // 全局安装一个包 npm outdated -g --depth=0 // 全局检测包版本 npm update &lt;package_name&gt; -g // 全局更新一个包 npm uninstall &lt;package_name&gt; -g // 全局删除一个包","categories":[],"tags":[{"name":"npm","slug":"npm","permalink":"http://yoursite.com/tags/npm/"}]},{"title":"2023个人总结","slug":"2023个人总结","date":"2023-01-28T01:11:44.000Z","updated":"2023-02-21T09:35:15.100Z","comments":true,"path":"2023/01/28/2023个人总结/","link":"","permalink":"http://yoursite.com/2023/01/28/2023%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/","excerpt":"","text":"技能 php(version 4.0) 2015 放弃 jquery (version 1.64) 2015 放弃 angular(version 1.54) 2016 放弃 express(v 2.0) 2016 放弃 react(v 15.6) 2017 放弃 nextjs(v 7.0) 2018 放弃 nestjs(v 6.0) 2018 放弃 vue(v 2.0) 2018 使用 nuxtjs(v 2.0) 2019 使用 vue(v 3.0) 2022 使用 nuxtjs(v 3.0) 2022 使用 python(v 3.8) 2022 学习 flask(v 2.1) 2022 学习 2023计划 英语学习 python学习 web3学习","categories":[],"tags":[{"name":"总结","slug":"总结","permalink":"http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"}]},{"title":"Mysql的processlist中处理表连接","slug":"mysql的processlist中处理表连接","date":"2023-01-16T08:22:53.000Z","updated":"2023-02-21T09:35:15.108Z","comments":true,"path":"2023/01/16/mysql的processlist中处理表连接/","link":"","permalink":"http://yoursite.com/2023/01/16/mysql%E7%9A%84processlist%E4%B8%AD%E5%A4%84%E7%90%86%E8%A1%A8%E8%BF%9E%E6%8E%A5/","excerpt":"","text":"processlist中大量sleep在生产环境切换mysql数据库，切换后数据库连接池爆满，抛出异常“too many connections”； 出现这种现象，比较常见的原因是连接数真不够了，需要设置连接数： 连接数不够解决mysql -u root -p; show full processlist; kill id; 查看最大连接数show variables like &quot;max_connections&quot;; 查看最大连接数，应该是与上面查询到的连接数相同，才会出现too many connections的情况 set GLOBAL max_connections=1000; 修改最大连接数，但是这不是一劳永逸的方法，应该要让它自动杀死那些sleep的进程。 自动杀死那些sleep的进程show global variables like &#39;wait_timeout&#39;; 这个数值指的是mysql在关闭一个非交互的连接之前要等待的秒数，默认是28800s set global wait_timeout=300; 修改这个数值，这里可以随意，最好控制在几分钟内 set global interactive_timeout=500; 修改这个数值，表示mysql在关闭一个连接之前要等待的秒数，至此可以让mysql自动关闭那些没用的连接，但要注意的是，正在使用的连接到了时间也会被关闭，因此这个时间值要合适 笨方法select concat(&#39;KILL &#39;,id,&#39;;&#39;) from information_schema.processlist where user=&#39;root&#39;; 先把要kill的连接id都查询出来,然后一个个kill","categories":[],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://yoursite.com/tags/Mysql/"}]},{"title":"Flask-sqlalchemy使用","slug":"flask-sqlalchemy使用","date":"2023-01-12T07:48:11.000Z","updated":"2023-02-21T09:35:15.107Z","comments":true,"path":"2023/01/12/flask-sqlalchemy使用/","link":"","permalink":"http://yoursite.com/2023/01/12/flask-sqlalchemy%E4%BD%BF%E7%94%A8/","excerpt":"","text":"查询1. filter() 把过滤器添加到原查询上，返回一个新查询 2. filter_by() 把等值过滤器添加到原查询上，返回一个新查询 3. limit 使用指定的值限定原查询返回的结果 4. offset() 偏移原查询返回的结果，返回一个新查询 5. order_by() 根据指定条件对原查询结果进行排序，返回一个新查询 6. group_by() 根据指定条件对原查询结果进行分组，返回一个新查询 7. all() 以列表形式返回查询的所有结果 8. first() 返回查询的第一个结果，如果未查到，返回 None 9. first_or_404() 返回查询的第一个结果，如果未查到，返回 404 10. get() 返回指定主键对应的行，如不存在，返回 None 11. get_or_404() 返回指定主键对应的行，如不存在，返回 404 12. count() 返回查询结果的数量 13. paginate() 返回一个Paginate对象，它包含指定范围内的结果 1. &quot;&quot;&quot; 2. 查询所有用户数据 3. User.query.all() 5. 查询有多少个用户 6. User.query.count() 8. 查询第1个用户 9. User.query.first() 10. User.query.get(1) # 根据id查询 12. 查询id为4的用户[3种方式] 13. User.query.get(4) 14. User.query.filter_by(id=4).all() # 简单查询 使用关键字实参的形式来设置字段名 15. User.query.filter(User.id == 4).all() # 复杂查询 使用恒等式等其他形式来设置条件 17. 查询名字结尾字符为g的所有用户[开始 / 包含] 18. User.query.filter(User.name.endswith(&quot;g&quot;)).all() 19. User.query.filter(User.name.startswith(&quot;w&quot;)).all() 20. User.query.filter(User.name.contains(&quot;n&quot;)).all() 21. User.query.filter(User.name.like(&quot;%n%g&quot;)).all() 模糊查询 23. 查询名字和邮箱都以li开头的所有用户[2种方式] 24. User.query.filter(User.name.startswith(&quot;li&quot;), User.email.startswith(&quot;li&quot;)).all() 26. from sqlalchemy import and_ 27. User.query.filter(and_(User.name.startswith(&quot;li&quot;), User.email.startswith(&quot;li&quot;))).all() 29. 查询age是25 或者 \\`email\\`以\\`itheima.com\\`结尾的所有用户 30. from sqlalchemy import or_ 31. User.query.filter(or_(User.age == 25, User.email.endswith(&quot;itheima.com&quot;))).all() 33. 查询名字不等于wang的所有用户[2种方式] 34. from sqlalchemy import not_ 35. User.query.filter(not_(User.name == &quot;wang&quot;)).all() 36. User.query.filter(User.name != &quot;wang&quot;).all() 38. 查询id为[1, 3, 5, 7, 9]的用户 39. User.query.filter(User.id.in_([1, 3, 5, 7, 9])).all() 41. 所有用户先按年龄从小到大, 再按id从大到小排序, 取前5个 42. User.query.order_by(User.age, User.id.desc()).limit(5).all() 44. 分页查询, 每页3个, 查询第2页的数据 45. pn = User.query.paginate(2, 3) 46. pn.items 获取该页的数据 pn.page 获取当前的页码 pn.pages 获取总页数","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Git常用命令的使用","slug":"git常用命令的使用","date":"2023-01-11T04:09:38.000Z","updated":"2023-02-21T09:35:15.107Z","comments":true,"path":"2023/01/11/git常用命令的使用/","link":"","permalink":"http://yoursite.com/2023/01/11/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"git名词 workspace :工作区 Index&#x2F;Stage : 暂存区 Repository : 仓库区(或本地仓库) Remote :远程仓库区 常用操作分部解析 在任何目录创建新的git仓库,执行 git init**,** .git文件就是本地的一个仓库 git status 查看修改状态 git add ,是将文件放入了暂存区,可以使用git checkout “文件名” 将文件从暂存区重新拿到工作区 git commit ,是将文件从暂存区放入到本地.git仓库 git status, 查看文件的状态,在暂存区还是在本地仓库,还是已经在本地仓库,或者已经提交(通常这些vscode工具一目了然) git pull ,拉取的默认是你自己的分支,详细:git pull origin dev, git pull origin master 拉去远程master分支 git 配置# 显示当前的Git配置 $ git config --list # 编辑Git配置文件 $ git config -e [--global] # 设置提交代码时的用户信息 $ git config [--global] user.name &quot;[name]&quot; $ git config [--global] user.email &quot;[email address]&quot; 常用流程 git add . git commit -m ‘ ‘ git pull git push 常用git命令行快捷方式 gaa …… git add . gcam ‘’ …… git commit -m ‘’ gl ……. git pull gp ……. git push 执行cat ~&#x2F;.oh-my-zsh&#x2F;plugins&#x2F;git&#x2F;git.plugin.zsh 查看更多简写 常用命令 git log git reflog(涉及到的所有操作步骤) git reset –hard HEAD git checkout file 恢复暂存区的文件到工作区 git checkout branch 切换分支 git stash git stash pop git branch -r 查看远程分支 git branch -a 查看所有分支 git remote 列出所有的远程主机 git pull –all 拉取远程所有的分支 git commit –amend -message&#x3D;””(修改最近的一次提交注释) git checkout (branchname) 切换分支命令 git branch (branchname) 创建分支命令 git branch -d (branchname) 删除分支命令 git push origin –delete Chapater6 删除远程分支命令","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"AndroidStudio操作","slug":"AndroidStudio操作","date":"2023-01-11T04:09:05.000Z","updated":"2023-02-21T09:35:15.101Z","comments":true,"path":"2023/01/11/AndroidStudio操作/","link":"","permalink":"http://yoursite.com/2023/01/11/AndroidStudio%E6%93%8D%E4%BD%9C/","excerpt":"","text":"Android studio操作command + shift + R 当前文件替换 command + shift + F 全局查找 command + shift + R 全局替换 command + O 全局搜索类**&#x2F;文件&#x2F;关键字&#x2F;(包括系统类,自定义类)** command + option + O 全局搜索方法 option + enter 将StatelessWidget转 StatefulWidget 快速修复 ****快速生成构造方法 command + option + W 抽取代码为单独的Widget command + option + M 抽取代码为单独的方法**,或者抽取成get**方法 command + option + L 格式化代码 command + D 复制单行 option + shift + up&#x2F;down上下移动代码 command + \\ 热重载**(hot reload)** control+ R 运行项目 command+ delete 删除行 Shift 双击 ****万能搜索 stless 快速创建一个StatelessWidget stful 快速创建一个StatefulWidget","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"SEO技巧","slug":"SEO技巧","date":"2023-01-11T04:08:10.000Z","updated":"2023-02-21T09:35:15.106Z","comments":true,"path":"2023/01/11/SEO技巧/","link":"","permalink":"http://yoursite.com/2023/01/11/SEO%E6%8A%80%E5%B7%A7/","excerpt":"","text":"SEO技巧这篇文章其实是我本人的总结，因为工作中做完了一个官方网站并成功上线，最后组长检查代码看到我的keyword等一系列信息都是空的，把我骂得狗血淋头。一言不合就作总结，总结一些简单但是我们能做的seo小技巧，送给想把网站做到极致的人。 SEO要点： 语义化html标签，用合适的标签嵌套合适的内容，不可过分依赖div，对浏览器更友善就能更容易被抓取。 重要的内容html代码放在前面，放在左边。搜索引擎爬虫是从左往右，从上到下进行抓取的，利用布局来实现重要的代码在上面 重要内容要写在html架构里面，蜘蛛不会抓取js的内容， 尽量减少使用iframe，因为蜘蛛不会抓取iframe的内容。 为图片img加上alt属性，加了alt就不必加title了，避免搜索引擎认为我们恶意优化。alt能让图片没加载时都能有文字提示。 需要强调的地方加上title，本页面内跳转a标签内也要加title。 重要的地方可以保留文字，有些地方必须用图，但是蜘蛛不会爬img，这时应该设置文本，再用缩进隐藏的方法去掉文字，例如logo的优化就是这样做的。注意隐藏不能用display：none，蜘蛛不会检索display：none的内容，应用这个方法的标签一般是logo，标题等重要信息 尽量做到js、css、html的分离，不要在html中写样式代码。 注释的东西能去掉应该去掉，对搜索引擎更加友好 css放在头部，js放在尾部，尽量使用外链或者工具对css和js进行压缩 减少http的请求，使页面更快加载。 使用本地缓存更快地访问网站，使用cdn网络，加快用户访问速度。 使用G-ZIP压缩，浏览速度更快，搜索引擎抓取信息量更大 关键一点是头部的title，description，keyword的设置。 title设置不宜过长，要简短，网站的名字与相关的小内容，一般为10-20个字。不能重复 keywords设置10个关键词，没个词不能太长，简短且符合你网站的特点，不能重复 description，50个字内描述你的网站 description写原创的话，并包含2-3个关键词比较好","categories":[],"tags":[{"name":"SEO","slug":"SEO","permalink":"http://yoursite.com/tags/SEO/"}]},{"title":"Nginx配置","slug":"nginx配置","date":"2023-01-11T04:05:22.000Z","updated":"2023-02-21T09:35:15.108Z","comments":true,"path":"2023/01/11/nginx配置/","link":"","permalink":"http://yoursite.com/2023/01/11/nginx%E9%85%8D%E7%BD%AE/","excerpt":"","text":"nginx配置user www-data; #启动进程,通常设置成和cpu的数量相等 worker_processes 2; pid /run/nginx.pid; include /etc/nginx/modules-enabled/*.conf; events &#123; worker_connections 768; # multi_accept on; &#125; http &#123; ## # Basic Settings ## sendfile on; tcp_nopush on; types_hash_max_size 2048; # server_tokens off; # server_names_hash_bucket_size 64; # server_name_in_redirect off; include /etc/nginx/mime.types; default_type application/octet-stream; ## # SSL Settings ## ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE ssl_prefer_server_ciphers on; ## # Logging Settings ## access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; # Gzip Settings gzip on; gzip_min_length 1000; gzip_vary on; gzip_proxied any; gzip_comp_level 6; gzip_buffers 16 8k; gzip_http_version 1.1; gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; ## # Virtual Host Configs ## include /etc/nginx/conf.d/*.conf; include /etc/nginx/sites-enabled/*; map $sent_http_content_type $expires &#123; &quot;text/html&quot; epoch; &quot;text/html; charset=utf-8&quot; epoch; default off; &#125; server &#123; listen 80; server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life; return 301 https://$host$request_uri; # gzip on; # gzip_types text/plain application/xml text/css application/javascript; # gzip_min_length 1000; # location / &#123; # expires $expires; # proxy_redirect off; # proxy_set_header Host $host; # proxy_set_header X-Real-IP $remote_addr; # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # proxy_set_header X-Forwarded-Proto $scheme; # proxy_read_timeout 1m; # proxy_connect_timeout 1m; # proxy_pass http://127.0.0.1:3000/; # &#125; # location ~ /.well-known &#123; # allow all; # &#125; # location ^~ /.well-known/pki-validation/ &#123; # add_header Cache-Control no-cache; # default_type &quot;text/plain&quot;; # rewrite /.well-known/pki-validation/(.*) /$1 break; # root /var/www/whatever; # &#125; # location /nuxt3-tag &#123; # expires $expires; # proxy_redirect off; # proxy_set_header Host $host; # proxy_set_header X-Real-IP $remote_addr; # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # proxy_set_header X-Forwarded-Proto $scheme; # proxy_read_timeout 1m; # proxy_connect_timeout 1m; # proxy_pass http://127.0.0.1:3000/nuxt3-tag; # &#125; # location /stable &#123; # rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent; # &#125; # location /nuxt3 &#123; # rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent; # &#125; # location /tag &#123; # rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent; # &#125; # location /stable/api &#123; # proxy_pass http://www.ptg.life:5000/api; # proxy_set_header Access-Control-Max-Age 86400; # proxy_set_header Host $host; # proxy_redirect off; # proxy_set_header X-Real-IP $remote_addr; # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # proxy_connect_timeout 60; # proxy_read_timeout 60; # proxy_send_timeout 60; # &#125; # location /static/ &#123; # valid_referers none blocked *.ptg.life; # if ($invalid_referer) &#123; # return 403; # break; # &#125; # expires 30d; # autoindex on; # root /data; # &#125; &#125; server &#123; listen 443 ssl; server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life; # 新版的nginx只用listen 443 ssl就行,需要注释 # ssl on; keepalive_timeout 10m; server_tokens off; # 缓存SSL握手产生的参数和加密密钥的时长 ssl_session_timeout 10m; # 证书 ssl_certificate /etc/nginx/certificate.crt; ssl_certificate_key /etc/nginx/private.key; # 日志 access_log /var/log/nginx/nginx.vhost.access.log; error_log /var/log/nginx/nginx.vhost.error.log; # 根用iframe嵌入做个隐式url location / &#123; index index.html index.htm index.html inde.php; root /usr/share/nginx/html; &#125; location ~ /.well-known &#123; allow all; &#125; location ^~ /.well-known/pki-validation/ &#123; add_header Cache-Control no-cache; default_type &quot;text/plain&quot;; rewrite /.well-known/pki-validation/(.*) /$1 break; root /var/www/whatever; &#125; location /nuxt3-tag/ &#123; expires $expires; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_read_timeout 1m; proxy_connect_timeout 1m; proxy_pass http://127.0.0.1:3000/nuxt3-tag/; &#125; location /naifu/ &#123; expires $expires; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_read_timeout 1m; proxy_connect_timeout 1m; proxy_pass http://127.0.0.1:3000/naifu/; &#125; location /nuxt3 &#123; rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent; &#125; location /tag &#123; rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent; &#125; # flask的接口代理 location /stable/api &#123; proxy_pass http://127.0.0.1:5000/api; proxy_set_header Access-Control-Max-Age 86400; proxy_set_header Host $host; proxy_redirect off; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_connect_timeout 60; proxy_read_timeout 60; proxy_send_timeout 60; &#125; location /static/ &#123; valid_referers none blocked *.ptg.life; if ($invalid_referer) &#123; return 403; break; &#125; expires 30d; autoindex on; root /data; &#125; &#125; &#125;","categories":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/categories/Nginx/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/tags/Nginx/"}]},{"title":"Nginx配置Https","slug":"nginx配置https","date":"2023-01-11T04:04:52.000Z","updated":"2023-02-21T09:35:15.108Z","comments":true,"path":"2023/01/11/nginx配置https/","link":"","permalink":"http://yoursite.com/2023/01/11/nginx%E9%85%8D%E7%BD%AEhttps/","excerpt":"","text":"SSL 证书部署首先申请免费证书,推荐阿里或者七牛云https://cn.aliyun.com/product/cas?from_alibabacloud&#x3D;&amp;source&#x3D;5176.11533457&amp;userCode&#x3D;ywqc0ubl&amp;type&#x3D;copy 下载申请好的 ssl 证书文件压缩包到本地并解压到&#x2F;etc&#x2F;nginx&#x2F; /etc/nginx/certificate.crt; /etc/nginx/private.key; 将这两个文件上传至服务器的&#x2F;etc&#x2F;nginx&#x2F;目录里 scp /Users/lilin/Downloads/certificate.crt root@xxx.xx.xxx.xx:/etc/nginx/ scp /Users/lilin/Downloads/private.crt root@xxx.xx.xxx.xx:/etc/nginx/ nginx.conf配置配置 https server.注释掉之前的 http server 配置,新增 https server 将http重定向https server &#123; listen 80; server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life; return 301 https://$host$request_uri; &#125; server &#123; listen 443 ssl; server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life; # 新版的nginx只用listen 443 ssl就行,需要注释 # ssl on; keepalive_timeout 10m; server_tokens off; # 缓存SSL握手产生的参数和加密密钥的时长 ssl_session_timeout 10m; # 证书 ssl_certificate /etc/nginx/certificate.crt; ssl_certificate_key /etc/nginx/private.key; # 日志 access_log /var/log/nginx/nginx.vhost.access.log; error_log /var/log/nginx/nginx.vhost.error.log; # 根用iframe嵌入做个隐式url location / &#123; index index.html index.htm index.html inde.php; root /usr/share/nginx/html; &#125; &#125;","categories":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/categories/Nginx/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/tags/Nginx/"},{"name":"Https","slug":"Https","permalink":"http://yoursite.com/tags/Https/"}]},{"title":"Ubuntu18安装nginx","slug":"ubuntu18安装nginx","date":"2023-01-11T04:04:03.000Z","updated":"2023-02-21T09:35:15.110Z","comments":true,"path":"2023/01/11/ubuntu18安装nginx/","link":"","permalink":"http://yoursite.com/2023/01/11/ubuntu18%E5%AE%89%E8%A3%85nginx/","excerpt":"","text":"apt安装sudo apt updatesudo apt install nginx nginx -V 默认安装路径 /etc/nginx/nginx.conf nginx安装位置**whereis nginx** 启动service nginx start 检查nginx配置文件service nginx reload 重启nginx -s reopen 停止nginx -s stop 端口占用查看端口 netstat -lntp nginx端口 tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 248057/nginx: master 结束端口 kill 248057 重启nginx service nginx restart","categories":[],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://yoursite.com/tags/Ubuntu/"}]},{"title":"React基础","slug":"react基础","date":"2018-05-09T09:39:55.000Z","updated":"2023-02-21T09:35:15.109Z","comments":true,"path":"2018/05/09/react基础/","link":"","permalink":"http://yoursite.com/2018/05/09/react%E5%9F%BA%E7%A1%80/","excerpt":"","text":"react官网 组件1. 无状态组件 在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。 无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。 无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。 import React from &quot;react&quot;; //创建方式一,相当于es5的函数声明的方式创建 function NoState (props) &#123; return ( &lt;div&gt;this is NoState Component&lt;/div&gt; ) &#125; //创建方式二,相当于es5的函数表达式的方式创建 const NoState = (props) =&gt; &#123; return ( &lt;div&gt;this is Nostate Component&lt;/div&gt; ) &#125; export default NoState 无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。 无状态组件没有实例化得过程，因此无法访问组件this中的对象 无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理 无状态组件只能访问传入的props，同样的props会得到同样的渲染结果 当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同 // helloWorld.jsx import React, &#123;Component&#125; from &#39;react&#39;; class HelloWorld extends Component &#123; clickHander = () =&gt; &#123; console.log(this.props); console.log(this.props.name); &#125; render() &#123; return ( &lt;div onClick=&#123;this.clickHander&#125;&gt;&#123; this.props.name &#125; say: Hello World!&lt;/div&gt; ) &#125; &#125; export default HelloWorld; 组件之间的交互父组件与子组件之间的交互 父组件修改子组件，只需要修改传入的props属性 子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行子组件与子组件之间的交互 通过影响共同的父组件来进行交互 state = &#123; switch: 0, name: this.props.name1 &#125; clickHander = () =&gt; &#123; const &#123;name1, name2&#125; = this.props; if (this.state.switch === 0) &#123; this.setState(&#123; switch: 1, name: name2 &#125;) &#125; else &#123; this.setState(&#123; switch: 0, name: name1 &#125;) &#125; &#125;; render() &#123; return ( &lt;div onClick=&#123;this.clickHander&#125;&gt;hello world !&#123;this.state.name&#125;&lt;/div&gt; ) &#125; 先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。 state &#x3D; {} &#x2F;&#x2F; 等同于ES5构造函数中的this.state &#x3D; {}在对象中，我们可以通过this.state的方式来访问state中所存储的属性setState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变react赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行&#x2F;&#x2F; 假设state.name的初始值为Tom，我们改变它的值this.setState({ name: ‘Jason’})&#x2F;&#x2F; 然后立即查看它的值console.log(this.state.name) &#x2F;&#x2F; 仍然为Tom，不会立即改变 refsreact组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样 // 当然可能命名会是其他的，大概表达一个意思，不深究哈 &#123; nodeName: &#39;div&#39;, className: &#39;hello-world&#39;, style: &#123;&#125;, parentNodes: &#39;root&#39;, childrenNodes: [] ... &#125; 而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的 import React, &#123; Component &#125; from &#39;react&#39;; class HelloWorld extends Component &#123; clickHander = () =&gt; &#123; console.log(this.refs) &#125; render () &#123; return ( &lt;div className=&quot;container&quot; onClick=&#123;this.clickHander&#125;&gt; &lt;div ref=&quot;hello&quot; className=&quot;hello&quot;&gt;Hello&lt;/div&gt; &lt;div ref=&quot;world&quot; className=&quot;world&quot;&gt;World&lt;/div&gt; &lt;/div&gt; ) &#125; &#125; export default HelloWorld; 为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。 // src/helloWorld.jsx import React, &#123; Component &#125; from &#39;react&#39;;class HelloWorld extends Component &#123; clickHander = () =&gt; &#123; console.log(this.refs) &#125; refCallback = (elem) =&gt; &#123; console.log(elem); &#125; render () &#123; return ( &lt;div className=&quot;container&quot; onClick=&#123;this.clickHander&#125;&gt; &lt;div ref=&quot;hello&quot; className=&quot;hello&quot;&gt;Hello&lt;/div&gt; &lt;div ref=&#123;this.refCallback&#125; className=&quot;world&quot;&gt;World&lt;/div&gt; &lt;/div&gt; ) &#125; &#125;export default HelloWorld; 组件生命周期件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数 react组件有三种状态 Mounted：已经插入真实DOM Updating：正在被重新渲染 Unmounted：已移出真实DOM 每个状态的处理函数 will：函数在进入状态之前调用 did：函数在进入状态之后调用 组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中 componentWillMount 在首次渲染完成之前，此时可修改组件的state componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM 组件属性(我们前面提到的props与state)更新的前后时刻 componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素 组件取消挂载之前(取消之后就没必要提供钩子函数了)componentWillUnmount 两个特殊的处理函数 componentWillReceiveProps(object nextProps)：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变-&gt;然后componentWillReceiveProps去判断是否需要重新渲染(shouldComponentUpdate)-&gt;如果不需要则继续running-&gt;如果需要则执行componentWillUpdate-&gt;渲染DOM树之后执行componentDidUpdate-&gt;进入running shouldComponentUpdate(nextProps, nextState)(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变-&gt;判断是否需要重新渲染新的props和state(shouldComponentUpdate) -&gt; 根据判断决定执行render过程还是继续·保持running状态 三个统一调用的方法,用于组件初始化，获取默认属性和状态 getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享 getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出 已挂载的方法 component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候 componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。 PropTypesimport PropTypes from &#39;prop-types&#39;; MyComponent.propTypes = &#123; // You can declare that a prop is a specific JS primitive. By default, these // are all optional. optionalArray: PropTypes.array, optionalBool: PropTypes.bool, optionalFunc: PropTypes.func, optionalNumber: PropTypes.number, optionalObject: PropTypes.object, optionalString: PropTypes.string, optionalSymbol: PropTypes.symbol, // Anything that can be rendered: numbers, strings, elements or an array // (or fragment) containing these types. optionalNode: PropTypes.node, // A React element. optionalElement: PropTypes.element, // You can also declare that a prop is an instance of a class. This uses // JS&#39;s instanceof operator. optionalMessage: PropTypes.instanceOf(Message), // You can ensure that your prop is limited to specific values by treating // it as an enum. optionalEnum: PropTypes.oneOf([&#39;News&#39;, &#39;Photos&#39;]), // An object that could be one of many types optionalUnion: PropTypes.oneOfType([ PropTypes.string, PropTypes.number, PropTypes.instanceOf(Message) ]), // An array of a certain type optionalArrayOf: PropTypes.arrayOf(PropTypes.number), // An object with property values of a certain type optionalObjectOf: PropTypes.objectOf(PropTypes.number), // An object taking on a particular shape optionalObjectWithShape: PropTypes.shape(&#123; color: PropTypes.string, fontSize: PropTypes.number &#125;), // You can chain any of the above with `isRequired` to make sure a warning // is shown if the prop isn&#39;t provided. requiredFunc: PropTypes.func.isRequired, // A value of any data type requiredAny: PropTypes.any.isRequired, // You can also specify a custom validator. It should return an Error // object if the validation fails. Don&#39;t `console.warn` or throw, as this // won&#39;t work inside `oneOfType`. customProp: function(props, propName, componentName) &#123; if (!/matchme/.test(props[propName])) &#123; return new Error( &#39;Invalid prop `&#39; + propName + &#39;` supplied to&#39; + &#39; `&#39; + componentName + &#39;`. Validation failed.&#39; ); &#125; &#125;, // You can also supply a custom validator to `arrayOf` and `objectOf`. // It should return an Error object if the validation fails. The validator // will be called for each key in the array or object. The first two // arguments of the validator are the array or object itself, and the // current item&#39;s key. customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) &#123; if (!/matchme/.test(propValue[key])) &#123; return new Error( &#39;Invalid prop `&#39; + propFullName + &#39;` supplied to&#39; + &#39; `&#39; + componentName + &#39;`. Validation failed.&#39; ); &#125; &#125;) &#125;;","categories":[],"tags":[{"name":"React","slug":"React","permalink":"http://yoursite.com/tags/React/"}]}],"categories":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/categories/Nginx/"}],"tags":[{"name":"Node","slug":"Node","permalink":"http://yoursite.com/tags/Node/"},{"name":"Npm","slug":"Npm","permalink":"http://yoursite.com/tags/Npm/"},{"name":"npm","slug":"npm","permalink":"http://yoursite.com/tags/npm/"},{"name":"总结","slug":"总结","permalink":"http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"},{"name":"Mysql","slug":"Mysql","permalink":"http://yoursite.com/tags/Mysql/"},{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"},{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"},{"name":"SEO","slug":"SEO","permalink":"http://yoursite.com/tags/SEO/"},{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/tags/Nginx/"},{"name":"Https","slug":"Https","permalink":"http://yoursite.com/tags/Https/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://yoursite.com/tags/Ubuntu/"},{"name":"React","slug":"React","permalink":"http://yoursite.com/tags/React/"}]}