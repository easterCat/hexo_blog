{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/black-blue/source/background/bg.jpg","path":"background/bg.jpg","modified":0,"renderable":1},{"_id":"themes/black-blue/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/css/gitment.min.css","path":"css/gitment.min.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/css/loading-style.css","path":"css/loading-style.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/css/showshare.css","path":"css/showshare.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/coderwall.png","path":"img/coderwall.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/delicious.png","path":"img/delicious.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/douban.png","path":"img/douban.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/facebook.png","path":"img/facebook.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/github.png","path":"img/github.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/google.png","path":"img/google.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/linkedin.png","path":"img/linkedin.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/mail.png","path":"img/mail.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/pinboard.png","path":"img/pinboard.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/pinterest.png","path":"img/pinterest.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/qq.png","path":"img/qq.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/rss.png","path":"img/rss.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/twitter.png","path":"img/twitter.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/wechat.png","path":"img/wechat.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/weibo.png","path":"img/weibo.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/zhihu.png","path":"img/zhihu.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/TweenMax.js","path":"js/TweenMax.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/TweenMax.min.js","path":"js/TweenMax.min.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/embed.js","path":"js/embed.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/pace.js","path":"js/pace.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/css/pace/pace-theme-flash.css","path":"css/pace/pace-theme-flash.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/css/font-awesome.css","path":"font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.woff2","path":"font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/404/jquery-2.0.3.min.js","path":"js/404/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/404/jquery.parallaxify-0.0.2.min.js","path":"js/404/jquery.parallaxify-0.0.2.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"9a916c3112e989d75dd0c0fe81fa21592714717c","modified":1673405771680},{"_id":"source/_posts/hello-world-1.md","hash":"49e354502acdbc7b898e6598d4ce86bef46f1fff","modified":1673405771680},{"_id":"source/_posts/hello-world.md","hash":"dd93645ea385dd07e637f3059d1377aaf397cfb7","modified":1673405771680},{"_id":"source/_posts/react基础2.md","hash":"7fbe1b331a9546147390f45b566e430107d80ec3","modified":1673405771681},{"_id":"source/_posts/react基础.md","hash":"5283362d510b41e804df2333196a960de47f80ac","modified":1673405771680},{"_id":"source/about/index.md","hash":"e86da327d3758bc06e5508d74ef4328e814980ed","modified":1673405771681},{"_id":"source/categories/index.md","hash":"a94e73a895556c4eeff42153bd8fb8c3c08520ef","modified":1673405771681},{"_id":"source/images/avatar.jpg","hash":"1163c8cdc6377a21641c89bc547515223697466f","modified":1673405771682},{"_id":"source/photos/index.md","hash":"329e5e3c65a8355152a9c9ffaf48be37951ff9b9","modified":1673405771682},{"_id":"source/tags/index.md","hash":"b74e868cc34e7357da82bc69be820aa62b604c86","modified":1673405771682},{"_id":"public/atom.xml","hash":"982bc6965da1cc399f432bcaa4d0043081c7db63","modified":1673407210130},{"_id":"public/content.json","hash":"d300caac8f986c411b55af0825e0c82d3f3acdb8","modified":1673407210130},{"_id":"public/search.xml","hash":"bf47753ef0fd99cea8baa11bf440a1c34082f027","modified":1673406306976},{"_id":"public/about/index.html","hash":"5f2932280b3544f9c1356d7eb0d7d17da1818a59","modified":1673407599436},{"_id":"public/categories/index.html","hash":"aef501a21b8e2d94819468aafafabded82a0bbc2","modified":1673407599436},{"_id":"public/photos/index.html","hash":"f9c3bb289e22b684906fbdb814abcfc32ea556af","modified":1673407599436},{"_id":"public/tags/index.html","hash":"70180a24f1fffab2bf7a6b9f6e62bef0ef07bb2f","modified":1673407599436},{"_id":"public/2023/01/11/hello-world/index.html","hash":"5ab5e5a0c61c11680677e34111377b0cfbfaa587","modified":1673407599436},{"_id":"public/2018/05/09/react基础2/index.html","hash":"8fec2791e52fc85f5f0bcb251c7f9e9bc0bd4b55","modified":1673407599436},{"_id":"public/2018/05/09/react基础/index.html","hash":"a4d0abe980a106edbd561bd72c9781d291a678ce","modified":1673407599436},{"_id":"public/2018/05/09/hello-world-1/index.html","hash":"43189dfe04d806ee1343667a85b78382043d4c60","modified":1673407599436},{"_id":"public/index.html","hash":"540a4f8abfcfd8a28ae558006ff63f76fc09f056","modified":1673407599436},{"_id":"public/archives/index.html","hash":"18b868a17fa24af7d2e12508b33fcea67f1c390a","modified":1673407599436},{"_id":"public/archives/2018/index.html","hash":"6cf205ec21e600d959c4bb688364c1e19ba7718d","modified":1673407599436},{"_id":"public/archives/2018/05/index.html","hash":"56c42f76c09dfb75cf8b75ab499cd3775ca6b568","modified":1673407599436},{"_id":"public/archives/2023/index.html","hash":"fb960a565596d293212888008bf61ae9503bfd61","modified":1673407599436},{"_id":"public/archives/2023/01/index.html","hash":"0ab2a8854c904745e3fe74a118f15f64557a0872","modified":1673407599436},{"_id":"public/tags/哈哈哈1223/index.html","hash":"be157a5ab837981e84608cbe6972d5e0e42926e9","modified":1673407599436},{"_id":"public/tags/react/index.html","hash":"8bc381608b37f1b7dcad097562975b4d52804464","modified":1673407599436},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1673405771684},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1673405771684},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1673405771684},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1673405771684},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1673405771685},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1673405771685},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1673405771685},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1673405771706},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1673405771706},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1673405771706},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1673405771707},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1673405771707},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1673405771707},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1673405771706},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1673405771707},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1673405771708},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1673405771708},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1673405771708},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1673405771708},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1673405771712},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1673405771714},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1673405771709},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1673405771710},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1673405771710},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1673405771709},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1673405771711},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1673405771711},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1673405771711},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1673405771711},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1673405771711},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1673405771713},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1673405771713},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1673405771693},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1673405771693},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1673405771693},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1673405771694},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1673405771694},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1673405771694},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1673405771694},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1673405771694},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1673405771695},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1673405771700},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1673405771700},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1673405771697},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1673405771700},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1673405771700},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1673405771701},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1673405771702},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1673405771702},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1673405771702},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1673405771701},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1673405771703},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1673405771702},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1673405771703},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1673405771703},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1673405771704},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1673405771704},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1673405771704},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1673405771705},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1673405771695},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1673405771695},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1673405771696},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1673405771696},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1673405771696},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1673405771698},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1673405771699},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1673405771699},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1673405771700},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1673405771701},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1673405771701},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1673405771701},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1673405771690},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1673405771682},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1673405771683},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1673405771683},{"_id":"themes/yilia/.gitignore","hash":"3ca0e72fdfd533e411cc95dc9c91c5ec59661f95","modified":1673405771683},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1673405771683},{"_id":"themes/yilia/_config.yml","hash":"de1c52a2b056c3c7b8bfd74e3d78a2f7cf7fa996","modified":1673405771684},{"_id":"themes/yilia/README.md","hash":"99985dc9f0f3473a26341245e436751bc42fd322","modified":1673405771683},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1673405771692},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1673405771683},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1673405771691},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1673405771691},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1673405771714},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1673405771691},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1673405771692},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1673405771692},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1673405771692},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1673405771692},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1673405771693},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1673405771709},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1673405771685},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1673405771686},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1673405771686},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1673405771686},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1673405771686},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1673405771686},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1673405771687},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1673405771687},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1673405771687},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1673405771687},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1673405771687},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1673405771688},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1673405771688},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1673405771688},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1673405771691},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1673405771691},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1673405771688},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1673405771689},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1673405771689},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1673405771689},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1673405771689},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1673405771689},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1673405771690},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1673405771690},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1673405771690},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1673405771690},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1673405771690},{"_id":"themes/black-blue/.gitignore","hash":"0b09eddca98f48b62fe045db35c0166571d71dcb","modified":1673407506332},{"_id":"themes/black-blue/_config.yml","hash":"b53fed30534d890e7496088bd9d435b207f9d4e6","modified":1673407506332},{"_id":"themes/black-blue/package.json","hash":"ec3f79ea003611c88754ac1c016f825e94655ffe","modified":1673407506355},{"_id":"themes/black-blue/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1673407506353},{"_id":"themes/black-blue/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1673407506353},{"_id":"themes/black-blue/README.md","hash":"299927e31d5aab0d6ae34f0f9006ccd2a9c30108","modified":1673407506332},{"_id":"themes/black-blue/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1673407506353},{"_id":"themes/black-blue/layout/layout.ejs","hash":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1673407506354},{"_id":"themes/black-blue/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1673407506354},{"_id":"themes/black-blue/layout/plugins.swig","hash":"f809b5e62e968a80921c56e5d7658325b48b7263","modified":1673407506354},{"_id":"themes/black-blue/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1673407506355},{"_id":"themes/black-blue/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1673407506355},{"_id":"themes/black-blue/languages/de.yml","hash":"ecb13af8af81ccc033ae7494cb2f94f84f6466ad","modified":1673407506333},{"_id":"themes/black-blue/languages/default.yml","hash":"9e59cd11b290be84909612beb12d0f93ce737f53","modified":1673407506334},{"_id":"themes/black-blue/languages/en.yml","hash":"c2b0f914ef4036281ae50f0cdf08d2823cd56f8e","modified":1673407506334},{"_id":"themes/black-blue/languages/fr-FR.yml","hash":"12cfa96dc412ecb6f8bf4de2690575929464906e","modified":1673407506334},{"_id":"themes/black-blue/languages/ru.yml","hash":"9997425292031ee8a58a93346ac6d3f38f18e566","modified":1673407506335},{"_id":"themes/black-blue/languages/zh-tw.yml","hash":"9e4034870b57d2bb3063c91f8d206a6c4d7b3789","modified":1673407506337},{"_id":"themes/black-blue/languages/zh-hk.yml","hash":"606dfb34d3fec1d7895a654ff7a5a1de0c6a5c55","modified":1673407506335},{"_id":"themes/black-blue/languages/zh.yml","hash":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1673407506337},{"_id":"themes/black-blue/languages/zh-Hans.yml","hash":"861bc741042e108948d4c574b20c88e2f11c3b03","modified":1673407506335},{"_id":"themes/black-blue/source/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1673407506356},{"_id":"themes/black-blue/layout/_partial/archive-post.ejs","hash":"8af583c5f60c69ffdc97bee4e8fdac1ba34ebecd","modified":1673407506340},{"_id":"themes/black-blue/layout/_partial/archive.ejs","hash":"7023e8239b1a9c57c4bf787b688c7f0fde437d8b","modified":1673407506340},{"_id":"themes/black-blue/layout/_partial/background.ejs","hash":"e566c3804a25e4c76f025db511dbaa0d008757e2","modified":1673407506341},{"_id":"themes/black-blue/layout/_partial/article.ejs","hash":"db43a8425b45bb1f5103285689f52f9a0c99a756","modified":1673407506341},{"_id":"themes/black-blue/layout/_partial/bodybackground.ejs","hash":"931700a928b84577cc33dfff68a009188885f6c0","modified":1673407506341},{"_id":"themes/black-blue/layout/_partial/case.swig","hash":"571f96fee07071d81ed65b2c8fda8f922ad784b7","modified":1673407506342},{"_id":"themes/black-blue/layout/_partial/footer.ejs","hash":"207e52eb895f027b430c6dd7d00b34f0eebf4ac9","modified":1673407506343},{"_id":"themes/black-blue/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1673407506343},{"_id":"themes/black-blue/layout/_partial/head.ejs","hash":"2f98d8d94df55799860af7cef82c44654b4b4cbf","modified":1673407506343},{"_id":"themes/black-blue/layout/_partial/hide-labels.ejs","hash":"bd98380a53cee20a567020f96bf39e702e8e9e18","modified":1673407506344},{"_id":"themes/black-blue/layout/_partial/jquery.ejs","hash":"14b6ef238bca0cb75c72496ed8ffc3c63ab6f00e","modified":1673407506344},{"_id":"themes/black-blue/layout/_partial/mathjax.ejs","hash":"54fab4d3d64cb937d6baec7324ffabf9f202b883","modified":1673407506345},{"_id":"themes/black-blue/layout/_partial/left-col.ejs","hash":"fc99c9226fb4ba839f7dc5afcbb57f10e311b1d5","modified":1673407506345},{"_id":"themes/black-blue/layout/_partial/mobile-nav.ejs","hash":"cd0ebfb2c3930f6df173f336999577917d92cfc0","modified":1673407506346},{"_id":"themes/black-blue/layout/_partial/page.ejs","hash":"2d55ad89b163d6fb2d88455e2d6220b4706afb47","modified":1673407506347},{"_id":"themes/black-blue/layout/_partial/plugin.swig","hash":"17b6c6945e4b1b41dbb10d851f85ca10100c28ea","modified":1673407506347},{"_id":"themes/black-blue/layout/_partial/post-nav-button.ejs","hash":"b1f46ad80bf444eb9d121a16e3e2c0360af3b034","modified":1673407506347},{"_id":"themes/black-blue/layout/_partial/scrolling-button.ejs","hash":"b3a28974f37375796687e6100b48c3da6f662640","modified":1673407506350},{"_id":"themes/black-blue/layout/_partial/theme.swig","hash":"5a279ad8f6c6b7c104cce495faa563d8b7a7c74a","modified":1673407506352},{"_id":"themes/black-blue/layout/_partial/toc.ejs","hash":"ae9ba515d0f52017be98ec898b7bac06ca4a0d84","modified":1673407506352},{"_id":"themes/black-blue/layout/_partial/work.swig","hash":"ff66786482448c74924ca8288d3822ec0a4412c9","modified":1673407506352},{"_id":"themes/black-blue/source/css/gitment.css","hash":"8d314bd778ea72d027e9f03fba3c89e2e2a0f68f","modified":1673407506360},{"_id":"themes/black-blue/source/css/gitment.min.css","hash":"5c6e826b17fcb766b5bea5e9adcf5c5527cf74c8","modified":1673407506361},{"_id":"themes/black-blue/source/css/loading-style.css","hash":"6535ef9a22f9791c87033fd914938473952831aa","modified":1673407506361},{"_id":"themes/black-blue/source/css/showshare.css","hash":"32ac128451bec3cefcf322d4b3e9a294b0c0e57d","modified":1673407506362},{"_id":"themes/black-blue/source/css/style.css","hash":"67a5038e87ed12baff39aef35bdf36653f8f6afe","modified":1673407506363},{"_id":"themes/black-blue/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1673407506363},{"_id":"themes/black-blue/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1673407506364},{"_id":"themes/black-blue/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1673407506366},{"_id":"themes/black-blue/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1673407506365},{"_id":"themes/black-blue/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1673407506366},{"_id":"themes/black-blue/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1673407506367},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.css","hash":"89aa9b06961a0c8fa0aa6e4cea9a95e7f6d4d5a1","modified":1673407506370},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.js","hash":"422bd03dda3be683717d7cf940eead7a072fe12e","modified":1673407506372},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1673407506373},{"_id":"themes/black-blue/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1673407506393},{"_id":"themes/black-blue/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1673407506393},{"_id":"themes/black-blue/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1673407506393},{"_id":"themes/black-blue/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1673407506394},{"_id":"themes/black-blue/source/img/favicon.png","hash":"5b4e9c94ff3396db5b074b69c1aa5bb909aba825","modified":1673407506394},{"_id":"themes/black-blue/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1673407506395},{"_id":"themes/black-blue/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1673407506396},{"_id":"themes/black-blue/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1673407506396},{"_id":"themes/black-blue/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1673407506396},{"_id":"themes/black-blue/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1673407506396},{"_id":"themes/black-blue/layout/_partial/after-footer.ejs","hash":"ea8ee502797a80bdcd590999c9722ca094cc8250","modified":1673407506338},{"_id":"themes/black-blue/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1673407506397},{"_id":"themes/black-blue/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1673407506397},{"_id":"themes/black-blue/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1673407506397},{"_id":"themes/black-blue/source/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1673407506397},{"_id":"themes/black-blue/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1673407506398},{"_id":"themes/black-blue/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1673407506398},{"_id":"themes/black-blue/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1673407506398},{"_id":"themes/black-blue/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1673407506399},{"_id":"themes/black-blue/source/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1673407506399},{"_id":"themes/black-blue/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1673407506400},{"_id":"themes/black-blue/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1673407506400},{"_id":"themes/black-blue/source/js/TweenMax.js","hash":"4ac5bb002414aa0dbbb57c867845fa057a9c5453","modified":1673407506402},{"_id":"themes/black-blue/source/js/clipboard.min.js","hash":"7f047155fccd6f375db17d6d44e1f4637feb3b04","modified":1673407506404},{"_id":"themes/black-blue/source/js/embed.js","hash":"78cb9cbc04c32268df2663370f1daab6a2b0a9aa","modified":1673407506405},{"_id":"themes/black-blue/source/js/instagram.js","hash":"35d037fed53f5d3b6ece63b1b98ba3b2f9ccbf78","modified":1673407506405},{"_id":"themes/black-blue/source/js/jquery.lazyload.js","hash":"6f4a6850315cabbab8908473fe04f8bd2011299b","modified":1673407506405},{"_id":"themes/black-blue/source/js/main.js","hash":"f6226d5a27cb556dccc8d2ed85b1b228675a119f","modified":1673407506406},{"_id":"themes/black-blue/source/js/mobile.js","hash":"ebb80e3e6da9146f05ba0528a378c583b47e37c1","modified":1673407506406},{"_id":"themes/black-blue/source/js/pc.js","hash":"46db69363993695b6714a04e503624ad054da19e","modified":1673407506406},{"_id":"themes/black-blue/source/js/pace.js","hash":"aadc3b4644ac1b1a7849991ffd53e220b55ff6e5","modified":1673407506406},{"_id":"themes/black-blue/source/js/plugins.js","hash":"72b87cbf6170f6cbb69bc9b20a7bc494667b514c","modified":1673407506407},{"_id":"themes/black-blue/layout/_partial/analytics/baidu-analytics.ejs","hash":"b9467d24b276df225786923861f4cfecf700ca75","modified":1673407506339},{"_id":"themes/black-blue/layout/_partial/comments/changyan.ejs","hash":"85239a27de547854dcbff38feac9bb5a92a2184c","modified":1673407506342},{"_id":"themes/black-blue/layout/_partial/analytics/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1673407506339},{"_id":"themes/black-blue/layout/_partial/comments/disqus.ejs","hash":"013e4e8f07af29715ac8d6f66aad6a575be2f70a","modified":1673407506342},{"_id":"themes/black-blue/layout/_partial/comments/gitment.ejs","hash":"170a8a7f5df663c07534e44c6a3abd5b74624ce4","modified":1673407506343},{"_id":"themes/black-blue/layout/_partial/post/TipTitle.ejs","hash":"201de1bafd12c8641bc6ccdfff116002550f923c","modified":1673407506348},{"_id":"themes/black-blue/layout/_partial/post/category.ejs","hash":"265bb12f7cfa5e0bcbb74fdd409ba13a6d9d2e22","modified":1673407506348},{"_id":"themes/black-blue/layout/_partial/post/date.ejs","hash":"41162e173f3c9339cfaf0cc12ebd8d27631540d7","modified":1673407506348},{"_id":"themes/black-blue/layout/_partial/post/loading.ejs","hash":"52a576a8afee08d33c6f69a61c496e1820132e91","modified":1673407506349},{"_id":"themes/black-blue/layout/_partial/post/nav.ejs","hash":"ec5289ec24ae1f51c149b9a502d1c80baff0d411","modified":1673407506349},{"_id":"themes/black-blue/layout/_partial/post/tag.ejs","hash":"9dad471e27de9e066666f3082137eccaede2e67b","modified":1673407506349},{"_id":"themes/black-blue/layout/_partial/post/title.ejs","hash":"7d20bf6335493155f91b3e1c782ba150856d9370","modified":1673407506349},{"_id":"themes/black-blue/layout/_partial/share/baidu-share.ejs","hash":"21fbd6dbdcc631c61194ea04fc19b298133b0e2f","modified":1673407506350},{"_id":"themes/black-blue/layout/_partial/share/share.ejs","hash":"62467610ba6df9b63350d163e806be774dcf5a00","modified":1673407506351},{"_id":"themes/black-blue/layout/_partial/share/showshare.ejs","hash":"410b809eb6c50bacfd9e1e573f1e0251841bc79d","modified":1673407506351},{"_id":"themes/black-blue/source/css/pace/pace-theme-flash.css","hash":"9b9c20fd0624745cc20d7028b54c8b8301d81629","modified":1673407506361},{"_id":"themes/black-blue/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1673407506368},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1673407506369},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1673407506369},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1673407506369},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1673407506369},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1673407506370},{"_id":"themes/black-blue/source/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1673407506373},{"_id":"themes/black-blue/source/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1673407506374},{"_id":"themes/black-blue/source/js/404/jquery.parallaxify-0.0.2.min.js","hash":"b97e2dfcb210b76f7bdd6e1800b26128bf4fad99","modified":1673407506402},{"_id":"themes/black-blue/source/js/TweenMax.min.js","hash":"eaa4e4a08400da3f22dedda706ba56cdce5b0b7a","modified":1673407506404},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1673407506377},{"_id":"themes/black-blue/source/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1673407506376},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1673407506388},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1673407506387},{"_id":"themes/black-blue/source/js/404/jquery-2.0.3.min.js","hash":"fbf9c77d0c4e3c34a485980c1e5316b6212160c8","modified":1673407506402},{"_id":"themes/black-blue/source/background/bg-1.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1673407506358},{"_id":"themes/black-blue/source/background/bg.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1673407506360},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1673407506386},{"_id":"themes/black-blue/source/img/avatar.png","hash":"31f8c6a64a3ccaa454d41fc4eb074aeb94e6cbde","modified":1673407506389},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1673407506382},{"_id":"themes/black-blue/source/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1673407506392},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1673407526261},{"_id":"public/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1673407526261},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1673407526261},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1673407526261},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1673407526261},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1673407526261},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1673407526261},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1673407526261},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1673407526261},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1673407526261},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1673407526261},{"_id":"public/img/favicon.png","hash":"5b4e9c94ff3396db5b074b69c1aa5bb909aba825","modified":1673407526261},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1673407526261},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1673407526261},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1673407526261},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1673407526261},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1673407526261},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1673407526261},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1673407526261},{"_id":"public/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1673407526261},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1673407526261},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1673407526261},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1673407526261},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1673407526261},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1673407526261},{"_id":"public/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1673407526261},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1673407526261},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1673407526261},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1673407526261},{"_id":"public/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1673407526261},{"_id":"public/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1673407526261},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1673407526261},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1673407526261},{"_id":"public/css/gitment.min.css","hash":"5c6e826b17fcb766b5bea5e9adcf5c5527cf74c8","modified":1673407526261},{"_id":"public/css/loading-style.css","hash":"6535ef9a22f9791c87033fd914938473952831aa","modified":1673407526261},{"_id":"public/fancybox/jquery.fancybox.css","hash":"89aa9b06961a0c8fa0aa6e4cea9a95e7f6d4d5a1","modified":1673407526261},{"_id":"public/js/TweenMax.js","hash":"4ac5bb002414aa0dbbb57c867845fa057a9c5453","modified":1673407526261},{"_id":"public/js/clipboard.min.js","hash":"7f047155fccd6f375db17d6d44e1f4637feb3b04","modified":1673407526261},{"_id":"public/js/instagram.js","hash":"35d037fed53f5d3b6ece63b1b98ba3b2f9ccbf78","modified":1673407526261},{"_id":"public/js/jquery.lazyload.js","hash":"6f4a6850315cabbab8908473fe04f8bd2011299b","modified":1673407526261},{"_id":"public/js/main.js","hash":"f6226d5a27cb556dccc8d2ed85b1b228675a119f","modified":1673407526261},{"_id":"public/js/mobile.js","hash":"ebb80e3e6da9146f05ba0528a378c583b47e37c1","modified":1673407526261},{"_id":"public/js/pace.js","hash":"aadc3b4644ac1b1a7849991ffd53e220b55ff6e5","modified":1673407526261},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1673407599436},{"_id":"public/js/pc.js","hash":"46db69363993695b6714a04e503624ad054da19e","modified":1673407526261},{"_id":"public/css/pace/pace-theme-flash.css","hash":"9b9c20fd0624745cc20d7028b54c8b8301d81629","modified":1673407526261},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1673407526261},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1673407526261},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1673407526261},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1673407526261},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1673407526261},{"_id":"public/js/404/jquery.parallaxify-0.0.2.min.js","hash":"b97e2dfcb210b76f7bdd6e1800b26128bf4fad99","modified":1673407526261},{"_id":"public/css/gitment.css","hash":"8d314bd778ea72d027e9f03fba3c89e2e2a0f68f","modified":1673407526261},{"_id":"public/css/showshare.css","hash":"32ac128451bec3cefcf322d4b3e9a294b0c0e57d","modified":1673407526261},{"_id":"public/css/style.css","hash":"67a5038e87ed12baff39aef35bdf36653f8f6afe","modified":1673407526261},{"_id":"public/fancybox/jquery.fancybox.js","hash":"422bd03dda3be683717d7cf940eead7a072fe12e","modified":1673407526261},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1673407526261},{"_id":"public/js/TweenMax.min.js","hash":"eaa4e4a08400da3f22dedda706ba56cdce5b0b7a","modified":1673407526261},{"_id":"public/js/embed.js","hash":"78cb9cbc04c32268df2663370f1daab6a2b0a9aa","modified":1673407526261},{"_id":"public/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1673407526261},{"_id":"public/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1673407526261},{"_id":"public/js/404/jquery-2.0.3.min.js","hash":"fbf9c77d0c4e3c34a485980c1e5316b6212160c8","modified":1673407526261},{"_id":"public/background/bg-1.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1673407526261},{"_id":"public/background/bg.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1673407526261},{"_id":"public/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1673407526261},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1673407599436},{"_id":"public/font-awesome/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1673407526261},{"_id":"public/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1673407526261},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1673407583930},{"_id":"themes/hexo-theme-fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1673407583882},{"_id":"themes/hexo-theme-fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1673407583883},{"_id":"themes/hexo-theme-fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1673407583886},{"_id":"themes/hexo-theme-fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1673407583886},{"_id":"themes/hexo-theme-fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1673407583883},{"_id":"themes/hexo-theme-fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1673407583885},{"_id":"themes/hexo-theme-fluid/README_en.md","hash":"8c874f309e346fffa392e174385b5cc08510f218","modified":1673407583886},{"_id":"themes/hexo-theme-fluid/_config.yml","hash":"088788e149051fc0a3c6096ba95e35a8344de04b","modified":1673407583887},{"_id":"themes/hexo-theme-fluid/package.json","hash":"30e3f4ccfef8474c05cf0b1eb02e91bd0a152807","modified":1673407583906},{"_id":"themes/hexo-theme-fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1673407583888},{"_id":"themes/hexo-theme-fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1673407583887},{"_id":"themes/hexo-theme-fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1673407583888},{"_id":"themes/hexo-theme-fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1673407583889},{"_id":"themes/hexo-theme-fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1673407583889},{"_id":"themes/hexo-theme-fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1673407583889},{"_id":"themes/hexo-theme-fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1673407583889},{"_id":"themes/hexo-theme-fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1673407583890},{"_id":"themes/hexo-theme-fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1673407583890},{"_id":"themes/hexo-theme-fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1673407583890},{"_id":"themes/hexo-theme-fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1673407583904},{"_id":"themes/hexo-theme-fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1673407583904},{"_id":"themes/hexo-theme-fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1673407583904},{"_id":"themes/hexo-theme-fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1673407583904},{"_id":"themes/hexo-theme-fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1673407583905},{"_id":"themes/hexo-theme-fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1673407583905},{"_id":"themes/hexo-theme-fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1673407583905},{"_id":"themes/hexo-theme-fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1673407583906},{"_id":"themes/hexo-theme-fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1673407583906},{"_id":"themes/hexo-theme-fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1673407583906},{"_id":"themes/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1673407583906},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1673407583883},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1673407583883},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1673407583884},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1673407583884},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1673407583884},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1673407583884},{"_id":"themes/hexo-theme-fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1673407583885},{"_id":"themes/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1673407583891},{"_id":"themes/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1673407583891},{"_id":"themes/hexo-theme-fluid/.github/workflows/publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1673407583885},{"_id":"themes/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1673407583891},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1673407583891},{"_id":"themes/hexo-theme-fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1673407583895},{"_id":"themes/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1673407583896},{"_id":"themes/hexo-theme-fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1673407583897},{"_id":"themes/hexo-theme-fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1673407583897},{"_id":"themes/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1673407583898},{"_id":"themes/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1673407583898},{"_id":"themes/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1673407583903},{"_id":"themes/hexo-theme-fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1673407583904},{"_id":"themes/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1673407583909},{"_id":"themes/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1673407583910},{"_id":"themes/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1673407583911},{"_id":"themes/hexo-theme-fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1673407583907},{"_id":"themes/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1673407583912},{"_id":"themes/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1673407583912},{"_id":"themes/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1673407583913},{"_id":"themes/hexo-theme-fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1673407583913},{"_id":"themes/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1673407583913},{"_id":"themes/hexo-theme-fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1673407583914},{"_id":"themes/hexo-theme-fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1673407583914},{"_id":"themes/hexo-theme-fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1673407583914},{"_id":"themes/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1673407583914},{"_id":"themes/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1673407583914},{"_id":"themes/hexo-theme-fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1673407583915},{"_id":"themes/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1673407583915},{"_id":"themes/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1673407583915},{"_id":"themes/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1673407583916},{"_id":"themes/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1673407583916},{"_id":"themes/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1673407583916},{"_id":"themes/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1673407583916},{"_id":"themes/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1673407583916},{"_id":"themes/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1673407583917},{"_id":"themes/hexo-theme-fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1673407583917},{"_id":"themes/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1673407583917},{"_id":"themes/hexo-theme-fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1673407583917},{"_id":"themes/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1673407583931},{"_id":"themes/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1673407583931},{"_id":"themes/hexo-theme-fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1673407583931},{"_id":"themes/hexo-theme-fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1673407583932},{"_id":"themes/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1673407583935},{"_id":"themes/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1673407583935},{"_id":"themes/hexo-theme-fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1673407583935},{"_id":"themes/hexo-theme-fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1673407583936},{"_id":"themes/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1673407583934},{"_id":"themes/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1673407583932},{"_id":"themes/hexo-theme-fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1673407583936},{"_id":"themes/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1673407583936},{"_id":"themes/hexo-theme-fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1673407583936},{"_id":"themes/hexo-theme-fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1673407583937},{"_id":"themes/hexo-theme-fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1673407583937},{"_id":"themes/hexo-theme-fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1673407583937},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1673407583892},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1673407583892},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1673407583893},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1673407583893},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1673407583894},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1673407583894},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1673407583894},{"_id":"themes/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1673407583938},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1673407583894},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1673407583895},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1673407583895},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1673407583895},{"_id":"themes/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1673407583896},{"_id":"themes/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1673407583896},{"_id":"themes/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1673407583897},{"_id":"themes/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"870db75e4e403a840c4463dfeed2c9114846e7cc","modified":1673407583898},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1673407583899},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1673407583899},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1673407583900},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1673407583900},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1673407583900},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1673407583900},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1673407583901},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1673407583901},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1673407583901},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1673407583901},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1673407583902},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1673407583902},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1673407583902},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1673407583902},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1673407583903},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1673407583903},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1673407583903},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1673407583907},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1673407583908},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1673407583908},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1673407583908},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1673407583908},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1673407583909},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1673407583909},{"_id":"themes/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1673407583918},{"_id":"themes/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1673407583918},{"_id":"themes/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1673407583930},{"_id":"themes/hexo-theme-fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1673407583931},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1673407583919},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1673407583919},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1673407583925},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1673407583925},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1673407583925},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1673407583925},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1673407583926},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1673407583926},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1673407583928},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1673407583927},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1673407583927},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1673407583928},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1673407583929},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1673407583929},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1673407583929},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1673407583930},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1673407583930},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1673407583920},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1673407583920},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1673407583920},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1673407583921},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1673407583921},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1673407583921},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1673407583921},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1673407583922},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1673407583922},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1673407583923},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1673407583922},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1673407583923},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1673407583923},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1673407583924},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1673407583924},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1673407583924},{"_id":"themes/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1673407583934},{"_id":"public/local-search.xml","hash":"880182f3ab91087b5b042f20da23895e7e732057","modified":1673407599436},{"_id":"public/404.html","hash":"35825cb6df760f731fba179ca02a390eefbb1cc9","modified":1673407599436},{"_id":"public/links/index.html","hash":"53997c80c2e12d279b764c4b6d9488c967ccbf33","modified":1673407599436},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1673407599436},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1673407599436},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1673407599436},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1673407599436},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1673407599436},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1673407599436},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1673407599436},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1673407599436},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1673407599436},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1673407599436},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1673407599436},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1673407599436},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1673407599436},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1673407599436},{"_id":"public/css/main.css","hash":"4d4a763ef5e9ab2602c46e812d846bba7a277757","modified":1673407599436},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1673407599436}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2018-05-09T09:02:05.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-05-09 17:02:05\n---\n","updated":"2023-01-11T02:56:11.681Z","path":"about/index.html","comments":1,"layout":"page","_id":"clcr2w8qt00010fh0smbmry2x","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-05-09T09:00:40.000Z","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-05-09 17:00:40\nlayout: categories\n---\n","updated":"2023-01-11T02:56:11.681Z","path":"categories/index.html","comments":1,"_id":"clcr2w8qx00030fh0kl1mm0ob","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"photos","date":"2018-05-09T09:27:51.000Z","_content":"","source":"photos/index.md","raw":"---\ntitle: photos\ndate: 2018-05-09 17:27:51\n---\n","updated":"2023-01-11T02:56:11.682Z","path":"photos/index.html","comments":1,"layout":"page","_id":"clcr2w8r500060fh01x9o9q12","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","layout":"tags","date":"2018-05-09T09:01:25.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\nlayout: tags\ndate: 2018-05-09 17:01:25\n---\n","updated":"2023-01-11T02:56:11.682Z","path":"tags/index.html","comments":1,"_id":"clcr2w8r800080fh0mm4syplx","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"hello,world","date":"2018-05-09T07:30:13.000Z","_content":"\n#### 今天是个好日子\n","source":"_posts/hello-world-1.md","raw":"---\ntitle: 'hello,world'\ndate: 2018-05-09 15:30:13\ntags: 哈哈哈1223\n---\n\n#### 今天是个好日子\n","slug":"hello-world-1","published":1,"updated":"2023-01-11T02:56:11.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcr2w8ql00000fh06mdc7btf","content":"<h4 id=\"今天是个好日子\"><a href=\"#今天是个好日子\" class=\"headerlink\" title=\"今天是个好日子\"></a>今天是个好日子</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"今天是个好日子\"><a href=\"#今天是个好日子\" class=\"headerlink\" title=\"今天是个好日子\"></a>今天是个好日子</h4>"},{"title":"Hello World","_content":"\n<!-- more -->\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n\n---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags: 哈哈哈1223\n---\n\n<!-- more -->\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n\n---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2023-01-11T02:56:11.680Z","updated":"2023-01-11T02:56:11.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcr2w8qu00020fh0uiq0l3za","content":"<a id=\"more\"></a>\n<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<hr>\n<h2 id=\"title-Hello-World\"><a href=\"#title-Hello-World\" class=\"headerlink\" title=\"title: Hello World\"></a>title: Hello World</h2><p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start-1\"><a href=\"#Quick-Start-1\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post-1\"><a href=\"#Create-a-new-post-1\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server-1\"><a href=\"#Run-server-1\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files-1\"><a href=\"#Generate-static-files-1\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites-1\"><a href=\"#Deploy-to-remote-sites-1\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<hr>\n<h2 id=\"title-Hello-World-1\"><a href=\"#title-Hello-World-1\" class=\"headerlink\" title=\"title: Hello World\"></a>title: Hello World</h2><p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start-2\"><a href=\"#Quick-Start-2\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post-2\"><a href=\"#Create-a-new-post-2\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server-2\"><a href=\"#Run-server-2\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files-2\"><a href=\"#Generate-static-files-2\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites-2\"><a href=\"#Deploy-to-remote-sites-2\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<hr>\n<h2 id=\"title-Hello-World\"><a href=\"#title-Hello-World\" class=\"headerlink\" title=\"title: Hello World\"></a>title: Hello World</h2><p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start-1\"><a href=\"#Quick-Start-1\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post-1\"><a href=\"#Create-a-new-post-1\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server-1\"><a href=\"#Run-server-1\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files-1\"><a href=\"#Generate-static-files-1\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites-1\"><a href=\"#Deploy-to-remote-sites-1\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<hr>\n<h2 id=\"title-Hello-World-1\"><a href=\"#title-Hello-World-1\" class=\"headerlink\" title=\"title: Hello World\"></a>title: Hello World</h2><p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start-2\"><a href=\"#Quick-Start-2\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post-2\"><a href=\"#Create-a-new-post-2\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server-2\"><a href=\"#Run-server-2\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files-2\"><a href=\"#Generate-static-files-2\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites-2\"><a href=\"#Deploy-to-remote-sites-2\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"'react基础2'","date":"2018-05-09T09:49:24.000Z","_content":"\n<!-- more -->\n\n[react官网](https://reactjs.org/docs/hello-world.html)\n\n## 组件\n#### 1. 无状态组件\n  - 在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。\n  - 无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。\n  - 无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。\n\n```\nimport React from \"react\";\n\n//创建方式一,相当于es5的函数声明的方式创建\n function NoState (props) {\n     return (\n         <div>this is NoState Component</div>\n     )\n }\n```\n\n```\n//创建方式二,相当于es5的函数表达式的方式创建\nconst NoState = (props) => {\n    return (\n        <div>this is Nostate Component</div>\n    )\n}\n\nexport default NoState\n```\n--------------------------------------------------------------------------------\n- 无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。\n- 无状态组件没有实例化得过程，因此无法访问组件this中的对象\n- 无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理\n- 无状态组件只能访问传入的props，同样的props会得到同样的渲染结果\n\n\n\n当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来\n代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。\n第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同\n```\n// helloWorld.jsx\nimport React, {Component} from 'react';\nclass HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.props);\n        console.log(this.props.name);\n    }\n\n    render() {\n        return (\n            <div onClick={this.clickHander}>{ this.props.name } say: Hello World!</div>\n        )\n    }\n}\nexport default HelloWorld;\n```\n\n## 组件之间的交互\n#### 父组件与子组件之间的交互\n1. 父组件修改子组件，只需要修改传入的props属性\n2. 子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行\n子组件与子组件之间的交互\n3. 通过影响共同的父组件来进行交互\n\n\n\n```\nstate = {\n    switch: 0,\n    name: this.props.name1\n}\nclickHander = () => {\n    const {name1, name2} = this.props;\n    if (this.state.switch === 0) {\n        this.setState({\n            switch: 1,\n            name: name2\n        })\n    } else {\n        this.setState({\n            switch: 0,\n            name: name1\n        })\n    }\n};\nrender() {\n    return (\n        <div onClick={this.clickHander}>hello world !{this.state.name}</div>\n    )\n}\n```\n\n先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。\n\nstate = {} // 等同于ES5构造函数中的this.state = {}\n在对象中，我们可以通过this.state的方式来访问state中所存储的属性\nsetState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变\nreact赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了\n而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行\n// 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: 'Jason'})// 然后立即查看它的值console.log(this.state.name) // 仍然为Tom，不会立即改变\n\n### refs\nreact组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样\n```\n// 当然可能命名会是其他的，大概表达一个意思，不深究哈\n{\n    nodeName: 'div',\n    className: 'hello-world',\n    style: {},\n    parentNodes: 'root',\n    childrenNodes: []\n    ...\n}\n```\n\n而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的\n```\nimport React, { Component } from 'react';\nclass HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.refs)\n    } \n    render () {\n        return (\n            <div className=\"container\" onClick={this.clickHander}>\n                <div ref=\"hello\" className=\"hello\">Hello</div>\n                <div ref=\"world\" className=\"world\">World</div>\n            </div>\n        )\n    }\n}\nexport default HelloWorld;\n```\n为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替\n我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。\n当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。\n```\n// src/helloWorld.jsx\nimport React, { Component } from 'react';class HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.refs)\n    } refCallback = (elem) => {\n        console.log(elem);\n    } render () {\n        return (\n            <div className=\"container\" onClick={this.clickHander}>\n                <div ref=\"hello\" className=\"hello\">Hello</div>\n                <div ref={this.refCallback} className=\"world\">World</div>\n            </div>\n        )\n    }\n}export default HelloWorld;\n```\n\n\n### 组件生命周期\n件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数\n\n##### react组件有三种状态：\n- Mounted：已经插入真实DOM\n- Updating：正在被重新渲染\n- Unmounted：已移出真实DOM\n- \n##### 每个状态的处理函数\n- will：函数在进入状态之前调用\n- did：函数在进入状态之后调用\n\n##### 组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\n  - componentWillMount 在首次渲染完成之前，此时可修改组件的state\n  - componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM\n\n##### 组件属性(我们前面提到的props与state)更新的前后时刻\n  - componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state\n  - componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素\n\n###### 组件取消挂载之前(取消之后就没必要提供钩子函数了)\n`componentWillUnmount`\n\n###### 两个特殊的处理函数\n  - `componentWillReceiveProps(object nextProps)`：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变->然后componentWillReceiveProps去判断是否需要重新渲染(`shouldComponentUpdate`)->如果不需要则继续running->如果需要则执行`componentWillUpdate`->渲染DOM树之后执行`componentDidUpdate`->进入running\n  - `shouldComponentUpdate(nextProps, nextState)`(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变->判断是否需要重新渲染新的props和state(`shouldComponentUpdate`) -> 根据判断决定执行render过程还是继续·保持running状态\n\n###### 三个统一调用的方法,用于组件初始化，获取默认属性和状态\n  - getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享\n  - getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props\n  - render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出\n\n###### 已挂载的方法\n  - component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候\n\n\n\n>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。\n\n\n![image](http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg)\n\n## PropTypes\n```\nimport PropTypes from 'prop-types';\n\nMyComponent.propTypes = {\n  // You can declare that a prop is a specific JS primitive. By default, these\n  // are all optional.\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // Anything that can be rendered: numbers, strings, elements or an array\n  // (or fragment) containing these types.\n  optionalNode: PropTypes.node,\n\n  // A React element.\n  optionalElement: PropTypes.element,\n\n  // You can also declare that a prop is an instance of a class. This uses\n  // JS's instanceof operator.\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // You can ensure that your prop is limited to specific values by treating\n  // it as an enum.\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // An object that could be one of many types\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // An array of a certain type\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // An object with property values of a certain type\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // An object taking on a particular shape\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n\n  // You can chain any of the above with `isRequired` to make sure a warning\n  // is shown if the prop isn't provided.\n  requiredFunc: PropTypes.func.isRequired,\n\n  // A value of any data type\n  requiredAny: PropTypes.any.isRequired,\n\n  // You can also specify a custom validator. It should return an Error\n  // object if the validation fails. Don't `console.warn` or throw, as this\n  // won't work inside `oneOfType`.\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  },\n\n  // You can also supply a custom validator to `arrayOf` and `objectOf`.\n  // It should return an Error object if the validation fails. The validator\n  // will be called for each key in the array or object. The first two\n  // arguments of the validator are the array or object itself, and the\n  // current item's key.\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        'Invalid prop `' + propFullName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  })\n};\n```\n\n\t","source":"_posts/react基础2.md","raw":"---\ntitle: '''react基础2'''\ndate: 2018-05-09 17:49:24\ntags: react\n---\n\n<!-- more -->\n\n[react官网](https://reactjs.org/docs/hello-world.html)\n\n## 组件\n#### 1. 无状态组件\n  - 在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。\n  - 无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。\n  - 无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。\n\n```\nimport React from \"react\";\n\n//创建方式一,相当于es5的函数声明的方式创建\n function NoState (props) {\n     return (\n         <div>this is NoState Component</div>\n     )\n }\n```\n\n```\n//创建方式二,相当于es5的函数表达式的方式创建\nconst NoState = (props) => {\n    return (\n        <div>this is Nostate Component</div>\n    )\n}\n\nexport default NoState\n```\n--------------------------------------------------------------------------------\n- 无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。\n- 无状态组件没有实例化得过程，因此无法访问组件this中的对象\n- 无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理\n- 无状态组件只能访问传入的props，同样的props会得到同样的渲染结果\n\n\n\n当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来\n代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。\n第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同\n```\n// helloWorld.jsx\nimport React, {Component} from 'react';\nclass HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.props);\n        console.log(this.props.name);\n    }\n\n    render() {\n        return (\n            <div onClick={this.clickHander}>{ this.props.name } say: Hello World!</div>\n        )\n    }\n}\nexport default HelloWorld;\n```\n\n## 组件之间的交互\n#### 父组件与子组件之间的交互\n1. 父组件修改子组件，只需要修改传入的props属性\n2. 子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行\n子组件与子组件之间的交互\n3. 通过影响共同的父组件来进行交互\n\n\n\n```\nstate = {\n    switch: 0,\n    name: this.props.name1\n}\nclickHander = () => {\n    const {name1, name2} = this.props;\n    if (this.state.switch === 0) {\n        this.setState({\n            switch: 1,\n            name: name2\n        })\n    } else {\n        this.setState({\n            switch: 0,\n            name: name1\n        })\n    }\n};\nrender() {\n    return (\n        <div onClick={this.clickHander}>hello world !{this.state.name}</div>\n    )\n}\n```\n\n先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。\n\nstate = {} // 等同于ES5构造函数中的this.state = {}\n在对象中，我们可以通过this.state的方式来访问state中所存储的属性\nsetState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变\nreact赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了\n而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行\n// 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: 'Jason'})// 然后立即查看它的值console.log(this.state.name) // 仍然为Tom，不会立即改变\n\n### refs\nreact组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样\n```\n// 当然可能命名会是其他的，大概表达一个意思，不深究哈\n{\n    nodeName: 'div',\n    className: 'hello-world',\n    style: {},\n    parentNodes: 'root',\n    childrenNodes: []\n    ...\n}\n```\n\n而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的\n```\nimport React, { Component } from 'react';\nclass HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.refs)\n    } \n    render () {\n        return (\n            <div className=\"container\" onClick={this.clickHander}>\n                <div ref=\"hello\" className=\"hello\">Hello</div>\n                <div ref=\"world\" className=\"world\">World</div>\n            </div>\n        )\n    }\n}\nexport default HelloWorld;\n```\n为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替\n我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。\n当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。\n```\n// src/helloWorld.jsx\nimport React, { Component } from 'react';class HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.refs)\n    } refCallback = (elem) => {\n        console.log(elem);\n    } render () {\n        return (\n            <div className=\"container\" onClick={this.clickHander}>\n                <div ref=\"hello\" className=\"hello\">Hello</div>\n                <div ref={this.refCallback} className=\"world\">World</div>\n            </div>\n        )\n    }\n}export default HelloWorld;\n```\n\n\n### 组件生命周期\n件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数\n\n##### react组件有三种状态：\n- Mounted：已经插入真实DOM\n- Updating：正在被重新渲染\n- Unmounted：已移出真实DOM\n- \n##### 每个状态的处理函数\n- will：函数在进入状态之前调用\n- did：函数在进入状态之后调用\n\n##### 组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\n  - componentWillMount 在首次渲染完成之前，此时可修改组件的state\n  - componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM\n\n##### 组件属性(我们前面提到的props与state)更新的前后时刻\n  - componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state\n  - componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素\n\n###### 组件取消挂载之前(取消之后就没必要提供钩子函数了)\n`componentWillUnmount`\n\n###### 两个特殊的处理函数\n  - `componentWillReceiveProps(object nextProps)`：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变->然后componentWillReceiveProps去判断是否需要重新渲染(`shouldComponentUpdate`)->如果不需要则继续running->如果需要则执行`componentWillUpdate`->渲染DOM树之后执行`componentDidUpdate`->进入running\n  - `shouldComponentUpdate(nextProps, nextState)`(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变->判断是否需要重新渲染新的props和state(`shouldComponentUpdate`) -> 根据判断决定执行render过程还是继续·保持running状态\n\n###### 三个统一调用的方法,用于组件初始化，获取默认属性和状态\n  - getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享\n  - getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props\n  - render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出\n\n###### 已挂载的方法\n  - component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候\n\n\n\n>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。\n\n\n![image](http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg)\n\n## PropTypes\n```\nimport PropTypes from 'prop-types';\n\nMyComponent.propTypes = {\n  // You can declare that a prop is a specific JS primitive. By default, these\n  // are all optional.\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // Anything that can be rendered: numbers, strings, elements or an array\n  // (or fragment) containing these types.\n  optionalNode: PropTypes.node,\n\n  // A React element.\n  optionalElement: PropTypes.element,\n\n  // You can also declare that a prop is an instance of a class. This uses\n  // JS's instanceof operator.\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // You can ensure that your prop is limited to specific values by treating\n  // it as an enum.\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // An object that could be one of many types\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // An array of a certain type\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // An object with property values of a certain type\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // An object taking on a particular shape\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n\n  // You can chain any of the above with `isRequired` to make sure a warning\n  // is shown if the prop isn't provided.\n  requiredFunc: PropTypes.func.isRequired,\n\n  // A value of any data type\n  requiredAny: PropTypes.any.isRequired,\n\n  // You can also specify a custom validator. It should return an Error\n  // object if the validation fails. Don't `console.warn` or throw, as this\n  // won't work inside `oneOfType`.\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  },\n\n  // You can also supply a custom validator to `arrayOf` and `objectOf`.\n  // It should return an Error object if the validation fails. The validator\n  // will be called for each key in the array or object. The first two\n  // arguments of the validator are the array or object itself, and the\n  // current item's key.\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        'Invalid prop `' + propFullName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  })\n};\n```\n\n\t","slug":"react基础2","published":1,"updated":"2023-01-11T02:56:11.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcr2w8r200050fh0ut7uk3wm","content":"<a id=\"more\"></a>\n<p><a href=\"https://reactjs.org/docs/hello-world.html\" target=\"_blank\" rel=\"noopener\">react官网</a></p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><h4 id=\"1-无状态组件\"><a href=\"#1-无状态组件\" class=\"headerlink\" title=\"1. 无状态组件\"></a>1. 无状态组件</h4><ul>\n<li>在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。</li>\n<li>无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。</li>\n<li>无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &quot;react&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">//创建方式一,相当于es5的函数声明的方式创建</span><br><span class=\"line\"> function NoState (props) &#123;</span><br><span class=\"line\">     return (</span><br><span class=\"line\">         &lt;div&gt;this is NoState Component&lt;/div&gt;</span><br><span class=\"line\">     )</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建方式二,相当于es5的函数表达式的方式创建</span><br><span class=\"line\">const NoState = (props) =&gt; &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;div&gt;this is Nostate Component&lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default NoState</span><br></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li>无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。</li>\n<li>无状态组件没有实例化得过程，因此无法访问组件this中的对象</li>\n<li>无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理</li>\n<li>无状态组件只能访问传入的props，同样的props会得到同样的渲染结果</li>\n</ul>\n<p>当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来<br>代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。<br>第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// helloWorld.jsx</span><br><span class=\"line\">import React, &#123;Component&#125; from &apos;react&apos;;</span><br><span class=\"line\">class HelloWorld extends Component &#123;</span><br><span class=\"line\">    clickHander = () =&gt; &#123;</span><br><span class=\"line\">        console.log(this.props);</span><br><span class=\"line\">        console.log(this.props.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div onClick=&#123;this.clickHander&#125;&gt;&#123; this.props.name &#125; say: Hello World!&lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default HelloWorld;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"组件之间的交互\"><a href=\"#组件之间的交互\" class=\"headerlink\" title=\"组件之间的交互\"></a>组件之间的交互</h2><h4 id=\"父组件与子组件之间的交互\"><a href=\"#父组件与子组件之间的交互\" class=\"headerlink\" title=\"父组件与子组件之间的交互\"></a>父组件与子组件之间的交互</h4><ol>\n<li>父组件修改子组件，只需要修改传入的props属性</li>\n<li>子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行<br>子组件与子组件之间的交互</li>\n<li>通过影响共同的父组件来进行交互</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state = &#123;</span><br><span class=\"line\">    switch: 0,</span><br><span class=\"line\">    name: this.props.name1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">clickHander = () =&gt; &#123;</span><br><span class=\"line\">    const &#123;name1, name2&#125; = this.props;</span><br><span class=\"line\">    if (this.state.switch === 0) &#123;</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">            switch: 1,</span><br><span class=\"line\">            name: name2</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">            switch: 0,</span><br><span class=\"line\">            name: name1</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;div onClick=&#123;this.clickHander&#125;&gt;hello world !&#123;this.state.name&#125;&lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。</p>\n<p>state = {} // 等同于ES5构造函数中的this.state = {}<br>在对象中，我们可以通过this.state的方式来访问state中所存储的属性<br>setState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变<br>react赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了<br>而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行<br>// 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: ‘Jason’})// 然后立即查看它的值console.log(this.state.name) // 仍然为Tom，不会立即改变</p>\n<h3 id=\"refs\"><a href=\"#refs\" class=\"headerlink\" title=\"refs\"></a>refs</h3><p>react组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当然可能命名会是其他的，大概表达一个意思，不深究哈</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    nodeName: &apos;div&apos;,</span><br><span class=\"line\">    className: &apos;hello-world&apos;,</span><br><span class=\"line\">    style: &#123;&#125;,</span><br><span class=\"line\">    parentNodes: &apos;root&apos;,</span><br><span class=\"line\">    childrenNodes: []</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">class HelloWorld extends Component &#123;</span><br><span class=\"line\">    clickHander = () =&gt; &#123;</span><br><span class=\"line\">        console.log(this.refs)</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    render () &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div className=&quot;container&quot; onClick=&#123;this.clickHander&#125;&gt;</span><br><span class=\"line\">                &lt;div ref=&quot;hello&quot; className=&quot;hello&quot;&gt;Hello&lt;/div&gt;</span><br><span class=\"line\">                &lt;div ref=&quot;world&quot; className=&quot;world&quot;&gt;World&lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default HelloWorld;</span><br></pre></td></tr></table></figure></p>\n<p>为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替<br>我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。<br>当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/helloWorld.jsx</span><br><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;class HelloWorld extends Component &#123;</span><br><span class=\"line\">    clickHander = () =&gt; &#123;</span><br><span class=\"line\">        console.log(this.refs)</span><br><span class=\"line\">    &#125; refCallback = (elem) =&gt; &#123;</span><br><span class=\"line\">        console.log(elem);</span><br><span class=\"line\">    &#125; render () &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div className=&quot;container&quot; onClick=&#123;this.clickHander&#125;&gt;</span><br><span class=\"line\">                &lt;div ref=&quot;hello&quot; className=&quot;hello&quot;&gt;Hello&lt;/div&gt;</span><br><span class=\"line\">                &lt;div ref=&#123;this.refCallback&#125; className=&quot;world&quot;&gt;World&lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;export default HelloWorld;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"组件生命周期\"></a>组件生命周期</h3><p>件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数</p>\n<h5 id=\"react组件有三种状态：\"><a href=\"#react组件有三种状态：\" class=\"headerlink\" title=\"react组件有三种状态：\"></a>react组件有三种状态：</h5><ul>\n<li>Mounted：已经插入真实DOM</li>\n<li>Updating：正在被重新渲染</li>\n<li>Unmounted：已移出真实DOM</li>\n<li><h5 id=\"每个状态的处理函数\"><a href=\"#每个状态的处理函数\" class=\"headerlink\" title=\"每个状态的处理函数\"></a>每个状态的处理函数</h5></li>\n<li>will：函数在进入状态之前调用</li>\n<li>did：函数在进入状态之后调用</li>\n</ul>\n<h5 id=\"组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\"><a href=\"#组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\" class=\"headerlink\" title=\"组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\"></a>组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中</h5><ul>\n<li>componentWillMount 在首次渲染完成之前，此时可修改组件的state</li>\n<li>componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM</li>\n</ul>\n<h5 id=\"组件属性-我们前面提到的props与state-更新的前后时刻\"><a href=\"#组件属性-我们前面提到的props与state-更新的前后时刻\" class=\"headerlink\" title=\"组件属性(我们前面提到的props与state)更新的前后时刻\"></a>组件属性(我们前面提到的props与state)更新的前后时刻</h5><ul>\n<li>componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state</li>\n<li>componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素</li>\n</ul>\n<h6 id=\"组件取消挂载之前-取消之后就没必要提供钩子函数了\"><a href=\"#组件取消挂载之前-取消之后就没必要提供钩子函数了\" class=\"headerlink\" title=\"组件取消挂载之前(取消之后就没必要提供钩子函数了)\"></a>组件取消挂载之前(取消之后就没必要提供钩子函数了)</h6><p><code>componentWillUnmount</code></p>\n<h6 id=\"两个特殊的处理函数\"><a href=\"#两个特殊的处理函数\" class=\"headerlink\" title=\"两个特殊的处理函数\"></a>两个特殊的处理函数</h6><ul>\n<li><code>componentWillReceiveProps(object nextProps)</code>：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变-&gt;然后componentWillReceiveProps去判断是否需要重新渲染(<code>shouldComponentUpdate</code>)-&gt;如果不需要则继续running-&gt;如果需要则执行<code>componentWillUpdate</code>-&gt;渲染DOM树之后执行<code>componentDidUpdate</code>-&gt;进入running</li>\n<li><code>shouldComponentUpdate(nextProps, nextState)</code>(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变-&gt;判断是否需要重新渲染新的props和state(<code>shouldComponentUpdate</code>) -&gt; 根据判断决定执行render过程还是继续·保持running状态</li>\n</ul>\n<h6 id=\"三个统一调用的方法-用于组件初始化，获取默认属性和状态\"><a href=\"#三个统一调用的方法-用于组件初始化，获取默认属性和状态\" class=\"headerlink\" title=\"三个统一调用的方法,用于组件初始化，获取默认属性和状态\"></a>三个统一调用的方法,用于组件初始化，获取默认属性和状态</h6><ul>\n<li>getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享</li>\n<li>getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props</li>\n<li>render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出</li>\n</ul>\n<h6 id=\"已挂载的方法\"><a href=\"#已挂载的方法\" class=\"headerlink\" title=\"已挂载的方法\"></a>已挂载的方法</h6><ul>\n<li>component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候</li>\n</ul>\n<blockquote>\n<p>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。</p>\n</blockquote>\n<p><img src=\"http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg\" alt=\"image\"></p>\n<h2 id=\"PropTypes\"><a href=\"#PropTypes\" class=\"headerlink\" title=\"PropTypes\"></a>PropTypes</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import PropTypes from &apos;prop-types&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">MyComponent.propTypes = &#123;</span><br><span class=\"line\">  // You can declare that a prop is a specific JS primitive. By default, these</span><br><span class=\"line\">  // are all optional.</span><br><span class=\"line\">  optionalArray: PropTypes.array,</span><br><span class=\"line\">  optionalBool: PropTypes.bool,</span><br><span class=\"line\">  optionalFunc: PropTypes.func,</span><br><span class=\"line\">  optionalNumber: PropTypes.number,</span><br><span class=\"line\">  optionalObject: PropTypes.object,</span><br><span class=\"line\">  optionalString: PropTypes.string,</span><br><span class=\"line\">  optionalSymbol: PropTypes.symbol,</span><br><span class=\"line\"></span><br><span class=\"line\">  // Anything that can be rendered: numbers, strings, elements or an array</span><br><span class=\"line\">  // (or fragment) containing these types.</span><br><span class=\"line\">  optionalNode: PropTypes.node,</span><br><span class=\"line\"></span><br><span class=\"line\">  // A React element.</span><br><span class=\"line\">  optionalElement: PropTypes.element,</span><br><span class=\"line\"></span><br><span class=\"line\">  // You can also declare that a prop is an instance of a class. This uses</span><br><span class=\"line\">  // JS&apos;s instanceof operator.</span><br><span class=\"line\">  optionalMessage: PropTypes.instanceOf(Message),</span><br><span class=\"line\"></span><br><span class=\"line\">  // You can ensure that your prop is limited to specific values by treating</span><br><span class=\"line\">  // it as an enum.</span><br><span class=\"line\">  optionalEnum: PropTypes.oneOf([&apos;News&apos;, &apos;Photos&apos;]),</span><br><span class=\"line\"></span><br><span class=\"line\">  // An object that could be one of many types</span><br><span class=\"line\">  optionalUnion: PropTypes.oneOfType([</span><br><span class=\"line\">    PropTypes.string,</span><br><span class=\"line\">    PropTypes.number,</span><br><span class=\"line\">    PropTypes.instanceOf(Message)</span><br><span class=\"line\">  ]),</span><br><span class=\"line\"></span><br><span class=\"line\">  // An array of a certain type</span><br><span class=\"line\">  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),</span><br><span class=\"line\"></span><br><span class=\"line\">  // An object with property values of a certain type</span><br><span class=\"line\">  optionalObjectOf: PropTypes.objectOf(PropTypes.number),</span><br><span class=\"line\"></span><br><span class=\"line\">  // An object taking on a particular shape</span><br><span class=\"line\">  optionalObjectWithShape: PropTypes.shape(&#123;</span><br><span class=\"line\">    color: PropTypes.string,</span><br><span class=\"line\">    fontSize: PropTypes.number</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  // You can chain any of the above with `isRequired` to make sure a warning</span><br><span class=\"line\">  // is shown if the prop isn&apos;t provided.</span><br><span class=\"line\">  requiredFunc: PropTypes.func.isRequired,</span><br><span class=\"line\"></span><br><span class=\"line\">  // A value of any data type</span><br><span class=\"line\">  requiredAny: PropTypes.any.isRequired,</span><br><span class=\"line\"></span><br><span class=\"line\">  // You can also specify a custom validator. It should return an Error</span><br><span class=\"line\">  // object if the validation fails. Don&apos;t `console.warn` or throw, as this</span><br><span class=\"line\">  // won&apos;t work inside `oneOfType`.</span><br><span class=\"line\">  customProp: function(props, propName, componentName) &#123;</span><br><span class=\"line\">    if (!/matchme/.test(props[propName])) &#123;</span><br><span class=\"line\">      return new Error(</span><br><span class=\"line\">        &apos;Invalid prop `&apos; + propName + &apos;` supplied to&apos; +</span><br><span class=\"line\">        &apos; `&apos; + componentName + &apos;`. Validation failed.&apos;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  // You can also supply a custom validator to `arrayOf` and `objectOf`.</span><br><span class=\"line\">  // It should return an Error object if the validation fails. The validator</span><br><span class=\"line\">  // will be called for each key in the array or object. The first two</span><br><span class=\"line\">  // arguments of the validator are the array or object itself, and the</span><br><span class=\"line\">  // current item&apos;s key.</span><br><span class=\"line\">  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) &#123;</span><br><span class=\"line\">    if (!/matchme/.test(propValue[key])) &#123;</span><br><span class=\"line\">      return new Error(</span><br><span class=\"line\">        &apos;Invalid prop `&apos; + propFullName + &apos;` supplied to&apos; +</span><br><span class=\"line\">        &apos; `&apos; + componentName + &apos;`. Validation failed.&apos;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://reactjs.org/docs/hello-world.html\" target=\"_blank\" rel=\"noopener\">react官网</a></p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><h4 id=\"1-无状态组件\"><a href=\"#1-无状态组件\" class=\"headerlink\" title=\"1. 无状态组件\"></a>1. 无状态组件</h4><ul>\n<li>在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。</li>\n<li>无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。</li>\n<li>无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &quot;react&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">//创建方式一,相当于es5的函数声明的方式创建</span><br><span class=\"line\"> function NoState (props) &#123;</span><br><span class=\"line\">     return (</span><br><span class=\"line\">         &lt;div&gt;this is NoState Component&lt;/div&gt;</span><br><span class=\"line\">     )</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建方式二,相当于es5的函数表达式的方式创建</span><br><span class=\"line\">const NoState = (props) =&gt; &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;div&gt;this is Nostate Component&lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default NoState</span><br></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li>无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。</li>\n<li>无状态组件没有实例化得过程，因此无法访问组件this中的对象</li>\n<li>无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理</li>\n<li>无状态组件只能访问传入的props，同样的props会得到同样的渲染结果</li>\n</ul>\n<p>当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来<br>代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。<br>第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// helloWorld.jsx</span><br><span class=\"line\">import React, &#123;Component&#125; from &apos;react&apos;;</span><br><span class=\"line\">class HelloWorld extends Component &#123;</span><br><span class=\"line\">    clickHander = () =&gt; &#123;</span><br><span class=\"line\">        console.log(this.props);</span><br><span class=\"line\">        console.log(this.props.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div onClick=&#123;this.clickHander&#125;&gt;&#123; this.props.name &#125; say: Hello World!&lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default HelloWorld;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"组件之间的交互\"><a href=\"#组件之间的交互\" class=\"headerlink\" title=\"组件之间的交互\"></a>组件之间的交互</h2><h4 id=\"父组件与子组件之间的交互\"><a href=\"#父组件与子组件之间的交互\" class=\"headerlink\" title=\"父组件与子组件之间的交互\"></a>父组件与子组件之间的交互</h4><ol>\n<li>父组件修改子组件，只需要修改传入的props属性</li>\n<li>子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行<br>子组件与子组件之间的交互</li>\n<li>通过影响共同的父组件来进行交互</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state = &#123;</span><br><span class=\"line\">    switch: 0,</span><br><span class=\"line\">    name: this.props.name1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">clickHander = () =&gt; &#123;</span><br><span class=\"line\">    const &#123;name1, name2&#125; = this.props;</span><br><span class=\"line\">    if (this.state.switch === 0) &#123;</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">            switch: 1,</span><br><span class=\"line\">            name: name2</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">            switch: 0,</span><br><span class=\"line\">            name: name1</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;div onClick=&#123;this.clickHander&#125;&gt;hello world !&#123;this.state.name&#125;&lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。</p>\n<p>state = {} // 等同于ES5构造函数中的this.state = {}<br>在对象中，我们可以通过this.state的方式来访问state中所存储的属性<br>setState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变<br>react赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了<br>而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行<br>// 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: ‘Jason’})// 然后立即查看它的值console.log(this.state.name) // 仍然为Tom，不会立即改变</p>\n<h3 id=\"refs\"><a href=\"#refs\" class=\"headerlink\" title=\"refs\"></a>refs</h3><p>react组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当然可能命名会是其他的，大概表达一个意思，不深究哈</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    nodeName: &apos;div&apos;,</span><br><span class=\"line\">    className: &apos;hello-world&apos;,</span><br><span class=\"line\">    style: &#123;&#125;,</span><br><span class=\"line\">    parentNodes: &apos;root&apos;,</span><br><span class=\"line\">    childrenNodes: []</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">class HelloWorld extends Component &#123;</span><br><span class=\"line\">    clickHander = () =&gt; &#123;</span><br><span class=\"line\">        console.log(this.refs)</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    render () &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div className=&quot;container&quot; onClick=&#123;this.clickHander&#125;&gt;</span><br><span class=\"line\">                &lt;div ref=&quot;hello&quot; className=&quot;hello&quot;&gt;Hello&lt;/div&gt;</span><br><span class=\"line\">                &lt;div ref=&quot;world&quot; className=&quot;world&quot;&gt;World&lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default HelloWorld;</span><br></pre></td></tr></table></figure></p>\n<p>为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替<br>我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。<br>当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/helloWorld.jsx</span><br><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;class HelloWorld extends Component &#123;</span><br><span class=\"line\">    clickHander = () =&gt; &#123;</span><br><span class=\"line\">        console.log(this.refs)</span><br><span class=\"line\">    &#125; refCallback = (elem) =&gt; &#123;</span><br><span class=\"line\">        console.log(elem);</span><br><span class=\"line\">    &#125; render () &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div className=&quot;container&quot; onClick=&#123;this.clickHander&#125;&gt;</span><br><span class=\"line\">                &lt;div ref=&quot;hello&quot; className=&quot;hello&quot;&gt;Hello&lt;/div&gt;</span><br><span class=\"line\">                &lt;div ref=&#123;this.refCallback&#125; className=&quot;world&quot;&gt;World&lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;export default HelloWorld;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"组件生命周期\"></a>组件生命周期</h3><p>件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数</p>\n<h5 id=\"react组件有三种状态：\"><a href=\"#react组件有三种状态：\" class=\"headerlink\" title=\"react组件有三种状态：\"></a>react组件有三种状态：</h5><ul>\n<li>Mounted：已经插入真实DOM</li>\n<li>Updating：正在被重新渲染</li>\n<li>Unmounted：已移出真实DOM</li>\n<li><h5 id=\"每个状态的处理函数\"><a href=\"#每个状态的处理函数\" class=\"headerlink\" title=\"每个状态的处理函数\"></a>每个状态的处理函数</h5></li>\n<li>will：函数在进入状态之前调用</li>\n<li>did：函数在进入状态之后调用</li>\n</ul>\n<h5 id=\"组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\"><a href=\"#组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\" class=\"headerlink\" title=\"组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\"></a>组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中</h5><ul>\n<li>componentWillMount 在首次渲染完成之前，此时可修改组件的state</li>\n<li>componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM</li>\n</ul>\n<h5 id=\"组件属性-我们前面提到的props与state-更新的前后时刻\"><a href=\"#组件属性-我们前面提到的props与state-更新的前后时刻\" class=\"headerlink\" title=\"组件属性(我们前面提到的props与state)更新的前后时刻\"></a>组件属性(我们前面提到的props与state)更新的前后时刻</h5><ul>\n<li>componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state</li>\n<li>componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素</li>\n</ul>\n<h6 id=\"组件取消挂载之前-取消之后就没必要提供钩子函数了\"><a href=\"#组件取消挂载之前-取消之后就没必要提供钩子函数了\" class=\"headerlink\" title=\"组件取消挂载之前(取消之后就没必要提供钩子函数了)\"></a>组件取消挂载之前(取消之后就没必要提供钩子函数了)</h6><p><code>componentWillUnmount</code></p>\n<h6 id=\"两个特殊的处理函数\"><a href=\"#两个特殊的处理函数\" class=\"headerlink\" title=\"两个特殊的处理函数\"></a>两个特殊的处理函数</h6><ul>\n<li><code>componentWillReceiveProps(object nextProps)</code>：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变-&gt;然后componentWillReceiveProps去判断是否需要重新渲染(<code>shouldComponentUpdate</code>)-&gt;如果不需要则继续running-&gt;如果需要则执行<code>componentWillUpdate</code>-&gt;渲染DOM树之后执行<code>componentDidUpdate</code>-&gt;进入running</li>\n<li><code>shouldComponentUpdate(nextProps, nextState)</code>(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变-&gt;判断是否需要重新渲染新的props和state(<code>shouldComponentUpdate</code>) -&gt; 根据判断决定执行render过程还是继续·保持running状态</li>\n</ul>\n<h6 id=\"三个统一调用的方法-用于组件初始化，获取默认属性和状态\"><a href=\"#三个统一调用的方法-用于组件初始化，获取默认属性和状态\" class=\"headerlink\" title=\"三个统一调用的方法,用于组件初始化，获取默认属性和状态\"></a>三个统一调用的方法,用于组件初始化，获取默认属性和状态</h6><ul>\n<li>getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享</li>\n<li>getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props</li>\n<li>render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出</li>\n</ul>\n<h6 id=\"已挂载的方法\"><a href=\"#已挂载的方法\" class=\"headerlink\" title=\"已挂载的方法\"></a>已挂载的方法</h6><ul>\n<li>component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候</li>\n</ul>\n<blockquote>\n<p>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。</p>\n</blockquote>\n<p><img src=\"http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg\" alt=\"image\"></p>\n<h2 id=\"PropTypes\"><a href=\"#PropTypes\" class=\"headerlink\" title=\"PropTypes\"></a>PropTypes</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import PropTypes from &apos;prop-types&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">MyComponent.propTypes = &#123;</span><br><span class=\"line\">  // You can declare that a prop is a specific JS primitive. By default, these</span><br><span class=\"line\">  // are all optional.</span><br><span class=\"line\">  optionalArray: PropTypes.array,</span><br><span class=\"line\">  optionalBool: PropTypes.bool,</span><br><span class=\"line\">  optionalFunc: PropTypes.func,</span><br><span class=\"line\">  optionalNumber: PropTypes.number,</span><br><span class=\"line\">  optionalObject: PropTypes.object,</span><br><span class=\"line\">  optionalString: PropTypes.string,</span><br><span class=\"line\">  optionalSymbol: PropTypes.symbol,</span><br><span class=\"line\"></span><br><span class=\"line\">  // Anything that can be rendered: numbers, strings, elements or an array</span><br><span class=\"line\">  // (or fragment) containing these types.</span><br><span class=\"line\">  optionalNode: PropTypes.node,</span><br><span class=\"line\"></span><br><span class=\"line\">  // A React element.</span><br><span class=\"line\">  optionalElement: PropTypes.element,</span><br><span class=\"line\"></span><br><span class=\"line\">  // You can also declare that a prop is an instance of a class. This uses</span><br><span class=\"line\">  // JS&apos;s instanceof operator.</span><br><span class=\"line\">  optionalMessage: PropTypes.instanceOf(Message),</span><br><span class=\"line\"></span><br><span class=\"line\">  // You can ensure that your prop is limited to specific values by treating</span><br><span class=\"line\">  // it as an enum.</span><br><span class=\"line\">  optionalEnum: PropTypes.oneOf([&apos;News&apos;, &apos;Photos&apos;]),</span><br><span class=\"line\"></span><br><span class=\"line\">  // An object that could be one of many types</span><br><span class=\"line\">  optionalUnion: PropTypes.oneOfType([</span><br><span class=\"line\">    PropTypes.string,</span><br><span class=\"line\">    PropTypes.number,</span><br><span class=\"line\">    PropTypes.instanceOf(Message)</span><br><span class=\"line\">  ]),</span><br><span class=\"line\"></span><br><span class=\"line\">  // An array of a certain type</span><br><span class=\"line\">  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),</span><br><span class=\"line\"></span><br><span class=\"line\">  // An object with property values of a certain type</span><br><span class=\"line\">  optionalObjectOf: PropTypes.objectOf(PropTypes.number),</span><br><span class=\"line\"></span><br><span class=\"line\">  // An object taking on a particular shape</span><br><span class=\"line\">  optionalObjectWithShape: PropTypes.shape(&#123;</span><br><span class=\"line\">    color: PropTypes.string,</span><br><span class=\"line\">    fontSize: PropTypes.number</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  // You can chain any of the above with `isRequired` to make sure a warning</span><br><span class=\"line\">  // is shown if the prop isn&apos;t provided.</span><br><span class=\"line\">  requiredFunc: PropTypes.func.isRequired,</span><br><span class=\"line\"></span><br><span class=\"line\">  // A value of any data type</span><br><span class=\"line\">  requiredAny: PropTypes.any.isRequired,</span><br><span class=\"line\"></span><br><span class=\"line\">  // You can also specify a custom validator. It should return an Error</span><br><span class=\"line\">  // object if the validation fails. Don&apos;t `console.warn` or throw, as this</span><br><span class=\"line\">  // won&apos;t work inside `oneOfType`.</span><br><span class=\"line\">  customProp: function(props, propName, componentName) &#123;</span><br><span class=\"line\">    if (!/matchme/.test(props[propName])) &#123;</span><br><span class=\"line\">      return new Error(</span><br><span class=\"line\">        &apos;Invalid prop `&apos; + propName + &apos;` supplied to&apos; +</span><br><span class=\"line\">        &apos; `&apos; + componentName + &apos;`. Validation failed.&apos;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  // You can also supply a custom validator to `arrayOf` and `objectOf`.</span><br><span class=\"line\">  // It should return an Error object if the validation fails. The validator</span><br><span class=\"line\">  // will be called for each key in the array or object. The first two</span><br><span class=\"line\">  // arguments of the validator are the array or object itself, and the</span><br><span class=\"line\">  // current item&apos;s key.</span><br><span class=\"line\">  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) &#123;</span><br><span class=\"line\">    if (!/matchme/.test(propValue[key])) &#123;</span><br><span class=\"line\">      return new Error(</span><br><span class=\"line\">        &apos;Invalid prop `&apos; + propFullName + &apos;` supplied to&apos; +</span><br><span class=\"line\">        &apos; `&apos; + componentName + &apos;`. Validation failed.&apos;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"'react基础'","date":"2018-05-09T09:39:55.000Z","_content":"\n<!-- more -->\n\n[react官网](https://reactjs.org/docs/hello-world.html)\n\n## 组件\n#### 1. 无状态组件\n  - 在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。\n  - 无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。\n  - 无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。\n\n```\nimport React from \"react\";\n\n//创建方式一,相当于es5的函数声明的方式创建\n function NoState (props) {\n     return (\n         <div>this is NoState Component</div>\n     )\n }\n```\n\n```\n//创建方式二,相当于es5的函数表达式的方式创建\nconst NoState = (props) => {\n    return (\n        <div>this is Nostate Component</div>\n    )\n}\n\nexport default NoState\n```\n--------------------------------------------------------------------------------\n- 无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。\n- 无状态组件没有实例化得过程，因此无法访问组件this中的对象\n- 无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理\n- 无状态组件只能访问传入的props，同样的props会得到同样的渲染结果\n\n\n\n当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来\n代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。\n第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同\n```\n// helloWorld.jsx\nimport React, {Component} from 'react';\nclass HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.props);\n        console.log(this.props.name);\n    }\n\n    render() {\n        return (\n            <div onClick={this.clickHander}>{ this.props.name } say: Hello World!</div>\n        )\n    }\n}\nexport default HelloWorld;\n```\n\n\n## 组件之间的交互\n#### 父组件与子组件之间的交互\n1. 父组件修改子组件，只需要修改传入的props属性\n2. 子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行\n子组件与子组件之间的交互\n3. 通过影响共同的父组件来进行交互\n\n\n\n```\nstate = {\n    switch: 0,\n    name: this.props.name1\n}\nclickHander = () => {\n    const {name1, name2} = this.props;\n    if (this.state.switch === 0) {\n        this.setState({\n            switch: 1,\n            name: name2\n        })\n    } else {\n        this.setState({\n            switch: 0,\n            name: name1\n        })\n    }\n};\nrender() {\n    return (\n        <div onClick={this.clickHander}>hello world !{this.state.name}</div>\n    )\n}\n```\n\n先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。\n\nstate = {} // 等同于ES5构造函数中的this.state = {}\n在对象中，我们可以通过this.state的方式来访问state中所存储的属性\nsetState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变\nreact赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了\n而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行\n// 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: 'Jason'})// 然后立即查看它的值console.log(this.state.name) // 仍然为Tom，不会立即改变\n\n### refs\nreact组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样\n```\n// 当然可能命名会是其他的，大概表达一个意思，不深究哈\n{\n    nodeName: 'div',\n    className: 'hello-world',\n    style: {},\n    parentNodes: 'root',\n    childrenNodes: []\n    ...\n}\n```\n\n而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的\n```\nimport React, { Component } from 'react';\nclass HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.refs)\n    } \n    render () {\n        return (\n            <div className=\"container\" onClick={this.clickHander}>\n                <div ref=\"hello\" className=\"hello\">Hello</div>\n                <div ref=\"world\" className=\"world\">World</div>\n            </div>\n        )\n    }\n}\nexport default HelloWorld;\n```\n为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替\n我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。\n当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。\n```\n// src/helloWorld.jsx\nimport React, { Component } from 'react';class HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.refs)\n    } refCallback = (elem) => {\n        console.log(elem);\n    } render () {\n        return (\n            <div className=\"container\" onClick={this.clickHander}>\n                <div ref=\"hello\" className=\"hello\">Hello</div>\n                <div ref={this.refCallback} className=\"world\">World</div>\n            </div>\n        )\n    }\n}export default HelloWorld;\n```\n\n\n### 组件生命周期\n件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数\n\n##### react组件有三种状态：\n- Mounted：已经插入真实DOM\n- Updating：正在被重新渲染\n- Unmounted：已移出真实DOM\n- \n##### 每个状态的处理函数\n- will：函数在进入状态之前调用\n- did：函数在进入状态之后调用\n\n##### 组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\n  - componentWillMount 在首次渲染完成之前，此时可修改组件的state\n  - componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM\n\n##### 组件属性(我们前面提到的props与state)更新的前后时刻\n  - componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state\n  - componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素\n\n###### 组件取消挂载之前(取消之后就没必要提供钩子函数了)\n`componentWillUnmount`\n\n###### 两个特殊的处理函数\n  - `componentWillReceiveProps(object nextProps)`：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变->然后componentWillReceiveProps去判断是否需要重新渲染(`shouldComponentUpdate`)->如果不需要则继续running->如果需要则执行`componentWillUpdate`->渲染DOM树之后执行`componentDidUpdate`->进入running\n  - `shouldComponentUpdate(nextProps, nextState)`(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变->判断是否需要重新渲染新的props和state(`shouldComponentUpdate`) -> 根据判断决定执行render过程还是继续·保持running状态\n\n###### 三个统一调用的方法,用于组件初始化，获取默认属性和状态\n  - getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享\n  - getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props\n  - render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出\n\n###### 已挂载的方法\n  - component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候\n\n\n\n>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。\n\n\n![image](http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg)\n\n## PropTypes\n```\nimport PropTypes from 'prop-types';\n\nMyComponent.propTypes = {\n  // You can declare that a prop is a specific JS primitive. By default, these\n  // are all optional.\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // Anything that can be rendered: numbers, strings, elements or an array\n  // (or fragment) containing these types.\n  optionalNode: PropTypes.node,\n\n  // A React element.\n  optionalElement: PropTypes.element,\n\n  // You can also declare that a prop is an instance of a class. This uses\n  // JS's instanceof operator.\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // You can ensure that your prop is limited to specific values by treating\n  // it as an enum.\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // An object that could be one of many types\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // An array of a certain type\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // An object with property values of a certain type\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // An object taking on a particular shape\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n\n  // You can chain any of the above with `isRequired` to make sure a warning\n  // is shown if the prop isn't provided.\n  requiredFunc: PropTypes.func.isRequired,\n\n  // A value of any data type\n  requiredAny: PropTypes.any.isRequired,\n\n  // You can also specify a custom validator. It should return an Error\n  // object if the validation fails. Don't `console.warn` or throw, as this\n  // won't work inside `oneOfType`.\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  },\n\n  // You can also supply a custom validator to `arrayOf` and `objectOf`.\n  // It should return an Error object if the validation fails. The validator\n  // will be called for each key in the array or object. The first two\n  // arguments of the validator are the array or object itself, and the\n  // current item's key.\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        'Invalid prop `' + propFullName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  })\n};\n```\n\n\t","source":"_posts/react基础.md","raw":"---\ntitle: '''react基础'''\ndate: 2018-05-09 17:39:55\ntags: react\n---\n\n<!-- more -->\n\n[react官网](https://reactjs.org/docs/hello-world.html)\n\n## 组件\n#### 1. 无状态组件\n  - 在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。\n  - 无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。\n  - 无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。\n\n```\nimport React from \"react\";\n\n//创建方式一,相当于es5的函数声明的方式创建\n function NoState (props) {\n     return (\n         <div>this is NoState Component</div>\n     )\n }\n```\n\n```\n//创建方式二,相当于es5的函数表达式的方式创建\nconst NoState = (props) => {\n    return (\n        <div>this is Nostate Component</div>\n    )\n}\n\nexport default NoState\n```\n--------------------------------------------------------------------------------\n- 无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。\n- 无状态组件没有实例化得过程，因此无法访问组件this中的对象\n- 无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理\n- 无状态组件只能访问传入的props，同样的props会得到同样的渲染结果\n\n\n\n当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来\n代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。\n第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同\n```\n// helloWorld.jsx\nimport React, {Component} from 'react';\nclass HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.props);\n        console.log(this.props.name);\n    }\n\n    render() {\n        return (\n            <div onClick={this.clickHander}>{ this.props.name } say: Hello World!</div>\n        )\n    }\n}\nexport default HelloWorld;\n```\n\n\n## 组件之间的交互\n#### 父组件与子组件之间的交互\n1. 父组件修改子组件，只需要修改传入的props属性\n2. 子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行\n子组件与子组件之间的交互\n3. 通过影响共同的父组件来进行交互\n\n\n\n```\nstate = {\n    switch: 0,\n    name: this.props.name1\n}\nclickHander = () => {\n    const {name1, name2} = this.props;\n    if (this.state.switch === 0) {\n        this.setState({\n            switch: 1,\n            name: name2\n        })\n    } else {\n        this.setState({\n            switch: 0,\n            name: name1\n        })\n    }\n};\nrender() {\n    return (\n        <div onClick={this.clickHander}>hello world !{this.state.name}</div>\n    )\n}\n```\n\n先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。\n\nstate = {} // 等同于ES5构造函数中的this.state = {}\n在对象中，我们可以通过this.state的方式来访问state中所存储的属性\nsetState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变\nreact赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了\n而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行\n// 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: 'Jason'})// 然后立即查看它的值console.log(this.state.name) // 仍然为Tom，不会立即改变\n\n### refs\nreact组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样\n```\n// 当然可能命名会是其他的，大概表达一个意思，不深究哈\n{\n    nodeName: 'div',\n    className: 'hello-world',\n    style: {},\n    parentNodes: 'root',\n    childrenNodes: []\n    ...\n}\n```\n\n而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的\n```\nimport React, { Component } from 'react';\nclass HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.refs)\n    } \n    render () {\n        return (\n            <div className=\"container\" onClick={this.clickHander}>\n                <div ref=\"hello\" className=\"hello\">Hello</div>\n                <div ref=\"world\" className=\"world\">World</div>\n            </div>\n        )\n    }\n}\nexport default HelloWorld;\n```\n为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替\n我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。\n当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。\n```\n// src/helloWorld.jsx\nimport React, { Component } from 'react';class HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.refs)\n    } refCallback = (elem) => {\n        console.log(elem);\n    } render () {\n        return (\n            <div className=\"container\" onClick={this.clickHander}>\n                <div ref=\"hello\" className=\"hello\">Hello</div>\n                <div ref={this.refCallback} className=\"world\">World</div>\n            </div>\n        )\n    }\n}export default HelloWorld;\n```\n\n\n### 组件生命周期\n件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数\n\n##### react组件有三种状态：\n- Mounted：已经插入真实DOM\n- Updating：正在被重新渲染\n- Unmounted：已移出真实DOM\n- \n##### 每个状态的处理函数\n- will：函数在进入状态之前调用\n- did：函数在进入状态之后调用\n\n##### 组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\n  - componentWillMount 在首次渲染完成之前，此时可修改组件的state\n  - componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM\n\n##### 组件属性(我们前面提到的props与state)更新的前后时刻\n  - componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state\n  - componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素\n\n###### 组件取消挂载之前(取消之后就没必要提供钩子函数了)\n`componentWillUnmount`\n\n###### 两个特殊的处理函数\n  - `componentWillReceiveProps(object nextProps)`：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变->然后componentWillReceiveProps去判断是否需要重新渲染(`shouldComponentUpdate`)->如果不需要则继续running->如果需要则执行`componentWillUpdate`->渲染DOM树之后执行`componentDidUpdate`->进入running\n  - `shouldComponentUpdate(nextProps, nextState)`(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变->判断是否需要重新渲染新的props和state(`shouldComponentUpdate`) -> 根据判断决定执行render过程还是继续·保持running状态\n\n###### 三个统一调用的方法,用于组件初始化，获取默认属性和状态\n  - getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享\n  - getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props\n  - render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出\n\n###### 已挂载的方法\n  - component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候\n\n\n\n>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。\n\n\n![image](http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg)\n\n## PropTypes\n```\nimport PropTypes from 'prop-types';\n\nMyComponent.propTypes = {\n  // You can declare that a prop is a specific JS primitive. By default, these\n  // are all optional.\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // Anything that can be rendered: numbers, strings, elements or an array\n  // (or fragment) containing these types.\n  optionalNode: PropTypes.node,\n\n  // A React element.\n  optionalElement: PropTypes.element,\n\n  // You can also declare that a prop is an instance of a class. This uses\n  // JS's instanceof operator.\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // You can ensure that your prop is limited to specific values by treating\n  // it as an enum.\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // An object that could be one of many types\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // An array of a certain type\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // An object with property values of a certain type\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // An object taking on a particular shape\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n\n  // You can chain any of the above with `isRequired` to make sure a warning\n  // is shown if the prop isn't provided.\n  requiredFunc: PropTypes.func.isRequired,\n\n  // A value of any data type\n  requiredAny: PropTypes.any.isRequired,\n\n  // You can also specify a custom validator. It should return an Error\n  // object if the validation fails. Don't `console.warn` or throw, as this\n  // won't work inside `oneOfType`.\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  },\n\n  // You can also supply a custom validator to `arrayOf` and `objectOf`.\n  // It should return an Error object if the validation fails. The validator\n  // will be called for each key in the array or object. The first two\n  // arguments of the validator are the array or object itself, and the\n  // current item's key.\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        'Invalid prop `' + propFullName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  })\n};\n```\n\n\t","slug":"react基础","published":1,"updated":"2023-01-11T02:56:11.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcr2w8r600070fh0c8s8ymrr","content":"<a id=\"more\"></a>\n<p><a href=\"https://reactjs.org/docs/hello-world.html\" target=\"_blank\" rel=\"noopener\">react官网</a></p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><h4 id=\"1-无状态组件\"><a href=\"#1-无状态组件\" class=\"headerlink\" title=\"1. 无状态组件\"></a>1. 无状态组件</h4><ul>\n<li>在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。</li>\n<li>无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。</li>\n<li>无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &quot;react&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">//创建方式一,相当于es5的函数声明的方式创建</span><br><span class=\"line\"> function NoState (props) &#123;</span><br><span class=\"line\">     return (</span><br><span class=\"line\">         &lt;div&gt;this is NoState Component&lt;/div&gt;</span><br><span class=\"line\">     )</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建方式二,相当于es5的函数表达式的方式创建</span><br><span class=\"line\">const NoState = (props) =&gt; &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;div&gt;this is Nostate Component&lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default NoState</span><br></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li>无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。</li>\n<li>无状态组件没有实例化得过程，因此无法访问组件this中的对象</li>\n<li>无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理</li>\n<li>无状态组件只能访问传入的props，同样的props会得到同样的渲染结果</li>\n</ul>\n<p>当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来<br>代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。<br>第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// helloWorld.jsx</span><br><span class=\"line\">import React, &#123;Component&#125; from &apos;react&apos;;</span><br><span class=\"line\">class HelloWorld extends Component &#123;</span><br><span class=\"line\">    clickHander = () =&gt; &#123;</span><br><span class=\"line\">        console.log(this.props);</span><br><span class=\"line\">        console.log(this.props.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div onClick=&#123;this.clickHander&#125;&gt;&#123; this.props.name &#125; say: Hello World!&lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default HelloWorld;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"组件之间的交互\"><a href=\"#组件之间的交互\" class=\"headerlink\" title=\"组件之间的交互\"></a>组件之间的交互</h2><h4 id=\"父组件与子组件之间的交互\"><a href=\"#父组件与子组件之间的交互\" class=\"headerlink\" title=\"父组件与子组件之间的交互\"></a>父组件与子组件之间的交互</h4><ol>\n<li>父组件修改子组件，只需要修改传入的props属性</li>\n<li>子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行<br>子组件与子组件之间的交互</li>\n<li>通过影响共同的父组件来进行交互</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state = &#123;</span><br><span class=\"line\">    switch: 0,</span><br><span class=\"line\">    name: this.props.name1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">clickHander = () =&gt; &#123;</span><br><span class=\"line\">    const &#123;name1, name2&#125; = this.props;</span><br><span class=\"line\">    if (this.state.switch === 0) &#123;</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">            switch: 1,</span><br><span class=\"line\">            name: name2</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">            switch: 0,</span><br><span class=\"line\">            name: name1</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;div onClick=&#123;this.clickHander&#125;&gt;hello world !&#123;this.state.name&#125;&lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。</p>\n<p>state = {} // 等同于ES5构造函数中的this.state = {}<br>在对象中，我们可以通过this.state的方式来访问state中所存储的属性<br>setState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变<br>react赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了<br>而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行<br>// 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: ‘Jason’})// 然后立即查看它的值console.log(this.state.name) // 仍然为Tom，不会立即改变</p>\n<h3 id=\"refs\"><a href=\"#refs\" class=\"headerlink\" title=\"refs\"></a>refs</h3><p>react组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当然可能命名会是其他的，大概表达一个意思，不深究哈</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    nodeName: &apos;div&apos;,</span><br><span class=\"line\">    className: &apos;hello-world&apos;,</span><br><span class=\"line\">    style: &#123;&#125;,</span><br><span class=\"line\">    parentNodes: &apos;root&apos;,</span><br><span class=\"line\">    childrenNodes: []</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">class HelloWorld extends Component &#123;</span><br><span class=\"line\">    clickHander = () =&gt; &#123;</span><br><span class=\"line\">        console.log(this.refs)</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    render () &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div className=&quot;container&quot; onClick=&#123;this.clickHander&#125;&gt;</span><br><span class=\"line\">                &lt;div ref=&quot;hello&quot; className=&quot;hello&quot;&gt;Hello&lt;/div&gt;</span><br><span class=\"line\">                &lt;div ref=&quot;world&quot; className=&quot;world&quot;&gt;World&lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default HelloWorld;</span><br></pre></td></tr></table></figure></p>\n<p>为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替<br>我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。<br>当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/helloWorld.jsx</span><br><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;class HelloWorld extends Component &#123;</span><br><span class=\"line\">    clickHander = () =&gt; &#123;</span><br><span class=\"line\">        console.log(this.refs)</span><br><span class=\"line\">    &#125; refCallback = (elem) =&gt; &#123;</span><br><span class=\"line\">        console.log(elem);</span><br><span class=\"line\">    &#125; render () &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div className=&quot;container&quot; onClick=&#123;this.clickHander&#125;&gt;</span><br><span class=\"line\">                &lt;div ref=&quot;hello&quot; className=&quot;hello&quot;&gt;Hello&lt;/div&gt;</span><br><span class=\"line\">                &lt;div ref=&#123;this.refCallback&#125; className=&quot;world&quot;&gt;World&lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;export default HelloWorld;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"组件生命周期\"></a>组件生命周期</h3><p>件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数</p>\n<h5 id=\"react组件有三种状态：\"><a href=\"#react组件有三种状态：\" class=\"headerlink\" title=\"react组件有三种状态：\"></a>react组件有三种状态：</h5><ul>\n<li>Mounted：已经插入真实DOM</li>\n<li>Updating：正在被重新渲染</li>\n<li>Unmounted：已移出真实DOM</li>\n<li><h5 id=\"每个状态的处理函数\"><a href=\"#每个状态的处理函数\" class=\"headerlink\" title=\"每个状态的处理函数\"></a>每个状态的处理函数</h5></li>\n<li>will：函数在进入状态之前调用</li>\n<li>did：函数在进入状态之后调用</li>\n</ul>\n<h5 id=\"组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\"><a href=\"#组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\" class=\"headerlink\" title=\"组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\"></a>组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中</h5><ul>\n<li>componentWillMount 在首次渲染完成之前，此时可修改组件的state</li>\n<li>componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM</li>\n</ul>\n<h5 id=\"组件属性-我们前面提到的props与state-更新的前后时刻\"><a href=\"#组件属性-我们前面提到的props与state-更新的前后时刻\" class=\"headerlink\" title=\"组件属性(我们前面提到的props与state)更新的前后时刻\"></a>组件属性(我们前面提到的props与state)更新的前后时刻</h5><ul>\n<li>componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state</li>\n<li>componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素</li>\n</ul>\n<h6 id=\"组件取消挂载之前-取消之后就没必要提供钩子函数了\"><a href=\"#组件取消挂载之前-取消之后就没必要提供钩子函数了\" class=\"headerlink\" title=\"组件取消挂载之前(取消之后就没必要提供钩子函数了)\"></a>组件取消挂载之前(取消之后就没必要提供钩子函数了)</h6><p><code>componentWillUnmount</code></p>\n<h6 id=\"两个特殊的处理函数\"><a href=\"#两个特殊的处理函数\" class=\"headerlink\" title=\"两个特殊的处理函数\"></a>两个特殊的处理函数</h6><ul>\n<li><code>componentWillReceiveProps(object nextProps)</code>：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变-&gt;然后componentWillReceiveProps去判断是否需要重新渲染(<code>shouldComponentUpdate</code>)-&gt;如果不需要则继续running-&gt;如果需要则执行<code>componentWillUpdate</code>-&gt;渲染DOM树之后执行<code>componentDidUpdate</code>-&gt;进入running</li>\n<li><code>shouldComponentUpdate(nextProps, nextState)</code>(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变-&gt;判断是否需要重新渲染新的props和state(<code>shouldComponentUpdate</code>) -&gt; 根据判断决定执行render过程还是继续·保持running状态</li>\n</ul>\n<h6 id=\"三个统一调用的方法-用于组件初始化，获取默认属性和状态\"><a href=\"#三个统一调用的方法-用于组件初始化，获取默认属性和状态\" class=\"headerlink\" title=\"三个统一调用的方法,用于组件初始化，获取默认属性和状态\"></a>三个统一调用的方法,用于组件初始化，获取默认属性和状态</h6><ul>\n<li>getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享</li>\n<li>getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props</li>\n<li>render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出</li>\n</ul>\n<h6 id=\"已挂载的方法\"><a href=\"#已挂载的方法\" class=\"headerlink\" title=\"已挂载的方法\"></a>已挂载的方法</h6><ul>\n<li>component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候</li>\n</ul>\n<blockquote>\n<p>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。</p>\n</blockquote>\n<p><img src=\"http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg\" alt=\"image\"></p>\n<h2 id=\"PropTypes\"><a href=\"#PropTypes\" class=\"headerlink\" title=\"PropTypes\"></a>PropTypes</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import PropTypes from &apos;prop-types&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">MyComponent.propTypes = &#123;</span><br><span class=\"line\">  // You can declare that a prop is a specific JS primitive. By default, these</span><br><span class=\"line\">  // are all optional.</span><br><span class=\"line\">  optionalArray: PropTypes.array,</span><br><span class=\"line\">  optionalBool: PropTypes.bool,</span><br><span class=\"line\">  optionalFunc: PropTypes.func,</span><br><span class=\"line\">  optionalNumber: PropTypes.number,</span><br><span class=\"line\">  optionalObject: PropTypes.object,</span><br><span class=\"line\">  optionalString: PropTypes.string,</span><br><span class=\"line\">  optionalSymbol: PropTypes.symbol,</span><br><span class=\"line\"></span><br><span class=\"line\">  // Anything that can be rendered: numbers, strings, elements or an array</span><br><span class=\"line\">  // (or fragment) containing these types.</span><br><span class=\"line\">  optionalNode: PropTypes.node,</span><br><span class=\"line\"></span><br><span class=\"line\">  // A React element.</span><br><span class=\"line\">  optionalElement: PropTypes.element,</span><br><span class=\"line\"></span><br><span class=\"line\">  // You can also declare that a prop is an instance of a class. This uses</span><br><span class=\"line\">  // JS&apos;s instanceof operator.</span><br><span class=\"line\">  optionalMessage: PropTypes.instanceOf(Message),</span><br><span class=\"line\"></span><br><span class=\"line\">  // You can ensure that your prop is limited to specific values by treating</span><br><span class=\"line\">  // it as an enum.</span><br><span class=\"line\">  optionalEnum: PropTypes.oneOf([&apos;News&apos;, &apos;Photos&apos;]),</span><br><span class=\"line\"></span><br><span class=\"line\">  // An object that could be one of many types</span><br><span class=\"line\">  optionalUnion: PropTypes.oneOfType([</span><br><span class=\"line\">    PropTypes.string,</span><br><span class=\"line\">    PropTypes.number,</span><br><span class=\"line\">    PropTypes.instanceOf(Message)</span><br><span class=\"line\">  ]),</span><br><span class=\"line\"></span><br><span class=\"line\">  // An array of a certain type</span><br><span class=\"line\">  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),</span><br><span class=\"line\"></span><br><span class=\"line\">  // An object with property values of a certain type</span><br><span class=\"line\">  optionalObjectOf: PropTypes.objectOf(PropTypes.number),</span><br><span class=\"line\"></span><br><span class=\"line\">  // An object taking on a particular shape</span><br><span class=\"line\">  optionalObjectWithShape: PropTypes.shape(&#123;</span><br><span class=\"line\">    color: PropTypes.string,</span><br><span class=\"line\">    fontSize: PropTypes.number</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  // You can chain any of the above with `isRequired` to make sure a warning</span><br><span class=\"line\">  // is shown if the prop isn&apos;t provided.</span><br><span class=\"line\">  requiredFunc: PropTypes.func.isRequired,</span><br><span class=\"line\"></span><br><span class=\"line\">  // A value of any data type</span><br><span class=\"line\">  requiredAny: PropTypes.any.isRequired,</span><br><span class=\"line\"></span><br><span class=\"line\">  // You can also specify a custom validator. It should return an Error</span><br><span class=\"line\">  // object if the validation fails. Don&apos;t `console.warn` or throw, as this</span><br><span class=\"line\">  // won&apos;t work inside `oneOfType`.</span><br><span class=\"line\">  customProp: function(props, propName, componentName) &#123;</span><br><span class=\"line\">    if (!/matchme/.test(props[propName])) &#123;</span><br><span class=\"line\">      return new Error(</span><br><span class=\"line\">        &apos;Invalid prop `&apos; + propName + &apos;` supplied to&apos; +</span><br><span class=\"line\">        &apos; `&apos; + componentName + &apos;`. Validation failed.&apos;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  // You can also supply a custom validator to `arrayOf` and `objectOf`.</span><br><span class=\"line\">  // It should return an Error object if the validation fails. The validator</span><br><span class=\"line\">  // will be called for each key in the array or object. The first two</span><br><span class=\"line\">  // arguments of the validator are the array or object itself, and the</span><br><span class=\"line\">  // current item&apos;s key.</span><br><span class=\"line\">  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) &#123;</span><br><span class=\"line\">    if (!/matchme/.test(propValue[key])) &#123;</span><br><span class=\"line\">      return new Error(</span><br><span class=\"line\">        &apos;Invalid prop `&apos; + propFullName + &apos;` supplied to&apos; +</span><br><span class=\"line\">        &apos; `&apos; + componentName + &apos;`. Validation failed.&apos;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://reactjs.org/docs/hello-world.html\" target=\"_blank\" rel=\"noopener\">react官网</a></p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><h4 id=\"1-无状态组件\"><a href=\"#1-无状态组件\" class=\"headerlink\" title=\"1. 无状态组件\"></a>1. 无状态组件</h4><ul>\n<li>在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。</li>\n<li>无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。</li>\n<li>无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &quot;react&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">//创建方式一,相当于es5的函数声明的方式创建</span><br><span class=\"line\"> function NoState (props) &#123;</span><br><span class=\"line\">     return (</span><br><span class=\"line\">         &lt;div&gt;this is NoState Component&lt;/div&gt;</span><br><span class=\"line\">     )</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建方式二,相当于es5的函数表达式的方式创建</span><br><span class=\"line\">const NoState = (props) =&gt; &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;div&gt;this is Nostate Component&lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default NoState</span><br></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li>无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。</li>\n<li>无状态组件没有实例化得过程，因此无法访问组件this中的对象</li>\n<li>无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理</li>\n<li>无状态组件只能访问传入的props，同样的props会得到同样的渲染结果</li>\n</ul>\n<p>当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来<br>代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。<br>第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// helloWorld.jsx</span><br><span class=\"line\">import React, &#123;Component&#125; from &apos;react&apos;;</span><br><span class=\"line\">class HelloWorld extends Component &#123;</span><br><span class=\"line\">    clickHander = () =&gt; &#123;</span><br><span class=\"line\">        console.log(this.props);</span><br><span class=\"line\">        console.log(this.props.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div onClick=&#123;this.clickHander&#125;&gt;&#123; this.props.name &#125; say: Hello World!&lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default HelloWorld;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"组件之间的交互\"><a href=\"#组件之间的交互\" class=\"headerlink\" title=\"组件之间的交互\"></a>组件之间的交互</h2><h4 id=\"父组件与子组件之间的交互\"><a href=\"#父组件与子组件之间的交互\" class=\"headerlink\" title=\"父组件与子组件之间的交互\"></a>父组件与子组件之间的交互</h4><ol>\n<li>父组件修改子组件，只需要修改传入的props属性</li>\n<li>子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行<br>子组件与子组件之间的交互</li>\n<li>通过影响共同的父组件来进行交互</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state = &#123;</span><br><span class=\"line\">    switch: 0,</span><br><span class=\"line\">    name: this.props.name1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">clickHander = () =&gt; &#123;</span><br><span class=\"line\">    const &#123;name1, name2&#125; = this.props;</span><br><span class=\"line\">    if (this.state.switch === 0) &#123;</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">            switch: 1,</span><br><span class=\"line\">            name: name2</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">            switch: 0,</span><br><span class=\"line\">            name: name1</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;div onClick=&#123;this.clickHander&#125;&gt;hello world !&#123;this.state.name&#125;&lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。</p>\n<p>state = {} // 等同于ES5构造函数中的this.state = {}<br>在对象中，我们可以通过this.state的方式来访问state中所存储的属性<br>setState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变<br>react赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了<br>而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行<br>// 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: ‘Jason’})// 然后立即查看它的值console.log(this.state.name) // 仍然为Tom，不会立即改变</p>\n<h3 id=\"refs\"><a href=\"#refs\" class=\"headerlink\" title=\"refs\"></a>refs</h3><p>react组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当然可能命名会是其他的，大概表达一个意思，不深究哈</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    nodeName: &apos;div&apos;,</span><br><span class=\"line\">    className: &apos;hello-world&apos;,</span><br><span class=\"line\">    style: &#123;&#125;,</span><br><span class=\"line\">    parentNodes: &apos;root&apos;,</span><br><span class=\"line\">    childrenNodes: []</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">class HelloWorld extends Component &#123;</span><br><span class=\"line\">    clickHander = () =&gt; &#123;</span><br><span class=\"line\">        console.log(this.refs)</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    render () &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div className=&quot;container&quot; onClick=&#123;this.clickHander&#125;&gt;</span><br><span class=\"line\">                &lt;div ref=&quot;hello&quot; className=&quot;hello&quot;&gt;Hello&lt;/div&gt;</span><br><span class=\"line\">                &lt;div ref=&quot;world&quot; className=&quot;world&quot;&gt;World&lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default HelloWorld;</span><br></pre></td></tr></table></figure></p>\n<p>为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替<br>我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。<br>当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/helloWorld.jsx</span><br><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;class HelloWorld extends Component &#123;</span><br><span class=\"line\">    clickHander = () =&gt; &#123;</span><br><span class=\"line\">        console.log(this.refs)</span><br><span class=\"line\">    &#125; refCallback = (elem) =&gt; &#123;</span><br><span class=\"line\">        console.log(elem);</span><br><span class=\"line\">    &#125; render () &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div className=&quot;container&quot; onClick=&#123;this.clickHander&#125;&gt;</span><br><span class=\"line\">                &lt;div ref=&quot;hello&quot; className=&quot;hello&quot;&gt;Hello&lt;/div&gt;</span><br><span class=\"line\">                &lt;div ref=&#123;this.refCallback&#125; className=&quot;world&quot;&gt;World&lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;export default HelloWorld;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"组件生命周期\"></a>组件生命周期</h3><p>件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数</p>\n<h5 id=\"react组件有三种状态：\"><a href=\"#react组件有三种状态：\" class=\"headerlink\" title=\"react组件有三种状态：\"></a>react组件有三种状态：</h5><ul>\n<li>Mounted：已经插入真实DOM</li>\n<li>Updating：正在被重新渲染</li>\n<li>Unmounted：已移出真实DOM</li>\n<li><h5 id=\"每个状态的处理函数\"><a href=\"#每个状态的处理函数\" class=\"headerlink\" title=\"每个状态的处理函数\"></a>每个状态的处理函数</h5></li>\n<li>will：函数在进入状态之前调用</li>\n<li>did：函数在进入状态之后调用</li>\n</ul>\n<h5 id=\"组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\"><a href=\"#组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\" class=\"headerlink\" title=\"组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\"></a>组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中</h5><ul>\n<li>componentWillMount 在首次渲染完成之前，此时可修改组件的state</li>\n<li>componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM</li>\n</ul>\n<h5 id=\"组件属性-我们前面提到的props与state-更新的前后时刻\"><a href=\"#组件属性-我们前面提到的props与state-更新的前后时刻\" class=\"headerlink\" title=\"组件属性(我们前面提到的props与state)更新的前后时刻\"></a>组件属性(我们前面提到的props与state)更新的前后时刻</h5><ul>\n<li>componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state</li>\n<li>componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素</li>\n</ul>\n<h6 id=\"组件取消挂载之前-取消之后就没必要提供钩子函数了\"><a href=\"#组件取消挂载之前-取消之后就没必要提供钩子函数了\" class=\"headerlink\" title=\"组件取消挂载之前(取消之后就没必要提供钩子函数了)\"></a>组件取消挂载之前(取消之后就没必要提供钩子函数了)</h6><p><code>componentWillUnmount</code></p>\n<h6 id=\"两个特殊的处理函数\"><a href=\"#两个特殊的处理函数\" class=\"headerlink\" title=\"两个特殊的处理函数\"></a>两个特殊的处理函数</h6><ul>\n<li><code>componentWillReceiveProps(object nextProps)</code>：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变-&gt;然后componentWillReceiveProps去判断是否需要重新渲染(<code>shouldComponentUpdate</code>)-&gt;如果不需要则继续running-&gt;如果需要则执行<code>componentWillUpdate</code>-&gt;渲染DOM树之后执行<code>componentDidUpdate</code>-&gt;进入running</li>\n<li><code>shouldComponentUpdate(nextProps, nextState)</code>(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变-&gt;判断是否需要重新渲染新的props和state(<code>shouldComponentUpdate</code>) -&gt; 根据判断决定执行render过程还是继续·保持running状态</li>\n</ul>\n<h6 id=\"三个统一调用的方法-用于组件初始化，获取默认属性和状态\"><a href=\"#三个统一调用的方法-用于组件初始化，获取默认属性和状态\" class=\"headerlink\" title=\"三个统一调用的方法,用于组件初始化，获取默认属性和状态\"></a>三个统一调用的方法,用于组件初始化，获取默认属性和状态</h6><ul>\n<li>getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享</li>\n<li>getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props</li>\n<li>render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出</li>\n</ul>\n<h6 id=\"已挂载的方法\"><a href=\"#已挂载的方法\" class=\"headerlink\" title=\"已挂载的方法\"></a>已挂载的方法</h6><ul>\n<li>component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候</li>\n</ul>\n<blockquote>\n<p>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。</p>\n</blockquote>\n<p><img src=\"http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg\" alt=\"image\"></p>\n<h2 id=\"PropTypes\"><a href=\"#PropTypes\" class=\"headerlink\" title=\"PropTypes\"></a>PropTypes</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import PropTypes from &apos;prop-types&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">MyComponent.propTypes = &#123;</span><br><span class=\"line\">  // You can declare that a prop is a specific JS primitive. By default, these</span><br><span class=\"line\">  // are all optional.</span><br><span class=\"line\">  optionalArray: PropTypes.array,</span><br><span class=\"line\">  optionalBool: PropTypes.bool,</span><br><span class=\"line\">  optionalFunc: PropTypes.func,</span><br><span class=\"line\">  optionalNumber: PropTypes.number,</span><br><span class=\"line\">  optionalObject: PropTypes.object,</span><br><span class=\"line\">  optionalString: PropTypes.string,</span><br><span class=\"line\">  optionalSymbol: PropTypes.symbol,</span><br><span class=\"line\"></span><br><span class=\"line\">  // Anything that can be rendered: numbers, strings, elements or an array</span><br><span class=\"line\">  // (or fragment) containing these types.</span><br><span class=\"line\">  optionalNode: PropTypes.node,</span><br><span class=\"line\"></span><br><span class=\"line\">  // A React element.</span><br><span class=\"line\">  optionalElement: PropTypes.element,</span><br><span class=\"line\"></span><br><span class=\"line\">  // You can also declare that a prop is an instance of a class. This uses</span><br><span class=\"line\">  // JS&apos;s instanceof operator.</span><br><span class=\"line\">  optionalMessage: PropTypes.instanceOf(Message),</span><br><span class=\"line\"></span><br><span class=\"line\">  // You can ensure that your prop is limited to specific values by treating</span><br><span class=\"line\">  // it as an enum.</span><br><span class=\"line\">  optionalEnum: PropTypes.oneOf([&apos;News&apos;, &apos;Photos&apos;]),</span><br><span class=\"line\"></span><br><span class=\"line\">  // An object that could be one of many types</span><br><span class=\"line\">  optionalUnion: PropTypes.oneOfType([</span><br><span class=\"line\">    PropTypes.string,</span><br><span class=\"line\">    PropTypes.number,</span><br><span class=\"line\">    PropTypes.instanceOf(Message)</span><br><span class=\"line\">  ]),</span><br><span class=\"line\"></span><br><span class=\"line\">  // An array of a certain type</span><br><span class=\"line\">  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),</span><br><span class=\"line\"></span><br><span class=\"line\">  // An object with property values of a certain type</span><br><span class=\"line\">  optionalObjectOf: PropTypes.objectOf(PropTypes.number),</span><br><span class=\"line\"></span><br><span class=\"line\">  // An object taking on a particular shape</span><br><span class=\"line\">  optionalObjectWithShape: PropTypes.shape(&#123;</span><br><span class=\"line\">    color: PropTypes.string,</span><br><span class=\"line\">    fontSize: PropTypes.number</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  // You can chain any of the above with `isRequired` to make sure a warning</span><br><span class=\"line\">  // is shown if the prop isn&apos;t provided.</span><br><span class=\"line\">  requiredFunc: PropTypes.func.isRequired,</span><br><span class=\"line\"></span><br><span class=\"line\">  // A value of any data type</span><br><span class=\"line\">  requiredAny: PropTypes.any.isRequired,</span><br><span class=\"line\"></span><br><span class=\"line\">  // You can also specify a custom validator. It should return an Error</span><br><span class=\"line\">  // object if the validation fails. Don&apos;t `console.warn` or throw, as this</span><br><span class=\"line\">  // won&apos;t work inside `oneOfType`.</span><br><span class=\"line\">  customProp: function(props, propName, componentName) &#123;</span><br><span class=\"line\">    if (!/matchme/.test(props[propName])) &#123;</span><br><span class=\"line\">      return new Error(</span><br><span class=\"line\">        &apos;Invalid prop `&apos; + propName + &apos;` supplied to&apos; +</span><br><span class=\"line\">        &apos; `&apos; + componentName + &apos;`. Validation failed.&apos;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  // You can also supply a custom validator to `arrayOf` and `objectOf`.</span><br><span class=\"line\">  // It should return an Error object if the validation fails. The validator</span><br><span class=\"line\">  // will be called for each key in the array or object. The first two</span><br><span class=\"line\">  // arguments of the validator are the array or object itself, and the</span><br><span class=\"line\">  // current item&apos;s key.</span><br><span class=\"line\">  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) &#123;</span><br><span class=\"line\">    if (!/matchme/.test(propValue[key])) &#123;</span><br><span class=\"line\">      return new Error(</span><br><span class=\"line\">        &apos;Invalid prop `&apos; + propFullName + &apos;` supplied to&apos; +</span><br><span class=\"line\">        &apos; `&apos; + componentName + &apos;`. Validation failed.&apos;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clcr2w8ql00000fh06mdc7btf","tag_id":"clcr2w8qz00040fh01svqg87y","_id":"clcr2w8rc000a0fh046jnoxpj"},{"post_id":"clcr2w8qu00020fh0uiq0l3za","tag_id":"clcr2w8qz00040fh01svqg87y","_id":"clcr2w8rd000c0fh0u1bnvyj4"},{"post_id":"clcr2w8r200050fh0ut7uk3wm","tag_id":"clcr2w8rc000b0fh0qu0hthag","_id":"clcr2w8re000e0fh0h9gdqiw8"},{"post_id":"clcr2w8r600070fh0c8s8ymrr","tag_id":"clcr2w8rc000b0fh0qu0hthag","_id":"clcr2w8re000f0fh0dyy7uqlz"}],"Tag":[{"name":"哈哈哈1223","_id":"clcr2w8qz00040fh01svqg87y"},{"name":"react","_id":"clcr2w8rc000b0fh0qu0hthag"}]}}