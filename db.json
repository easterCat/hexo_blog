{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"e86da327d3758bc06e5508d74ef4328e814980ed","modified":1673405771681},{"_id":"source/CNAME","hash":"b3f06e21f6f32eba574852d69a046c92c9ee1708","modified":1673409108336},{"_id":"source/_posts/hello-world-1.md","hash":"49e354502acdbc7b898e6598d4ce86bef46f1fff","modified":1673405771680},{"_id":"source/_posts/hello-world.md","hash":"dd93645ea385dd07e637f3059d1377aaf397cfb7","modified":1673405771680},{"_id":"source/_posts/react基础.md","hash":"c9fa87e56ddf84c35393977a46c859b30033b86c","modified":1673409567472},{"_id":"source/_posts/react基础2.md","hash":"2dabdbd57d5e3cb9c67568d5516bd8d9ef4cf21b","modified":1673409579675},{"_id":"source/categories/index.md","hash":"a94e73a895556c4eeff42153bd8fb8c3c08520ef","modified":1673405771681},{"_id":"source/photos/index.md","hash":"329e5e3c65a8355152a9c9ffaf48be37951ff9b9","modified":1673405771682},{"_id":"source/images/avatar.jpg","hash":"1163c8cdc6377a21641c89bc547515223697466f","modified":1673405771682},{"_id":"source/tags/index.md","hash":"b74e868cc34e7357da82bc69be820aa62b604c86","modified":1673405771682},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1673407583930},{"_id":"themes/hexo-theme-fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1673407583885},{"_id":"themes/hexo-theme-fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1673407583883},{"_id":"themes/hexo-theme-fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1673407583883},{"_id":"themes/hexo-theme-fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1673407583882},{"_id":"themes/hexo-theme-fluid/package.json","hash":"30e3f4ccfef8474c05cf0b1eb02e91bd0a152807","modified":1673407583906},{"_id":"themes/hexo-theme-fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1673407583886},{"_id":"themes/hexo-theme-fluid/README_en.md","hash":"8c874f309e346fffa392e174385b5cc08510f218","modified":1673407583886},{"_id":"themes/hexo-theme-fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1673407583888},{"_id":"themes/hexo-theme-fluid/_config.yml","hash":"088788e149051fc0a3c6096ba95e35a8344de04b","modified":1673407583887},{"_id":"themes/hexo-theme-fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1673407583886},{"_id":"themes/hexo-theme-fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1673407583887},{"_id":"themes/hexo-theme-fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1673407583888},{"_id":"themes/hexo-theme-fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1673407583889},{"_id":"themes/hexo-theme-fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1673407583889},{"_id":"themes/hexo-theme-fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1673407583889},{"_id":"themes/hexo-theme-fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1673407583890},{"_id":"themes/hexo-theme-fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1673407583889},{"_id":"themes/hexo-theme-fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1673407583890},{"_id":"themes/hexo-theme-fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1673407583890},{"_id":"themes/hexo-theme-fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1673407583904},{"_id":"themes/hexo-theme-fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1673407583904},{"_id":"themes/hexo-theme-fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1673407583904},{"_id":"themes/hexo-theme-fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1673407583904},{"_id":"themes/hexo-theme-fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1673407583905},{"_id":"themes/hexo-theme-fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1673407583905},{"_id":"themes/hexo-theme-fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1673407583906},{"_id":"themes/hexo-theme-fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1673407583905},{"_id":"themes/hexo-theme-fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1673407583906},{"_id":"themes/hexo-theme-fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1673407583906},{"_id":"themes/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1673407583906},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1673407583884},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1673407583883},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1673407583883},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1673407583884},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1673407583884},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1673407583884},{"_id":"themes/hexo-theme-fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1673407583885},{"_id":"themes/hexo-theme-fluid/.github/workflows/publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1673407583885},{"_id":"themes/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1673407583891},{"_id":"themes/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1673407583891},{"_id":"themes/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1673407583891},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1673407583891},{"_id":"themes/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1673407583896},{"_id":"themes/hexo-theme-fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1673407583895},{"_id":"themes/hexo-theme-fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1673407583897},{"_id":"themes/hexo-theme-fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1673407583897},{"_id":"themes/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1673407583898},{"_id":"themes/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1673407583903},{"_id":"themes/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1673407583898},{"_id":"themes/hexo-theme-fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1673407583904},{"_id":"themes/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1673407583931},{"_id":"themes/hexo-theme-fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1673407583931},{"_id":"themes/hexo-theme-fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1673407583932},{"_id":"themes/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1673407583932},{"_id":"themes/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1673407583935},{"_id":"themes/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1673407583934},{"_id":"themes/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1673407583935},{"_id":"themes/hexo-theme-fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1673407583935},{"_id":"themes/hexo-theme-fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1673407583936},{"_id":"themes/hexo-theme-fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1673407583936},{"_id":"themes/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1673407583936},{"_id":"themes/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1673407583938},{"_id":"themes/hexo-theme-fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1673407583936},{"_id":"themes/hexo-theme-fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1673407583907},{"_id":"themes/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1673407583909},{"_id":"themes/hexo-theme-fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1673407583937},{"_id":"themes/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1673407583910},{"_id":"themes/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1673407583911},{"_id":"themes/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1673407583915},{"_id":"themes/hexo-theme-fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1673407583937},{"_id":"themes/hexo-theme-fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1673407583937},{"_id":"themes/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1673407583916},{"_id":"themes/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1673407583916},{"_id":"themes/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1673407583916},{"_id":"themes/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1673407583916},{"_id":"themes/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1673407583916},{"_id":"themes/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1673407583917},{"_id":"themes/hexo-theme-fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1673407583917},{"_id":"themes/hexo-theme-fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1673407583917},{"_id":"themes/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1673407583917},{"_id":"themes/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1673407583913},{"_id":"themes/hexo-theme-fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1673407583913},{"_id":"themes/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1673407583913},{"_id":"themes/hexo-theme-fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1673407583914},{"_id":"themes/hexo-theme-fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1673407583914},{"_id":"themes/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1673407583914},{"_id":"themes/hexo-theme-fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1673407583914},{"_id":"themes/hexo-theme-fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1673407583915},{"_id":"themes/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1673407583931},{"_id":"themes/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1673407583914},{"_id":"themes/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1673407583915},{"_id":"themes/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1673407583912},{"_id":"themes/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1673407583912},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1673407583893},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1673407583892},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1673407583893},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1673407583894},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1673407583894},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1673407583894},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1673407583894},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1673407583895},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1673407583895},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1673407583895},{"_id":"themes/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1673407583896},{"_id":"themes/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1673407583897},{"_id":"themes/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"870db75e4e403a840c4463dfeed2c9114846e7cc","modified":1673407583898},{"_id":"themes/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1673407583896},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1673407583899},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1673407583892},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1673407583900},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1673407583899},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1673407583901},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1673407583900},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1673407583900},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1673407583900},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1673407583901},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1673407583901},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1673407583901},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1673407583902},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1673407583902},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1673407583902},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1673407583902},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1673407583903},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1673407583903},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1673407583903},{"_id":"themes/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1673407583918},{"_id":"themes/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1673407583918},{"_id":"themes/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1673407583930},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1673407583907},{"_id":"themes/hexo-theme-fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1673407583931},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1673407583908},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1673407583908},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1673407583908},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1673407583908},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1673407583909},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1673407583909},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1673407583919},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1673407583925},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1673407583919},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1673407583925},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1673407583925},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1673407583925},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1673407583926},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1673407583926},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1673407583927},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1673407583927},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1673407583928},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1673407583928},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1673407583929},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1673407583929},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1673407583929},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1673407583930},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1673407583930},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1673407583920},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1673407583920},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1673407583920},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1673407583921},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1673407583921},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1673407583921},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1673407583922},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1673407583921},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1673407583922},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1673407583922},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1673407583923},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1673407583924},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1673407583923},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1673407583923},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1673407583924},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1673407583924},{"_id":"themes/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1673407583934},{"_id":"public/atom.xml","hash":"71a4cc50cbc5fb2b8e371ca36729a869da25837f","modified":1673409683869},{"_id":"public/content.json","hash":"73a2a9796a97a6936270862da2215aae5a0b67e6","modified":1673409683869},{"_id":"public/search.xml","hash":"c62ba607317863f978879dbf30f879c93b8f86c7","modified":1673409683869},{"_id":"public/local-search.xml","hash":"69b19abe0ff7f6b5416db034b19abcc75f8feec6","modified":1673409683869},{"_id":"public/about/index.html","hash":"89ccc42b9f9ace60dd5e84973bf01aa5c6b659a6","modified":1673408954301},{"_id":"public/categories/index.html","hash":"04bb39b937b0fd531608a727917d4eb13e6c82ae","modified":1673408954301},{"_id":"public/photos/index.html","hash":"248911b8447664021ce22025abbf921950acaf08","modified":1673408954301},{"_id":"public/tags/index.html","hash":"38730eefe6aed26a5c4a4bb927eaaf7bb078e706","modified":1673409683869},{"_id":"public/archives/index.html","hash":"ab739afffa41c1f00d16d0ac27c141f54fc61b34","modified":1673409683869},{"_id":"public/archives/2018/index.html","hash":"022935e52e2e881392668be94f55facf7222175a","modified":1673409683869},{"_id":"public/archives/2018/05/index.html","hash":"a5166441e032f71a41e3fbdbbaebbb023933f91c","modified":1673409683869},{"_id":"public/archives/2023/index.html","hash":"a24c5ab741716086cac1e06d46f67c9fccf3468e","modified":1673409683869},{"_id":"public/archives/2023/01/index.html","hash":"a3ef452f5691f8f1797d4e1b699ae9f0cbc88d7c","modified":1673409683869},{"_id":"public/index.html","hash":"b3bc9ba052069e7f6d67471db0fd4b3ddf62fd01","modified":1673409683869},{"_id":"public/tags/哈哈哈1223/index.html","hash":"00abb0896bcfec8e3a4b2e9f49b7ab443dabeccf","modified":1673408954301},{"_id":"public/tags/react/index.html","hash":"c8a32291f958e8a25c35681bdd44dcfb3c139b37","modified":1673409683869},{"_id":"public/404.html","hash":"b251cbbc5119cb021189c9d0796a309b33cb3164","modified":1673408954301},{"_id":"public/links/index.html","hash":"fbccf1da02d2bd4b7f9d25a130ddca356deeb48b","modified":1673408954301},{"_id":"public/2023/01/11/hello-world/index.html","hash":"799fd6dd8bd15987fd9a6c9a2fce3ea0e637c477","modified":1673409683869},{"_id":"public/2018/05/09/react基础2/index.html","hash":"402b3098137d3f0aaf7033fef79e44f46f2ead33","modified":1673409683869},{"_id":"public/2018/05/09/react基础/index.html","hash":"1016164c4189c5d304e803a0b3f725afad154de7","modified":1673409683869},{"_id":"public/2018/05/09/hello-world-1/index.html","hash":"e52d50783f795b9188b046dec447c6bd4eec7085","modified":1673409683869},{"_id":"public/CNAME","hash":"b3f06e21f6f32eba574852d69a046c92c9ee1708","modified":1673409123974},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1673408232189},{"_id":"public/images/avatar.jpg","hash":"1163c8cdc6377a21641c89bc547515223697466f","modified":1673408232189},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1673408232189},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1673408232189},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1673408232189},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1673408232189},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1673408232189},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1673408232189},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1673408232189},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1673408232189},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1673408232189},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1673408232189},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1673408232189},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1673408232189},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1673408232189},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1673408232189},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1673408232189},{"_id":"public/css/main.css","hash":"4d4a763ef5e9ab2602c46e812d846bba7a277757","modified":1673408232189},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1673408232189},{"_id":"source/_posts/nginx配置.md","hash":"28350ce0c9539fd37e28f9bf457e6cfdcb30b3ee","modified":1673409613484},{"_id":"source/_posts/nginx配置https.md","hash":"c9a03c0bed45b000c22e0d22720c848a820550ce","modified":1673409671542},{"_id":"source/_posts/ubuntu 18 安装 nginx.md","hash":"a19ef2faf0ac1b6dd59d49582f13617f6eba0815","modified":1673409677913},{"_id":"public/2023/01/11/nginx配置https/index.html","hash":"f631601d16312ae1c8f0f49a3cf92c77ee481015","modified":1673409370020},{"_id":"public/2023/01/11/nginx配置/index.html","hash":"07e1f604b78ce1875416a27b5916cc5b3b440033","modified":1673409370020},{"_id":"public/2023/01/11/ubuntu 18 安装 nginx/index.html","hash":"e5da40c02e16b708b5d9ce92a00a1c80b32a38a2","modified":1673409370020},{"_id":"public/tags/nginx/index.html","hash":"76777473ea8c71c589f351601420b957b958354f","modified":1673409683869},{"_id":"public/2018/05/09/nginx配置/index.html","hash":"a4b0b6971a1227649e28258e043e66df7975f775","modified":1673409683869},{"_id":"public/2018/05/09/nginx配置https/index.html","hash":"54d5b4b2e3640756451692bf0dfc600694fbfeff","modified":1673409683869},{"_id":"public/2018/05/09/ubuntu 18 安装 nginx/index.html","hash":"8ad77be52515ca56b6fe7c293136a3a0e2fd4488","modified":1673409683869}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2018-05-09T09:02:05.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-05-09 17:02:05\n---\n","updated":"2023-01-11T02:56:11.681Z","path":"about/index.html","comments":1,"layout":"page","_id":"clcr420br0000ajh0dc55fujr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-05-09T09:00:40.000Z","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-05-09 17:00:40\nlayout: categories\n---\n","updated":"2023-01-11T02:56:11.681Z","path":"categories/index.html","comments":1,"_id":"clcr420c20002ajh0582khp3l","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"photos","date":"2018-05-09T09:27:51.000Z","_content":"","source":"photos/index.md","raw":"---\ntitle: photos\ndate: 2018-05-09 17:27:51\n---\n","updated":"2023-01-11T02:56:11.682Z","path":"photos/index.html","comments":1,"layout":"page","_id":"clcr420cc0005ajh03qns7eaw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","layout":"tags","date":"2018-05-09T09:01:25.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\nlayout: tags\ndate: 2018-05-09 17:01:25\n---\n","updated":"2023-01-11T02:56:11.682Z","path":"tags/index.html","comments":1,"_id":"clcr420cf0007ajh0gp7z3dxw","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"hello,world","date":"2018-05-09T07:30:13.000Z","_content":"\n#### 今天是个好日子\n","source":"_posts/hello-world-1.md","raw":"---\ntitle: 'hello,world'\ndate: 2018-05-09 15:30:13\ntags: 哈哈哈1223\n---\n\n#### 今天是个好日子\n","slug":"hello-world-1","published":1,"updated":"2023-01-11T02:56:11.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcr420bw0001ajh00110a45t","content":"<h4 id=\"今天是个好日子\"><a href=\"#今天是个好日子\" class=\"headerlink\" title=\"今天是个好日子\"></a>今天是个好日子</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"今天是个好日子\"><a href=\"#今天是个好日子\" class=\"headerlink\" title=\"今天是个好日子\"></a>今天是个好日子</h4>"},{"title":"Hello World","_content":"\n<!-- more -->\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n\n---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags: 哈哈哈1223\n---\n\n<!-- more -->\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n\n---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2023-01-11T02:56:11.680Z","updated":"2023-01-11T02:56:11.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcr420c30003ajh042pohaf3","content":"<span id=\"more\"></span>\n\n<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n<hr>\n<h2 id=\"title-Hello-World\"><a href=\"#title-Hello-World\" class=\"headerlink\" title=\"title: Hello World\"></a>title: Hello World</h2><p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start-1\"><a href=\"#Quick-Start-1\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post-1\"><a href=\"#Create-a-new-post-1\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server-1\"><a href=\"#Run-server-1\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files-1\"><a href=\"#Generate-static-files-1\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites-1\"><a href=\"#Deploy-to-remote-sites-1\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n<hr>\n<h2 id=\"title-Hello-World-1\"><a href=\"#title-Hello-World-1\" class=\"headerlink\" title=\"title: Hello World\"></a>title: Hello World</h2><p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start-2\"><a href=\"#Quick-Start-2\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post-2\"><a href=\"#Create-a-new-post-2\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server-2\"><a href=\"#Run-server-2\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files-2\"><a href=\"#Generate-static-files-2\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites-2\"><a href=\"#Deploy-to-remote-sites-2\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n<hr>\n<h2 id=\"title-Hello-World\"><a href=\"#title-Hello-World\" class=\"headerlink\" title=\"title: Hello World\"></a>title: Hello World</h2><p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start-1\"><a href=\"#Quick-Start-1\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post-1\"><a href=\"#Create-a-new-post-1\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server-1\"><a href=\"#Run-server-1\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files-1\"><a href=\"#Generate-static-files-1\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites-1\"><a href=\"#Deploy-to-remote-sites-1\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n<hr>\n<h2 id=\"title-Hello-World-1\"><a href=\"#title-Hello-World-1\" class=\"headerlink\" title=\"title: Hello World\"></a>title: Hello World</h2><p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start-2\"><a href=\"#Quick-Start-2\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post-2\"><a href=\"#Create-a-new-post-2\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server-2\"><a href=\"#Run-server-2\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files-2\"><a href=\"#Generate-static-files-2\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites-2\"><a href=\"#Deploy-to-remote-sites-2\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"react基础","date":"2018-05-09T09:39:55.000Z","_content":"\n\n<!-- more -->\n\n[react官网](https://reactjs.org/docs/hello-world.html)\n\n## 组件\n\n#### 1. 无状态组件\n\n- 在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。\n- 无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。\n- 无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。\n\n```\nimport React from \"react\";\n\n//创建方式一,相当于es5的函数声明的方式创建\n function NoState (props) {\n     return (\n         <div>this is NoState Component</div>\n     )\n }\n```\n\n```\n//创建方式二,相当于es5的函数表达式的方式创建\nconst NoState = (props) => {\n    return (\n        <div>this is Nostate Component</div>\n    )\n}\n\nexport default NoState\n```\n\n--------------------------------------------------------------------------------\n\n- 无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。\n- 无状态组件没有实例化得过程，因此无法访问组件this中的对象\n- 无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理\n- 无状态组件只能访问传入的props，同样的props会得到同样的渲染结果\n\n当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来\n代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。\n第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同\n\n```\n// helloWorld.jsx\nimport React, {Component} from 'react';\nclass HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.props);\n        console.log(this.props.name);\n    }\n\n    render() {\n        return (\n            <div onClick={this.clickHander}>{ this.props.name } say: Hello World!</div>\n        )\n    }\n}\nexport default HelloWorld;\n```\n\n## 组件之间的交互\n\n#### 父组件与子组件之间的交互\n\n1. 父组件修改子组件，只需要修改传入的props属性\n2. 子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行\n子组件与子组件之间的交互\n3. 通过影响共同的父组件来进行交互\n\n```\nstate = {\n    switch: 0,\n    name: this.props.name1\n}\nclickHander = () => {\n    const {name1, name2} = this.props;\n    if (this.state.switch === 0) {\n        this.setState({\n            switch: 1,\n            name: name2\n        })\n    } else {\n        this.setState({\n            switch: 0,\n            name: name1\n        })\n    }\n};\nrender() {\n    return (\n        <div onClick={this.clickHander}>hello world !{this.state.name}</div>\n    )\n}\n```\n\n先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。\n\nstate = {} // 等同于ES5构造函数中的this.state = {}\n在对象中，我们可以通过this.state的方式来访问state中所存储的属性\nsetState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变\nreact赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了\n而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行\n// 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: 'Jason'})// 然后立即查看它的值console.log(this.state.name) // 仍然为Tom，不会立即改变\n\n### refs\n\nreact组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样\n\n```\n// 当然可能命名会是其他的，大概表达一个意思，不深究哈\n{\n    nodeName: 'div',\n    className: 'hello-world',\n    style: {},\n    parentNodes: 'root',\n    childrenNodes: []\n    ...\n}\n```\n\n而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的\n\n```\nimport React, { Component } from 'react';\nclass HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.refs)\n    } \n    render () {\n        return (\n            <div className=\"container\" onClick={this.clickHander}>\n                <div ref=\"hello\" className=\"hello\">Hello</div>\n                <div ref=\"world\" className=\"world\">World</div>\n            </div>\n        )\n    }\n}\nexport default HelloWorld;\n```\n\n为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替\n我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。\n当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。\n\n```\n// src/helloWorld.jsx\nimport React, { Component } from 'react';class HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.refs)\n    } refCallback = (elem) => {\n        console.log(elem);\n    } render () {\n        return (\n            <div className=\"container\" onClick={this.clickHander}>\n                <div ref=\"hello\" className=\"hello\">Hello</div>\n                <div ref={this.refCallback} className=\"world\">World</div>\n            </div>\n        )\n    }\n}export default HelloWorld;\n```\n\n### 组件生命周期\n\n件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数\n\n##### react组件有三种状态\n\n- Mounted：已经插入真实DOM\n- Updating：正在被重新渲染\n- Unmounted：已移出真实DOM\n-\n\n##### 每个状态的处理函数\n\n- will：函数在进入状态之前调用\n- did：函数在进入状态之后调用\n\n##### 组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\n\n- componentWillMount 在首次渲染完成之前，此时可修改组件的state\n- componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM\n\n##### 组件属性(我们前面提到的props与state)更新的前后时刻\n\n- componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state\n- componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素\n\n###### 组件取消挂载之前(取消之后就没必要提供钩子函数了)\n\n`componentWillUnmount`\n\n###### 两个特殊的处理函数\n\n- `componentWillReceiveProps(object nextProps)`：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变->然后componentWillReceiveProps去判断是否需要重新渲染(`shouldComponentUpdate`)->如果不需要则继续running->如果需要则执行`componentWillUpdate`->渲染DOM树之后执行`componentDidUpdate`->进入running\n- `shouldComponentUpdate(nextProps, nextState)`(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变->判断是否需要重新渲染新的props和state(`shouldComponentUpdate`) -> 根据判断决定执行render过程还是继续·保持running状态\n\n###### 三个统一调用的方法,用于组件初始化，获取默认属性和状态\n\n- getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享\n- getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props\n- render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出\n\n###### 已挂载的方法\n\n- component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候\n\n>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。\n\n![image](http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg)\n\n## PropTypes\n\n```\nimport PropTypes from 'prop-types';\n\nMyComponent.propTypes = {\n  // You can declare that a prop is a specific JS primitive. By default, these\n  // are all optional.\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // Anything that can be rendered: numbers, strings, elements or an array\n  // (or fragment) containing these types.\n  optionalNode: PropTypes.node,\n\n  // A React element.\n  optionalElement: PropTypes.element,\n\n  // You can also declare that a prop is an instance of a class. This uses\n  // JS's instanceof operator.\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // You can ensure that your prop is limited to specific values by treating\n  // it as an enum.\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // An object that could be one of many types\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // An array of a certain type\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // An object with property values of a certain type\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // An object taking on a particular shape\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n\n  // You can chain any of the above with `isRequired` to make sure a warning\n  // is shown if the prop isn't provided.\n  requiredFunc: PropTypes.func.isRequired,\n\n  // A value of any data type\n  requiredAny: PropTypes.any.isRequired,\n\n  // You can also specify a custom validator. It should return an Error\n  // object if the validation fails. Don't `console.warn` or throw, as this\n  // won't work inside `oneOfType`.\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  },\n\n  // You can also supply a custom validator to `arrayOf` and `objectOf`.\n  // It should return an Error object if the validation fails. The validator\n  // will be called for each key in the array or object. The first two\n  // arguments of the validator are the array or object itself, and the\n  // current item's key.\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        'Invalid prop `' + propFullName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  })\n};\n```\n","source":"_posts/react基础.md","raw":"---\ntitle: 'react基础'\ndate: 2018-05-09 17:39:55\ntags: react\n---\n\n\n<!-- more -->\n\n[react官网](https://reactjs.org/docs/hello-world.html)\n\n## 组件\n\n#### 1. 无状态组件\n\n- 在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。\n- 无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。\n- 无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。\n\n```\nimport React from \"react\";\n\n//创建方式一,相当于es5的函数声明的方式创建\n function NoState (props) {\n     return (\n         <div>this is NoState Component</div>\n     )\n }\n```\n\n```\n//创建方式二,相当于es5的函数表达式的方式创建\nconst NoState = (props) => {\n    return (\n        <div>this is Nostate Component</div>\n    )\n}\n\nexport default NoState\n```\n\n--------------------------------------------------------------------------------\n\n- 无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。\n- 无状态组件没有实例化得过程，因此无法访问组件this中的对象\n- 无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理\n- 无状态组件只能访问传入的props，同样的props会得到同样的渲染结果\n\n当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来\n代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。\n第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同\n\n```\n// helloWorld.jsx\nimport React, {Component} from 'react';\nclass HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.props);\n        console.log(this.props.name);\n    }\n\n    render() {\n        return (\n            <div onClick={this.clickHander}>{ this.props.name } say: Hello World!</div>\n        )\n    }\n}\nexport default HelloWorld;\n```\n\n## 组件之间的交互\n\n#### 父组件与子组件之间的交互\n\n1. 父组件修改子组件，只需要修改传入的props属性\n2. 子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行\n子组件与子组件之间的交互\n3. 通过影响共同的父组件来进行交互\n\n```\nstate = {\n    switch: 0,\n    name: this.props.name1\n}\nclickHander = () => {\n    const {name1, name2} = this.props;\n    if (this.state.switch === 0) {\n        this.setState({\n            switch: 1,\n            name: name2\n        })\n    } else {\n        this.setState({\n            switch: 0,\n            name: name1\n        })\n    }\n};\nrender() {\n    return (\n        <div onClick={this.clickHander}>hello world !{this.state.name}</div>\n    )\n}\n```\n\n先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。\n\nstate = {} // 等同于ES5构造函数中的this.state = {}\n在对象中，我们可以通过this.state的方式来访问state中所存储的属性\nsetState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变\nreact赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了\n而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行\n// 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: 'Jason'})// 然后立即查看它的值console.log(this.state.name) // 仍然为Tom，不会立即改变\n\n### refs\n\nreact组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样\n\n```\n// 当然可能命名会是其他的，大概表达一个意思，不深究哈\n{\n    nodeName: 'div',\n    className: 'hello-world',\n    style: {},\n    parentNodes: 'root',\n    childrenNodes: []\n    ...\n}\n```\n\n而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的\n\n```\nimport React, { Component } from 'react';\nclass HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.refs)\n    } \n    render () {\n        return (\n            <div className=\"container\" onClick={this.clickHander}>\n                <div ref=\"hello\" className=\"hello\">Hello</div>\n                <div ref=\"world\" className=\"world\">World</div>\n            </div>\n        )\n    }\n}\nexport default HelloWorld;\n```\n\n为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替\n我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。\n当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。\n\n```\n// src/helloWorld.jsx\nimport React, { Component } from 'react';class HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.refs)\n    } refCallback = (elem) => {\n        console.log(elem);\n    } render () {\n        return (\n            <div className=\"container\" onClick={this.clickHander}>\n                <div ref=\"hello\" className=\"hello\">Hello</div>\n                <div ref={this.refCallback} className=\"world\">World</div>\n            </div>\n        )\n    }\n}export default HelloWorld;\n```\n\n### 组件生命周期\n\n件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数\n\n##### react组件有三种状态\n\n- Mounted：已经插入真实DOM\n- Updating：正在被重新渲染\n- Unmounted：已移出真实DOM\n-\n\n##### 每个状态的处理函数\n\n- will：函数在进入状态之前调用\n- did：函数在进入状态之后调用\n\n##### 组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\n\n- componentWillMount 在首次渲染完成之前，此时可修改组件的state\n- componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM\n\n##### 组件属性(我们前面提到的props与state)更新的前后时刻\n\n- componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state\n- componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素\n\n###### 组件取消挂载之前(取消之后就没必要提供钩子函数了)\n\n`componentWillUnmount`\n\n###### 两个特殊的处理函数\n\n- `componentWillReceiveProps(object nextProps)`：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变->然后componentWillReceiveProps去判断是否需要重新渲染(`shouldComponentUpdate`)->如果不需要则继续running->如果需要则执行`componentWillUpdate`->渲染DOM树之后执行`componentDidUpdate`->进入running\n- `shouldComponentUpdate(nextProps, nextState)`(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变->判断是否需要重新渲染新的props和state(`shouldComponentUpdate`) -> 根据判断决定执行render过程还是继续·保持running状态\n\n###### 三个统一调用的方法,用于组件初始化，获取默认属性和状态\n\n- getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享\n- getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props\n- render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出\n\n###### 已挂载的方法\n\n- component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候\n\n>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。\n\n![image](http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg)\n\n## PropTypes\n\n```\nimport PropTypes from 'prop-types';\n\nMyComponent.propTypes = {\n  // You can declare that a prop is a specific JS primitive. By default, these\n  // are all optional.\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // Anything that can be rendered: numbers, strings, elements or an array\n  // (or fragment) containing these types.\n  optionalNode: PropTypes.node,\n\n  // A React element.\n  optionalElement: PropTypes.element,\n\n  // You can also declare that a prop is an instance of a class. This uses\n  // JS's instanceof operator.\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // You can ensure that your prop is limited to specific values by treating\n  // it as an enum.\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // An object that could be one of many types\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // An array of a certain type\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // An object with property values of a certain type\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // An object taking on a particular shape\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n\n  // You can chain any of the above with `isRequired` to make sure a warning\n  // is shown if the prop isn't provided.\n  requiredFunc: PropTypes.func.isRequired,\n\n  // A value of any data type\n  requiredAny: PropTypes.any.isRequired,\n\n  // You can also specify a custom validator. It should return an Error\n  // object if the validation fails. Don't `console.warn` or throw, as this\n  // won't work inside `oneOfType`.\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  },\n\n  // You can also supply a custom validator to `arrayOf` and `objectOf`.\n  // It should return an Error object if the validation fails. The validator\n  // will be called for each key in the array or object. The first two\n  // arguments of the validator are the array or object itself, and the\n  // current item's key.\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        'Invalid prop `' + propFullName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  })\n};\n```\n","slug":"react基础","published":1,"updated":"2023-01-11T03:59:27.472Z","_id":"clcr420cd0006ajh087eze0x5","comments":1,"layout":"post","photos":[],"link":"","content":"<span id=\"more\"></span>\n\n<p><a href=\"https://reactjs.org/docs/hello-world.html\">react官网</a></p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><h4 id=\"1-无状态组件\"><a href=\"#1-无状态组件\" class=\"headerlink\" title=\"1. 无状态组件\"></a>1. 无状态组件</h4><ul>\n<li>在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。</li>\n<li>无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。</li>\n<li>无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。</li>\n</ul>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\">import React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;<br><br><span class=\"hljs-comment\">//创建方式一,相当于es5的函数声明的方式创建</span><br> function NoState (props) &#123;<br>     <span class=\"hljs-keyword\">return</span> (<br>         &lt;<span class=\"hljs-keyword\">div</span>&gt;<span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">is</span> NoState Component&lt;/<span class=\"hljs-keyword\">div</span>&gt;<br>     )<br> &#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-comment\">//创建方式二,相当于es5的函数表达式的方式创建</span><br><span class=\"hljs-keyword\">const</span> NoState = (props) =&gt; &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>        &lt;<span class=\"hljs-keyword\">div</span>&gt;<span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">is</span> Nostate Component&lt;/<span class=\"hljs-keyword\">div</span>&gt;<br>    )<br>&#125;<br><br>export <span class=\"hljs-literal\">default</span> NoState<br></code></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。</li>\n<li>无状态组件没有实例化得过程，因此无法访问组件this中的对象</li>\n<li>无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理</li>\n<li>无状态组件只能访问传入的props，同样的props会得到同样的渲染结果</li>\n</ul>\n<p>当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来<br>代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。<br>第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\"><span class=\"hljs-comment\">// helloWorld.jsx</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">React</span>, &#123;<span class=\"hljs-type\">Component</span>&#125; from &#x27;react&#x27;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloWorld</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>&#123;<br>    clickHander = () =&gt; &#123;<br>        console.log(<span class=\"hljs-keyword\">this</span>.props);<br>        console.log(<span class=\"hljs-keyword\">this</span>.props.name);<br>    &#125;<br><br>    render() &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            &lt;div onClick=&#123;<span class=\"hljs-keyword\">this</span>.clickHander&#125;&gt;&#123; <span class=\"hljs-keyword\">this</span>.props.name &#125; say: <span class=\"hljs-type\">Hello</span> <span class=\"hljs-type\">World</span>!&lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-type\">HelloWorld</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"组件之间的交互\"><a href=\"#组件之间的交互\" class=\"headerlink\" title=\"组件之间的交互\"></a>组件之间的交互</h2><h4 id=\"父组件与子组件之间的交互\"><a href=\"#父组件与子组件之间的交互\" class=\"headerlink\" title=\"父组件与子组件之间的交互\"></a>父组件与子组件之间的交互</h4><ol>\n<li>父组件修改子组件，只需要修改传入的props属性</li>\n<li>子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行<br>子组件与子组件之间的交互</li>\n<li>通过影响共同的父组件来进行交互</li>\n</ol>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pf\"><span class=\"hljs-keyword\">state</span> = &#123;<br>    switch: <span class=\"hljs-number\">0</span>,<br>    name: this.props.name1<br>&#125;<br>clickHander = () =&gt; &#123;<br>    <span class=\"hljs-keyword\">const</span> &#123;name1, name2&#125; = this.props;<br>    if (this.<span class=\"hljs-keyword\">state</span>.switch === <span class=\"hljs-number\">0</span>) &#123;<br>        this.<span class=\"hljs-built_in\">set</span>State(&#123;<br>            switch: <span class=\"hljs-number\">1</span>,<br>            name: name2<br>        &#125;)<br>    &#125; else &#123;<br>        this.<span class=\"hljs-built_in\">set</span>State(&#123;<br>            switch: <span class=\"hljs-number\">0</span>,<br>            name: name1<br>        &#125;)<br>    &#125;<br>&#125;;<br>render() &#123;<br>    return (<br>        <span class=\"hljs-variable\">&lt;div onClick=&#123;this.clickHander&#125;&gt;</span>hello world !&#123;this.<span class=\"hljs-keyword\">state</span>.name&#125;&lt;/div&gt;<br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。</p>\n<p>state &#x3D; {} &#x2F;&#x2F; 等同于ES5构造函数中的this.state &#x3D; {}<br>在对象中，我们可以通过this.state的方式来访问state中所存储的属性<br>setState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变<br>react赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了<br>而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行<br>&#x2F;&#x2F; 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: ‘Jason’})&#x2F;&#x2F; 然后立即查看它的值console.log(this.state.name) &#x2F;&#x2F; 仍然为Tom，不会立即改变</p>\n<h3 id=\"refs\"><a href=\"#refs\" class=\"headerlink\" title=\"refs\"></a>refs</h3><p>react组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span> 当然可能命名会是其他的，大概表达一个意思，不深究哈<br>&#123;<br>    nodeName: <span class=\"hljs-string\">&#x27;div&#x27;</span>,<br>    className: <span class=\"hljs-string\">&#x27;hello-world&#x27;</span>,<br>    style: &#123;&#125;,<br>    parentNodes: <span class=\"hljs-string\">&#x27;root&#x27;</span>,<br>    childrenNodes: []<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">React</span>, &#123; <span class=\"hljs-type\">Component</span> &#125; from &#x27;react&#x27;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloWorld</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>&#123;<br>    clickHander = () =&gt; &#123;<br>        console.log(<span class=\"hljs-keyword\">this</span>.refs)<br>    &#125; <br>    render () &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            &lt;div className=<span class=\"hljs-string\">&quot;container&quot;</span> onClick=&#123;<span class=\"hljs-keyword\">this</span>.clickHander&#125;&gt;<br>                &lt;div ref=<span class=\"hljs-string\">&quot;hello&quot;</span> className=<span class=\"hljs-string\">&quot;hello&quot;</span>&gt;<span class=\"hljs-type\">Hello</span>&lt;/div&gt;<br>                &lt;div ref=<span class=\"hljs-string\">&quot;world&quot;</span> className=<span class=\"hljs-string\">&quot;world&quot;</span>&gt;<span class=\"hljs-type\">World</span>&lt;/div&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-type\">HelloWorld</span>;<br></code></pre></td></tr></table></figure>\n\n<p>为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替<br>我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。<br>当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// src/helloWorld.jsx</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, &#123; <span class=\"hljs-title class_\">Component</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorld</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Component</span> &#123;<br>    clickHander = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">refs</span>)<br>    &#125; refCallback = <span class=\"hljs-function\">(<span class=\"hljs-params\">elem</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(elem);<br>    &#125; render () &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;container&quot;</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.clickHander&#125;</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;hello&quot;</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;hello&quot;</span>&gt;</span>Hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;this.refCallback&#125;</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;world&quot;</span>&gt;</span>World<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">HelloWorld</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"组件生命周期\"></a>组件生命周期</h3><p>件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数</p>\n<h5 id=\"react组件有三种状态\"><a href=\"#react组件有三种状态\" class=\"headerlink\" title=\"react组件有三种状态\"></a>react组件有三种状态</h5><ul>\n<li>Mounted：已经插入真实DOM</li>\n<li>Updating：正在被重新渲染</li>\n<li>Unmounted：已移出真实DOM</li>\n<li></li>\n</ul>\n<h5 id=\"每个状态的处理函数\"><a href=\"#每个状态的处理函数\" class=\"headerlink\" title=\"每个状态的处理函数\"></a>每个状态的处理函数</h5><ul>\n<li>will：函数在进入状态之前调用</li>\n<li>did：函数在进入状态之后调用</li>\n</ul>\n<h5 id=\"组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\"><a href=\"#组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\" class=\"headerlink\" title=\"组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\"></a>组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中</h5><ul>\n<li>componentWillMount 在首次渲染完成之前，此时可修改组件的state</li>\n<li>componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM</li>\n</ul>\n<h5 id=\"组件属性-我们前面提到的props与state-更新的前后时刻\"><a href=\"#组件属性-我们前面提到的props与state-更新的前后时刻\" class=\"headerlink\" title=\"组件属性(我们前面提到的props与state)更新的前后时刻\"></a>组件属性(我们前面提到的props与state)更新的前后时刻</h5><ul>\n<li>componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state</li>\n<li>componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素</li>\n</ul>\n<h6 id=\"组件取消挂载之前-取消之后就没必要提供钩子函数了\"><a href=\"#组件取消挂载之前-取消之后就没必要提供钩子函数了\" class=\"headerlink\" title=\"组件取消挂载之前(取消之后就没必要提供钩子函数了)\"></a>组件取消挂载之前(取消之后就没必要提供钩子函数了)</h6><p><code>componentWillUnmount</code></p>\n<h6 id=\"两个特殊的处理函数\"><a href=\"#两个特殊的处理函数\" class=\"headerlink\" title=\"两个特殊的处理函数\"></a>两个特殊的处理函数</h6><ul>\n<li><code>componentWillReceiveProps(object nextProps)</code>：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变-&gt;然后componentWillReceiveProps去判断是否需要重新渲染(<code>shouldComponentUpdate</code>)-&gt;如果不需要则继续running-&gt;如果需要则执行<code>componentWillUpdate</code>-&gt;渲染DOM树之后执行<code>componentDidUpdate</code>-&gt;进入running</li>\n<li><code>shouldComponentUpdate(nextProps, nextState)</code>(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变-&gt;判断是否需要重新渲染新的props和state(<code>shouldComponentUpdate</code>) -&gt; 根据判断决定执行render过程还是继续·保持running状态</li>\n</ul>\n<h6 id=\"三个统一调用的方法-用于组件初始化，获取默认属性和状态\"><a href=\"#三个统一调用的方法-用于组件初始化，获取默认属性和状态\" class=\"headerlink\" title=\"三个统一调用的方法,用于组件初始化，获取默认属性和状态\"></a>三个统一调用的方法,用于组件初始化，获取默认属性和状态</h6><ul>\n<li>getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享</li>\n<li>getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props</li>\n<li>render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出</li>\n</ul>\n<h6 id=\"已挂载的方法\"><a href=\"#已挂载的方法\" class=\"headerlink\" title=\"已挂载的方法\"></a>已挂载的方法</h6><ul>\n<li>component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候</li>\n</ul>\n<blockquote>\n<p>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。</p>\n</blockquote>\n<p><img src=\"http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg\" alt=\"image\"></p>\n<h2 id=\"PropTypes\"><a href=\"#PropTypes\" class=\"headerlink\" title=\"PropTypes\"></a>PropTypes</h2><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">import PropTypes from <span class=\"hljs-string\">&#x27;prop-types&#x27;</span>;<br><br>MyComponent.propTypes = &#123;<br>  <span class=\"hljs-comment\">// You can declare that a prop is a specific JS primitive. By default, these</span><br>  <span class=\"hljs-comment\">// are all optional.</span><br>  optionalArray: PropTypes.<span class=\"hljs-built_in\">array</span>,<br>  <span class=\"hljs-attr\">optionalBool</span>: PropTypes.bool,<br>  <span class=\"hljs-attr\">optionalFunc</span>: PropTypes.func,<br>  <span class=\"hljs-attr\">optionalNumber</span>: PropTypes.<span class=\"hljs-built_in\">number</span>,<br>  <span class=\"hljs-attr\">optionalObject</span>: PropTypes.object,<br>  <span class=\"hljs-attr\">optionalString</span>: PropTypes.string,<br>  <span class=\"hljs-attr\">optionalSymbol</span>: PropTypes.symbol,<br><br>  <span class=\"hljs-comment\">// Anything that can be rendered: numbers, strings, elements or an array</span><br>  <span class=\"hljs-comment\">// (or fragment) containing these types.</span><br>  optionalNode: PropTypes.node,<br><br>  <span class=\"hljs-comment\">// A React element.</span><br>  optionalElement: PropTypes.element,<br><br>  <span class=\"hljs-comment\">// You can also declare that a prop is an instance of a class. This uses</span><br>  <span class=\"hljs-comment\">// JS&#x27;s instanceof operator.</span><br>  optionalMessage: PropTypes.instanceOf(Message),<br><br>  <span class=\"hljs-comment\">// You can ensure that your prop is limited to specific values by treating</span><br>  <span class=\"hljs-comment\">// it as an enum.</span><br>  optionalEnum: PropTypes.oneOf([<span class=\"hljs-string\">&#x27;News&#x27;</span>, <span class=\"hljs-string\">&#x27;Photos&#x27;</span>]),<br><br>  <span class=\"hljs-comment\">// An object that could be one of many types</span><br>  optionalUnion: PropTypes.oneOfType([<br>    PropTypes.string,<br>    PropTypes.<span class=\"hljs-built_in\">number</span>,<br>    PropTypes.instanceOf(Message)<br>  ]),<br><br>  <span class=\"hljs-comment\">// An array of a certain type</span><br>  optionalArrayOf: PropTypes.arrayOf(PropTypes.<span class=\"hljs-built_in\">number</span>),<br><br>  <span class=\"hljs-comment\">// An object with property values of a certain type</span><br>  optionalObjectOf: PropTypes.objectOf(PropTypes.<span class=\"hljs-built_in\">number</span>),<br><br>  <span class=\"hljs-comment\">// An object taking on a particular shape</span><br>  optionalObjectWithShape: PropTypes.shape(&#123;<br>    <span class=\"hljs-attr\">color</span>: PropTypes.string,<br>    <span class=\"hljs-attr\">fontSize</span>: PropTypes.<span class=\"hljs-built_in\">number</span><br>  &#125;),<br><br>  <span class=\"hljs-comment\">// You can chain any of the above with `isRequired` to make sure a warning</span><br>  <span class=\"hljs-comment\">// is shown if the prop isn&#x27;t provided.</span><br>  requiredFunc: PropTypes.func.isRequired,<br><br>  <span class=\"hljs-comment\">// A value of any data type</span><br>  requiredAny: PropTypes.<span class=\"hljs-built_in\">any</span>.isRequired,<br><br>  <span class=\"hljs-comment\">// You can also specify a custom validator. It should return an Error</span><br>  <span class=\"hljs-comment\">// object if the validation fails. Don&#x27;t `console.warn` or throw, as this</span><br>  <span class=\"hljs-comment\">// won&#x27;t work inside `oneOfType`.</span><br>  customProp: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">props, propName, componentName</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-regexp\">/matchme/</span>.test(props[propName])) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Error(<br>        <span class=\"hljs-string\">&#x27;Invalid prop `&#x27;</span> + propName + <span class=\"hljs-string\">&#x27;` supplied to&#x27;</span> +<br>        <span class=\"hljs-string\">&#x27; `&#x27;</span> + componentName + <span class=\"hljs-string\">&#x27;`. Validation failed.&#x27;</span><br>      );<br>    &#125;<br>  &#125;,<br><br>  <span class=\"hljs-comment\">// You can also supply a custom validator to `arrayOf` and `objectOf`.</span><br>  <span class=\"hljs-comment\">// It should return an Error object if the validation fails. The validator</span><br>  <span class=\"hljs-comment\">// will be called for each key in the array or object. The first two</span><br>  <span class=\"hljs-comment\">// arguments of the validator are the array or object itself, and the</span><br>  <span class=\"hljs-comment\">// current item&#x27;s key.</span><br>  customArrayProp: PropTypes.arrayOf(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">propValue, key, componentName, location, propFullName</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-regexp\">/matchme/</span>.test(propValue[key])) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Error(<br>        <span class=\"hljs-string\">&#x27;Invalid prop `&#x27;</span> + propFullName + <span class=\"hljs-string\">&#x27;` supplied to&#x27;</span> +<br>        <span class=\"hljs-string\">&#x27; `&#x27;</span> + componentName + <span class=\"hljs-string\">&#x27;`. Validation failed.&#x27;</span><br>      );<br>    &#125;<br>  &#125;)<br>&#125;;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://reactjs.org/docs/hello-world.html\">react官网</a></p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><h4 id=\"1-无状态组件\"><a href=\"#1-无状态组件\" class=\"headerlink\" title=\"1. 无状态组件\"></a>1. 无状态组件</h4><ul>\n<li>在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。</li>\n<li>无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。</li>\n<li>无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。</li>\n</ul>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\">import React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;<br><br><span class=\"hljs-comment\">//创建方式一,相当于es5的函数声明的方式创建</span><br> function NoState (props) &#123;<br>     <span class=\"hljs-keyword\">return</span> (<br>         &lt;<span class=\"hljs-keyword\">div</span>&gt;<span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">is</span> NoState Component&lt;/<span class=\"hljs-keyword\">div</span>&gt;<br>     )<br> &#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-comment\">//创建方式二,相当于es5的函数表达式的方式创建</span><br><span class=\"hljs-keyword\">const</span> NoState = (props) =&gt; &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>        &lt;<span class=\"hljs-keyword\">div</span>&gt;<span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">is</span> Nostate Component&lt;/<span class=\"hljs-keyword\">div</span>&gt;<br>    )<br>&#125;<br><br>export <span class=\"hljs-literal\">default</span> NoState<br></code></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。</li>\n<li>无状态组件没有实例化得过程，因此无法访问组件this中的对象</li>\n<li>无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理</li>\n<li>无状态组件只能访问传入的props，同样的props会得到同样的渲染结果</li>\n</ul>\n<p>当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来<br>代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。<br>第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\"><span class=\"hljs-comment\">// helloWorld.jsx</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">React</span>, &#123;<span class=\"hljs-type\">Component</span>&#125; from &#x27;react&#x27;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloWorld</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>&#123;<br>    clickHander = () =&gt; &#123;<br>        console.log(<span class=\"hljs-keyword\">this</span>.props);<br>        console.log(<span class=\"hljs-keyword\">this</span>.props.name);<br>    &#125;<br><br>    render() &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            &lt;div onClick=&#123;<span class=\"hljs-keyword\">this</span>.clickHander&#125;&gt;&#123; <span class=\"hljs-keyword\">this</span>.props.name &#125; say: <span class=\"hljs-type\">Hello</span> <span class=\"hljs-type\">World</span>!&lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-type\">HelloWorld</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"组件之间的交互\"><a href=\"#组件之间的交互\" class=\"headerlink\" title=\"组件之间的交互\"></a>组件之间的交互</h2><h4 id=\"父组件与子组件之间的交互\"><a href=\"#父组件与子组件之间的交互\" class=\"headerlink\" title=\"父组件与子组件之间的交互\"></a>父组件与子组件之间的交互</h4><ol>\n<li>父组件修改子组件，只需要修改传入的props属性</li>\n<li>子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行<br>子组件与子组件之间的交互</li>\n<li>通过影响共同的父组件来进行交互</li>\n</ol>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pf\"><span class=\"hljs-keyword\">state</span> = &#123;<br>    switch: <span class=\"hljs-number\">0</span>,<br>    name: this.props.name1<br>&#125;<br>clickHander = () =&gt; &#123;<br>    <span class=\"hljs-keyword\">const</span> &#123;name1, name2&#125; = this.props;<br>    if (this.<span class=\"hljs-keyword\">state</span>.switch === <span class=\"hljs-number\">0</span>) &#123;<br>        this.<span class=\"hljs-built_in\">set</span>State(&#123;<br>            switch: <span class=\"hljs-number\">1</span>,<br>            name: name2<br>        &#125;)<br>    &#125; else &#123;<br>        this.<span class=\"hljs-built_in\">set</span>State(&#123;<br>            switch: <span class=\"hljs-number\">0</span>,<br>            name: name1<br>        &#125;)<br>    &#125;<br>&#125;;<br>render() &#123;<br>    return (<br>        <span class=\"hljs-variable\">&lt;div onClick=&#123;this.clickHander&#125;&gt;</span>hello world !&#123;this.<span class=\"hljs-keyword\">state</span>.name&#125;&lt;/div&gt;<br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。</p>\n<p>state &#x3D; {} &#x2F;&#x2F; 等同于ES5构造函数中的this.state &#x3D; {}<br>在对象中，我们可以通过this.state的方式来访问state中所存储的属性<br>setState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变<br>react赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了<br>而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行<br>&#x2F;&#x2F; 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: ‘Jason’})&#x2F;&#x2F; 然后立即查看它的值console.log(this.state.name) &#x2F;&#x2F; 仍然为Tom，不会立即改变</p>\n<h3 id=\"refs\"><a href=\"#refs\" class=\"headerlink\" title=\"refs\"></a>refs</h3><p>react组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span> 当然可能命名会是其他的，大概表达一个意思，不深究哈<br>&#123;<br>    nodeName: <span class=\"hljs-string\">&#x27;div&#x27;</span>,<br>    className: <span class=\"hljs-string\">&#x27;hello-world&#x27;</span>,<br>    style: &#123;&#125;,<br>    parentNodes: <span class=\"hljs-string\">&#x27;root&#x27;</span>,<br>    childrenNodes: []<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">React</span>, &#123; <span class=\"hljs-type\">Component</span> &#125; from &#x27;react&#x27;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloWorld</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>&#123;<br>    clickHander = () =&gt; &#123;<br>        console.log(<span class=\"hljs-keyword\">this</span>.refs)<br>    &#125; <br>    render () &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            &lt;div className=<span class=\"hljs-string\">&quot;container&quot;</span> onClick=&#123;<span class=\"hljs-keyword\">this</span>.clickHander&#125;&gt;<br>                &lt;div ref=<span class=\"hljs-string\">&quot;hello&quot;</span> className=<span class=\"hljs-string\">&quot;hello&quot;</span>&gt;<span class=\"hljs-type\">Hello</span>&lt;/div&gt;<br>                &lt;div ref=<span class=\"hljs-string\">&quot;world&quot;</span> className=<span class=\"hljs-string\">&quot;world&quot;</span>&gt;<span class=\"hljs-type\">World</span>&lt;/div&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-type\">HelloWorld</span>;<br></code></pre></td></tr></table></figure>\n\n<p>为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替<br>我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。<br>当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// src/helloWorld.jsx</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, &#123; <span class=\"hljs-title class_\">Component</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorld</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Component</span> &#123;<br>    clickHander = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">refs</span>)<br>    &#125; refCallback = <span class=\"hljs-function\">(<span class=\"hljs-params\">elem</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(elem);<br>    &#125; render () &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;container&quot;</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.clickHander&#125;</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;hello&quot;</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;hello&quot;</span>&gt;</span>Hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;this.refCallback&#125;</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;world&quot;</span>&gt;</span>World<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">HelloWorld</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"组件生命周期\"></a>组件生命周期</h3><p>件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数</p>\n<h5 id=\"react组件有三种状态\"><a href=\"#react组件有三种状态\" class=\"headerlink\" title=\"react组件有三种状态\"></a>react组件有三种状态</h5><ul>\n<li>Mounted：已经插入真实DOM</li>\n<li>Updating：正在被重新渲染</li>\n<li>Unmounted：已移出真实DOM</li>\n<li></li>\n</ul>\n<h5 id=\"每个状态的处理函数\"><a href=\"#每个状态的处理函数\" class=\"headerlink\" title=\"每个状态的处理函数\"></a>每个状态的处理函数</h5><ul>\n<li>will：函数在进入状态之前调用</li>\n<li>did：函数在进入状态之后调用</li>\n</ul>\n<h5 id=\"组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\"><a href=\"#组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\" class=\"headerlink\" title=\"组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\"></a>组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中</h5><ul>\n<li>componentWillMount 在首次渲染完成之前，此时可修改组件的state</li>\n<li>componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM</li>\n</ul>\n<h5 id=\"组件属性-我们前面提到的props与state-更新的前后时刻\"><a href=\"#组件属性-我们前面提到的props与state-更新的前后时刻\" class=\"headerlink\" title=\"组件属性(我们前面提到的props与state)更新的前后时刻\"></a>组件属性(我们前面提到的props与state)更新的前后时刻</h5><ul>\n<li>componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state</li>\n<li>componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素</li>\n</ul>\n<h6 id=\"组件取消挂载之前-取消之后就没必要提供钩子函数了\"><a href=\"#组件取消挂载之前-取消之后就没必要提供钩子函数了\" class=\"headerlink\" title=\"组件取消挂载之前(取消之后就没必要提供钩子函数了)\"></a>组件取消挂载之前(取消之后就没必要提供钩子函数了)</h6><p><code>componentWillUnmount</code></p>\n<h6 id=\"两个特殊的处理函数\"><a href=\"#两个特殊的处理函数\" class=\"headerlink\" title=\"两个特殊的处理函数\"></a>两个特殊的处理函数</h6><ul>\n<li><code>componentWillReceiveProps(object nextProps)</code>：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变-&gt;然后componentWillReceiveProps去判断是否需要重新渲染(<code>shouldComponentUpdate</code>)-&gt;如果不需要则继续running-&gt;如果需要则执行<code>componentWillUpdate</code>-&gt;渲染DOM树之后执行<code>componentDidUpdate</code>-&gt;进入running</li>\n<li><code>shouldComponentUpdate(nextProps, nextState)</code>(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变-&gt;判断是否需要重新渲染新的props和state(<code>shouldComponentUpdate</code>) -&gt; 根据判断决定执行render过程还是继续·保持running状态</li>\n</ul>\n<h6 id=\"三个统一调用的方法-用于组件初始化，获取默认属性和状态\"><a href=\"#三个统一调用的方法-用于组件初始化，获取默认属性和状态\" class=\"headerlink\" title=\"三个统一调用的方法,用于组件初始化，获取默认属性和状态\"></a>三个统一调用的方法,用于组件初始化，获取默认属性和状态</h6><ul>\n<li>getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享</li>\n<li>getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props</li>\n<li>render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出</li>\n</ul>\n<h6 id=\"已挂载的方法\"><a href=\"#已挂载的方法\" class=\"headerlink\" title=\"已挂载的方法\"></a>已挂载的方法</h6><ul>\n<li>component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候</li>\n</ul>\n<blockquote>\n<p>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。</p>\n</blockquote>\n<p><img src=\"http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg\" alt=\"image\"></p>\n<h2 id=\"PropTypes\"><a href=\"#PropTypes\" class=\"headerlink\" title=\"PropTypes\"></a>PropTypes</h2><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">import PropTypes from <span class=\"hljs-string\">&#x27;prop-types&#x27;</span>;<br><br>MyComponent.propTypes = &#123;<br>  <span class=\"hljs-comment\">// You can declare that a prop is a specific JS primitive. By default, these</span><br>  <span class=\"hljs-comment\">// are all optional.</span><br>  optionalArray: PropTypes.<span class=\"hljs-built_in\">array</span>,<br>  <span class=\"hljs-attr\">optionalBool</span>: PropTypes.bool,<br>  <span class=\"hljs-attr\">optionalFunc</span>: PropTypes.func,<br>  <span class=\"hljs-attr\">optionalNumber</span>: PropTypes.<span class=\"hljs-built_in\">number</span>,<br>  <span class=\"hljs-attr\">optionalObject</span>: PropTypes.object,<br>  <span class=\"hljs-attr\">optionalString</span>: PropTypes.string,<br>  <span class=\"hljs-attr\">optionalSymbol</span>: PropTypes.symbol,<br><br>  <span class=\"hljs-comment\">// Anything that can be rendered: numbers, strings, elements or an array</span><br>  <span class=\"hljs-comment\">// (or fragment) containing these types.</span><br>  optionalNode: PropTypes.node,<br><br>  <span class=\"hljs-comment\">// A React element.</span><br>  optionalElement: PropTypes.element,<br><br>  <span class=\"hljs-comment\">// You can also declare that a prop is an instance of a class. This uses</span><br>  <span class=\"hljs-comment\">// JS&#x27;s instanceof operator.</span><br>  optionalMessage: PropTypes.instanceOf(Message),<br><br>  <span class=\"hljs-comment\">// You can ensure that your prop is limited to specific values by treating</span><br>  <span class=\"hljs-comment\">// it as an enum.</span><br>  optionalEnum: PropTypes.oneOf([<span class=\"hljs-string\">&#x27;News&#x27;</span>, <span class=\"hljs-string\">&#x27;Photos&#x27;</span>]),<br><br>  <span class=\"hljs-comment\">// An object that could be one of many types</span><br>  optionalUnion: PropTypes.oneOfType([<br>    PropTypes.string,<br>    PropTypes.<span class=\"hljs-built_in\">number</span>,<br>    PropTypes.instanceOf(Message)<br>  ]),<br><br>  <span class=\"hljs-comment\">// An array of a certain type</span><br>  optionalArrayOf: PropTypes.arrayOf(PropTypes.<span class=\"hljs-built_in\">number</span>),<br><br>  <span class=\"hljs-comment\">// An object with property values of a certain type</span><br>  optionalObjectOf: PropTypes.objectOf(PropTypes.<span class=\"hljs-built_in\">number</span>),<br><br>  <span class=\"hljs-comment\">// An object taking on a particular shape</span><br>  optionalObjectWithShape: PropTypes.shape(&#123;<br>    <span class=\"hljs-attr\">color</span>: PropTypes.string,<br>    <span class=\"hljs-attr\">fontSize</span>: PropTypes.<span class=\"hljs-built_in\">number</span><br>  &#125;),<br><br>  <span class=\"hljs-comment\">// You can chain any of the above with `isRequired` to make sure a warning</span><br>  <span class=\"hljs-comment\">// is shown if the prop isn&#x27;t provided.</span><br>  requiredFunc: PropTypes.func.isRequired,<br><br>  <span class=\"hljs-comment\">// A value of any data type</span><br>  requiredAny: PropTypes.<span class=\"hljs-built_in\">any</span>.isRequired,<br><br>  <span class=\"hljs-comment\">// You can also specify a custom validator. It should return an Error</span><br>  <span class=\"hljs-comment\">// object if the validation fails. Don&#x27;t `console.warn` or throw, as this</span><br>  <span class=\"hljs-comment\">// won&#x27;t work inside `oneOfType`.</span><br>  customProp: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">props, propName, componentName</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-regexp\">/matchme/</span>.test(props[propName])) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Error(<br>        <span class=\"hljs-string\">&#x27;Invalid prop `&#x27;</span> + propName + <span class=\"hljs-string\">&#x27;` supplied to&#x27;</span> +<br>        <span class=\"hljs-string\">&#x27; `&#x27;</span> + componentName + <span class=\"hljs-string\">&#x27;`. Validation failed.&#x27;</span><br>      );<br>    &#125;<br>  &#125;,<br><br>  <span class=\"hljs-comment\">// You can also supply a custom validator to `arrayOf` and `objectOf`.</span><br>  <span class=\"hljs-comment\">// It should return an Error object if the validation fails. The validator</span><br>  <span class=\"hljs-comment\">// will be called for each key in the array or object. The first two</span><br>  <span class=\"hljs-comment\">// arguments of the validator are the array or object itself, and the</span><br>  <span class=\"hljs-comment\">// current item&#x27;s key.</span><br>  customArrayProp: PropTypes.arrayOf(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">propValue, key, componentName, location, propFullName</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-regexp\">/matchme/</span>.test(propValue[key])) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Error(<br>        <span class=\"hljs-string\">&#x27;Invalid prop `&#x27;</span> + propFullName + <span class=\"hljs-string\">&#x27;` supplied to&#x27;</span> +<br>        <span class=\"hljs-string\">&#x27; `&#x27;</span> + componentName + <span class=\"hljs-string\">&#x27;`. Validation failed.&#x27;</span><br>      );<br>    &#125;<br>  &#125;)<br>&#125;;<br></code></pre></td></tr></table></figure>"},{"title":"react基础2","date":"2018-05-09T09:49:24.000Z","_content":"\n<!-- more -->\n\n[react官网](https://reactjs.org/docs/hello-world.html)\n\n## 组件\n\n#### 1. 无状态组件\n\n- 在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。\n- 无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。\n- 无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。\n\n```\nimport React from \"react\";\n\n//创建方式一,相当于es5的函数声明的方式创建\n function NoState (props) {\n     return (\n         <div>this is NoState Component</div>\n     )\n }\n```\n\n```\n//创建方式二,相当于es5的函数表达式的方式创建\nconst NoState = (props) => {\n    return (\n        <div>this is Nostate Component</div>\n    )\n}\n\nexport default NoState\n```\n\n--------------------------------------------------------------------------------\n\n- 无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。\n- 无状态组件没有实例化得过程，因此无法访问组件this中的对象\n- 无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理\n- 无状态组件只能访问传入的props，同样的props会得到同样的渲染结果\n\n当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来\n代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。\n第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同\n\n```\n// helloWorld.jsx\nimport React, {Component} from 'react';\nclass HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.props);\n        console.log(this.props.name);\n    }\n\n    render() {\n        return (\n            <div onClick={this.clickHander}>{ this.props.name } say: Hello World!</div>\n        )\n    }\n}\nexport default HelloWorld;\n```\n\n## 组件之间的交互\n\n#### 父组件与子组件之间的交互\n\n1. 父组件修改子组件，只需要修改传入的props属性\n2. 子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行\n子组件与子组件之间的交互\n3. 通过影响共同的父组件来进行交互\n\n```\nstate = {\n    switch: 0,\n    name: this.props.name1\n}\nclickHander = () => {\n    const {name1, name2} = this.props;\n    if (this.state.switch === 0) {\n        this.setState({\n            switch: 1,\n            name: name2\n        })\n    } else {\n        this.setState({\n            switch: 0,\n            name: name1\n        })\n    }\n};\nrender() {\n    return (\n        <div onClick={this.clickHander}>hello world !{this.state.name}</div>\n    )\n}\n```\n\n先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。\n\nstate = {} // 等同于ES5构造函数中的this.state = {}\n在对象中，我们可以通过this.state的方式来访问state中所存储的属性\nsetState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变\nreact赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了\n而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行\n// 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: 'Jason'})// 然后立即查看它的值console.log(this.state.name) // 仍然为Tom，不会立即改变\n\n### refs\n\nreact组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样\n\n```\n// 当然可能命名会是其他的，大概表达一个意思，不深究哈\n{\n    nodeName: 'div',\n    className: 'hello-world',\n    style: {},\n    parentNodes: 'root',\n    childrenNodes: []\n    ...\n}\n```\n\n而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的\n\n```\nimport React, { Component } from 'react';\nclass HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.refs)\n    } \n    render () {\n        return (\n            <div className=\"container\" onClick={this.clickHander}>\n                <div ref=\"hello\" className=\"hello\">Hello</div>\n                <div ref=\"world\" className=\"world\">World</div>\n            </div>\n        )\n    }\n}\nexport default HelloWorld;\n```\n\n为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替\n我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。\n当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。\n\n```\n// src/helloWorld.jsx\nimport React, { Component } from 'react';class HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.refs)\n    } refCallback = (elem) => {\n        console.log(elem);\n    } render () {\n        return (\n            <div className=\"container\" onClick={this.clickHander}>\n                <div ref=\"hello\" className=\"hello\">Hello</div>\n                <div ref={this.refCallback} className=\"world\">World</div>\n            </div>\n        )\n    }\n}export default HelloWorld;\n```\n\n### 组件生命周期\n\n件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数\n\n##### react组件有三种状态\n\n- Mounted：已经插入真实DOM\n- Updating：正在被重新渲染\n- Unmounted：已移出真实DOM\n-\n\n##### 每个状态的处理函数\n\n- will：函数在进入状态之前调用\n- did：函数在进入状态之后调用\n\n##### 组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\n\n- componentWillMount 在首次渲染完成之前，此时可修改组件的state\n- componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM\n\n##### 组件属性(我们前面提到的props与state)更新的前后时刻\n\n- componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state\n- componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素\n\n###### 组件取消挂载之前(取消之后就没必要提供钩子函数了)\n\n`componentWillUnmount`\n\n###### 两个特殊的处理函数\n\n- `componentWillReceiveProps(object nextProps)`：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变->然后componentWillReceiveProps去判断是否需要重新渲染(`shouldComponentUpdate`)->如果不需要则继续running->如果需要则执行`componentWillUpdate`->渲染DOM树之后执行`componentDidUpdate`->进入running\n- `shouldComponentUpdate(nextProps, nextState)`(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变->判断是否需要重新渲染新的props和state(`shouldComponentUpdate`) -> 根据判断决定执行render过程还是继续·保持running状态\n\n###### 三个统一调用的方法,用于组件初始化，获取默认属性和状态\n\n- getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享\n- getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props\n- render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出\n\n###### 已挂载的方法\n\n- component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候\n\n>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。\n\n![image](http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg)\n\n## PropTypes\n\n```\nimport PropTypes from 'prop-types';\n\nMyComponent.propTypes = {\n  // You can declare that a prop is a specific JS primitive. By default, these\n  // are all optional.\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // Anything that can be rendered: numbers, strings, elements or an array\n  // (or fragment) containing these types.\n  optionalNode: PropTypes.node,\n\n  // A React element.\n  optionalElement: PropTypes.element,\n\n  // You can also declare that a prop is an instance of a class. This uses\n  // JS's instanceof operator.\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // You can ensure that your prop is limited to specific values by treating\n  // it as an enum.\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // An object that could be one of many types\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // An array of a certain type\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // An object with property values of a certain type\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // An object taking on a particular shape\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n\n  // You can chain any of the above with `isRequired` to make sure a warning\n  // is shown if the prop isn't provided.\n  requiredFunc: PropTypes.func.isRequired,\n\n  // A value of any data type\n  requiredAny: PropTypes.any.isRequired,\n\n  // You can also specify a custom validator. It should return an Error\n  // object if the validation fails. Don't `console.warn` or throw, as this\n  // won't work inside `oneOfType`.\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  },\n\n  // You can also supply a custom validator to `arrayOf` and `objectOf`.\n  // It should return an Error object if the validation fails. The validator\n  // will be called for each key in the array or object. The first two\n  // arguments of the validator are the array or object itself, and the\n  // current item's key.\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        'Invalid prop `' + propFullName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  })\n};\n```\n","source":"_posts/react基础2.md","raw":"---\ntitle: 'react基础2'\ndate: 2018-05-09 17:49:24\ntags: react\n---\n\n<!-- more -->\n\n[react官网](https://reactjs.org/docs/hello-world.html)\n\n## 组件\n\n#### 1. 无状态组件\n\n- 在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。\n- 无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。\n- 无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。\n\n```\nimport React from \"react\";\n\n//创建方式一,相当于es5的函数声明的方式创建\n function NoState (props) {\n     return (\n         <div>this is NoState Component</div>\n     )\n }\n```\n\n```\n//创建方式二,相当于es5的函数表达式的方式创建\nconst NoState = (props) => {\n    return (\n        <div>this is Nostate Component</div>\n    )\n}\n\nexport default NoState\n```\n\n--------------------------------------------------------------------------------\n\n- 无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。\n- 无状态组件没有实例化得过程，因此无法访问组件this中的对象\n- 无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理\n- 无状态组件只能访问传入的props，同样的props会得到同样的渲染结果\n\n当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来\n代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。\n第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同\n\n```\n// helloWorld.jsx\nimport React, {Component} from 'react';\nclass HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.props);\n        console.log(this.props.name);\n    }\n\n    render() {\n        return (\n            <div onClick={this.clickHander}>{ this.props.name } say: Hello World!</div>\n        )\n    }\n}\nexport default HelloWorld;\n```\n\n## 组件之间的交互\n\n#### 父组件与子组件之间的交互\n\n1. 父组件修改子组件，只需要修改传入的props属性\n2. 子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行\n子组件与子组件之间的交互\n3. 通过影响共同的父组件来进行交互\n\n```\nstate = {\n    switch: 0,\n    name: this.props.name1\n}\nclickHander = () => {\n    const {name1, name2} = this.props;\n    if (this.state.switch === 0) {\n        this.setState({\n            switch: 1,\n            name: name2\n        })\n    } else {\n        this.setState({\n            switch: 0,\n            name: name1\n        })\n    }\n};\nrender() {\n    return (\n        <div onClick={this.clickHander}>hello world !{this.state.name}</div>\n    )\n}\n```\n\n先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。\n\nstate = {} // 等同于ES5构造函数中的this.state = {}\n在对象中，我们可以通过this.state的方式来访问state中所存储的属性\nsetState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变\nreact赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了\n而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行\n// 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: 'Jason'})// 然后立即查看它的值console.log(this.state.name) // 仍然为Tom，不会立即改变\n\n### refs\n\nreact组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样\n\n```\n// 当然可能命名会是其他的，大概表达一个意思，不深究哈\n{\n    nodeName: 'div',\n    className: 'hello-world',\n    style: {},\n    parentNodes: 'root',\n    childrenNodes: []\n    ...\n}\n```\n\n而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的\n\n```\nimport React, { Component } from 'react';\nclass HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.refs)\n    } \n    render () {\n        return (\n            <div className=\"container\" onClick={this.clickHander}>\n                <div ref=\"hello\" className=\"hello\">Hello</div>\n                <div ref=\"world\" className=\"world\">World</div>\n            </div>\n        )\n    }\n}\nexport default HelloWorld;\n```\n\n为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替\n我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。\n当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。\n\n```\n// src/helloWorld.jsx\nimport React, { Component } from 'react';class HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.refs)\n    } refCallback = (elem) => {\n        console.log(elem);\n    } render () {\n        return (\n            <div className=\"container\" onClick={this.clickHander}>\n                <div ref=\"hello\" className=\"hello\">Hello</div>\n                <div ref={this.refCallback} className=\"world\">World</div>\n            </div>\n        )\n    }\n}export default HelloWorld;\n```\n\n### 组件生命周期\n\n件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数\n\n##### react组件有三种状态\n\n- Mounted：已经插入真实DOM\n- Updating：正在被重新渲染\n- Unmounted：已移出真实DOM\n-\n\n##### 每个状态的处理函数\n\n- will：函数在进入状态之前调用\n- did：函数在进入状态之后调用\n\n##### 组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\n\n- componentWillMount 在首次渲染完成之前，此时可修改组件的state\n- componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM\n\n##### 组件属性(我们前面提到的props与state)更新的前后时刻\n\n- componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state\n- componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素\n\n###### 组件取消挂载之前(取消之后就没必要提供钩子函数了)\n\n`componentWillUnmount`\n\n###### 两个特殊的处理函数\n\n- `componentWillReceiveProps(object nextProps)`：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变->然后componentWillReceiveProps去判断是否需要重新渲染(`shouldComponentUpdate`)->如果不需要则继续running->如果需要则执行`componentWillUpdate`->渲染DOM树之后执行`componentDidUpdate`->进入running\n- `shouldComponentUpdate(nextProps, nextState)`(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变->判断是否需要重新渲染新的props和state(`shouldComponentUpdate`) -> 根据判断决定执行render过程还是继续·保持running状态\n\n###### 三个统一调用的方法,用于组件初始化，获取默认属性和状态\n\n- getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享\n- getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props\n- render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出\n\n###### 已挂载的方法\n\n- component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候\n\n>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。\n\n![image](http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg)\n\n## PropTypes\n\n```\nimport PropTypes from 'prop-types';\n\nMyComponent.propTypes = {\n  // You can declare that a prop is a specific JS primitive. By default, these\n  // are all optional.\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // Anything that can be rendered: numbers, strings, elements or an array\n  // (or fragment) containing these types.\n  optionalNode: PropTypes.node,\n\n  // A React element.\n  optionalElement: PropTypes.element,\n\n  // You can also declare that a prop is an instance of a class. This uses\n  // JS's instanceof operator.\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // You can ensure that your prop is limited to specific values by treating\n  // it as an enum.\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // An object that could be one of many types\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // An array of a certain type\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // An object with property values of a certain type\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // An object taking on a particular shape\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n\n  // You can chain any of the above with `isRequired` to make sure a warning\n  // is shown if the prop isn't provided.\n  requiredFunc: PropTypes.func.isRequired,\n\n  // A value of any data type\n  requiredAny: PropTypes.any.isRequired,\n\n  // You can also specify a custom validator. It should return an Error\n  // object if the validation fails. Don't `console.warn` or throw, as this\n  // won't work inside `oneOfType`.\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  },\n\n  // You can also supply a custom validator to `arrayOf` and `objectOf`.\n  // It should return an Error object if the validation fails. The validator\n  // will be called for each key in the array or object. The first two\n  // arguments of the validator are the array or object itself, and the\n  // current item's key.\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        'Invalid prop `' + propFullName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  })\n};\n```\n","slug":"react基础2","published":1,"updated":"2023-01-11T03:59:39.675Z","_id":"clcr420cg0008ajh00oqzc8w0","comments":1,"layout":"post","photos":[],"link":"","content":"<span id=\"more\"></span>\n\n<p><a href=\"https://reactjs.org/docs/hello-world.html\">react官网</a></p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><h4 id=\"1-无状态组件\"><a href=\"#1-无状态组件\" class=\"headerlink\" title=\"1. 无状态组件\"></a>1. 无状态组件</h4><ul>\n<li>在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。</li>\n<li>无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。</li>\n<li>无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。</li>\n</ul>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\">import React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;<br><br><span class=\"hljs-comment\">//创建方式一,相当于es5的函数声明的方式创建</span><br> function NoState (props) &#123;<br>     <span class=\"hljs-keyword\">return</span> (<br>         &lt;<span class=\"hljs-keyword\">div</span>&gt;<span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">is</span> NoState Component&lt;/<span class=\"hljs-keyword\">div</span>&gt;<br>     )<br> &#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-comment\">//创建方式二,相当于es5的函数表达式的方式创建</span><br><span class=\"hljs-keyword\">const</span> NoState = (props) =&gt; &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>        &lt;<span class=\"hljs-keyword\">div</span>&gt;<span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">is</span> Nostate Component&lt;/<span class=\"hljs-keyword\">div</span>&gt;<br>    )<br>&#125;<br><br>export <span class=\"hljs-literal\">default</span> NoState<br></code></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。</li>\n<li>无状态组件没有实例化得过程，因此无法访问组件this中的对象</li>\n<li>无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理</li>\n<li>无状态组件只能访问传入的props，同样的props会得到同样的渲染结果</li>\n</ul>\n<p>当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来<br>代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。<br>第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\"><span class=\"hljs-comment\">// helloWorld.jsx</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">React</span>, &#123;<span class=\"hljs-type\">Component</span>&#125; from &#x27;react&#x27;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloWorld</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>&#123;<br>    clickHander = () =&gt; &#123;<br>        console.log(<span class=\"hljs-keyword\">this</span>.props);<br>        console.log(<span class=\"hljs-keyword\">this</span>.props.name);<br>    &#125;<br><br>    render() &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            &lt;div onClick=&#123;<span class=\"hljs-keyword\">this</span>.clickHander&#125;&gt;&#123; <span class=\"hljs-keyword\">this</span>.props.name &#125; say: <span class=\"hljs-type\">Hello</span> <span class=\"hljs-type\">World</span>!&lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-type\">HelloWorld</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"组件之间的交互\"><a href=\"#组件之间的交互\" class=\"headerlink\" title=\"组件之间的交互\"></a>组件之间的交互</h2><h4 id=\"父组件与子组件之间的交互\"><a href=\"#父组件与子组件之间的交互\" class=\"headerlink\" title=\"父组件与子组件之间的交互\"></a>父组件与子组件之间的交互</h4><ol>\n<li>父组件修改子组件，只需要修改传入的props属性</li>\n<li>子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行<br>子组件与子组件之间的交互</li>\n<li>通过影响共同的父组件来进行交互</li>\n</ol>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pf\"><span class=\"hljs-keyword\">state</span> = &#123;<br>    switch: <span class=\"hljs-number\">0</span>,<br>    name: this.props.name1<br>&#125;<br>clickHander = () =&gt; &#123;<br>    <span class=\"hljs-keyword\">const</span> &#123;name1, name2&#125; = this.props;<br>    if (this.<span class=\"hljs-keyword\">state</span>.switch === <span class=\"hljs-number\">0</span>) &#123;<br>        this.<span class=\"hljs-built_in\">set</span>State(&#123;<br>            switch: <span class=\"hljs-number\">1</span>,<br>            name: name2<br>        &#125;)<br>    &#125; else &#123;<br>        this.<span class=\"hljs-built_in\">set</span>State(&#123;<br>            switch: <span class=\"hljs-number\">0</span>,<br>            name: name1<br>        &#125;)<br>    &#125;<br>&#125;;<br>render() &#123;<br>    return (<br>        <span class=\"hljs-variable\">&lt;div onClick=&#123;this.clickHander&#125;&gt;</span>hello world !&#123;this.<span class=\"hljs-keyword\">state</span>.name&#125;&lt;/div&gt;<br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。</p>\n<p>state &#x3D; {} &#x2F;&#x2F; 等同于ES5构造函数中的this.state &#x3D; {}<br>在对象中，我们可以通过this.state的方式来访问state中所存储的属性<br>setState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变<br>react赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了<br>而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行<br>&#x2F;&#x2F; 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: ‘Jason’})&#x2F;&#x2F; 然后立即查看它的值console.log(this.state.name) &#x2F;&#x2F; 仍然为Tom，不会立即改变</p>\n<h3 id=\"refs\"><a href=\"#refs\" class=\"headerlink\" title=\"refs\"></a>refs</h3><p>react组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span> 当然可能命名会是其他的，大概表达一个意思，不深究哈<br>&#123;<br>    nodeName: <span class=\"hljs-string\">&#x27;div&#x27;</span>,<br>    className: <span class=\"hljs-string\">&#x27;hello-world&#x27;</span>,<br>    style: &#123;&#125;,<br>    parentNodes: <span class=\"hljs-string\">&#x27;root&#x27;</span>,<br>    childrenNodes: []<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">React</span>, &#123; <span class=\"hljs-type\">Component</span> &#125; from &#x27;react&#x27;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloWorld</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>&#123;<br>    clickHander = () =&gt; &#123;<br>        console.log(<span class=\"hljs-keyword\">this</span>.refs)<br>    &#125; <br>    render () &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            &lt;div className=<span class=\"hljs-string\">&quot;container&quot;</span> onClick=&#123;<span class=\"hljs-keyword\">this</span>.clickHander&#125;&gt;<br>                &lt;div ref=<span class=\"hljs-string\">&quot;hello&quot;</span> className=<span class=\"hljs-string\">&quot;hello&quot;</span>&gt;<span class=\"hljs-type\">Hello</span>&lt;/div&gt;<br>                &lt;div ref=<span class=\"hljs-string\">&quot;world&quot;</span> className=<span class=\"hljs-string\">&quot;world&quot;</span>&gt;<span class=\"hljs-type\">World</span>&lt;/div&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-type\">HelloWorld</span>;<br></code></pre></td></tr></table></figure>\n\n<p>为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替<br>我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。<br>当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// src/helloWorld.jsx</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, &#123; <span class=\"hljs-title class_\">Component</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorld</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Component</span> &#123;<br>    clickHander = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">refs</span>)<br>    &#125; refCallback = <span class=\"hljs-function\">(<span class=\"hljs-params\">elem</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(elem);<br>    &#125; render () &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;container&quot;</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.clickHander&#125;</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;hello&quot;</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;hello&quot;</span>&gt;</span>Hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;this.refCallback&#125;</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;world&quot;</span>&gt;</span>World<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">HelloWorld</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"组件生命周期\"></a>组件生命周期</h3><p>件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数</p>\n<h5 id=\"react组件有三种状态\"><a href=\"#react组件有三种状态\" class=\"headerlink\" title=\"react组件有三种状态\"></a>react组件有三种状态</h5><ul>\n<li>Mounted：已经插入真实DOM</li>\n<li>Updating：正在被重新渲染</li>\n<li>Unmounted：已移出真实DOM</li>\n<li></li>\n</ul>\n<h5 id=\"每个状态的处理函数\"><a href=\"#每个状态的处理函数\" class=\"headerlink\" title=\"每个状态的处理函数\"></a>每个状态的处理函数</h5><ul>\n<li>will：函数在进入状态之前调用</li>\n<li>did：函数在进入状态之后调用</li>\n</ul>\n<h5 id=\"组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\"><a href=\"#组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\" class=\"headerlink\" title=\"组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\"></a>组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中</h5><ul>\n<li>componentWillMount 在首次渲染完成之前，此时可修改组件的state</li>\n<li>componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM</li>\n</ul>\n<h5 id=\"组件属性-我们前面提到的props与state-更新的前后时刻\"><a href=\"#组件属性-我们前面提到的props与state-更新的前后时刻\" class=\"headerlink\" title=\"组件属性(我们前面提到的props与state)更新的前后时刻\"></a>组件属性(我们前面提到的props与state)更新的前后时刻</h5><ul>\n<li>componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state</li>\n<li>componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素</li>\n</ul>\n<h6 id=\"组件取消挂载之前-取消之后就没必要提供钩子函数了\"><a href=\"#组件取消挂载之前-取消之后就没必要提供钩子函数了\" class=\"headerlink\" title=\"组件取消挂载之前(取消之后就没必要提供钩子函数了)\"></a>组件取消挂载之前(取消之后就没必要提供钩子函数了)</h6><p><code>componentWillUnmount</code></p>\n<h6 id=\"两个特殊的处理函数\"><a href=\"#两个特殊的处理函数\" class=\"headerlink\" title=\"两个特殊的处理函数\"></a>两个特殊的处理函数</h6><ul>\n<li><code>componentWillReceiveProps(object nextProps)</code>：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变-&gt;然后componentWillReceiveProps去判断是否需要重新渲染(<code>shouldComponentUpdate</code>)-&gt;如果不需要则继续running-&gt;如果需要则执行<code>componentWillUpdate</code>-&gt;渲染DOM树之后执行<code>componentDidUpdate</code>-&gt;进入running</li>\n<li><code>shouldComponentUpdate(nextProps, nextState)</code>(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变-&gt;判断是否需要重新渲染新的props和state(<code>shouldComponentUpdate</code>) -&gt; 根据判断决定执行render过程还是继续·保持running状态</li>\n</ul>\n<h6 id=\"三个统一调用的方法-用于组件初始化，获取默认属性和状态\"><a href=\"#三个统一调用的方法-用于组件初始化，获取默认属性和状态\" class=\"headerlink\" title=\"三个统一调用的方法,用于组件初始化，获取默认属性和状态\"></a>三个统一调用的方法,用于组件初始化，获取默认属性和状态</h6><ul>\n<li>getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享</li>\n<li>getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props</li>\n<li>render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出</li>\n</ul>\n<h6 id=\"已挂载的方法\"><a href=\"#已挂载的方法\" class=\"headerlink\" title=\"已挂载的方法\"></a>已挂载的方法</h6><ul>\n<li>component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候</li>\n</ul>\n<blockquote>\n<p>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。</p>\n</blockquote>\n<p><img src=\"http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg\" alt=\"image\"></p>\n<h2 id=\"PropTypes\"><a href=\"#PropTypes\" class=\"headerlink\" title=\"PropTypes\"></a>PropTypes</h2><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">import PropTypes from <span class=\"hljs-string\">&#x27;prop-types&#x27;</span>;<br><br>MyComponent.propTypes = &#123;<br>  <span class=\"hljs-comment\">// You can declare that a prop is a specific JS primitive. By default, these</span><br>  <span class=\"hljs-comment\">// are all optional.</span><br>  optionalArray: PropTypes.<span class=\"hljs-built_in\">array</span>,<br>  <span class=\"hljs-attr\">optionalBool</span>: PropTypes.bool,<br>  <span class=\"hljs-attr\">optionalFunc</span>: PropTypes.func,<br>  <span class=\"hljs-attr\">optionalNumber</span>: PropTypes.<span class=\"hljs-built_in\">number</span>,<br>  <span class=\"hljs-attr\">optionalObject</span>: PropTypes.object,<br>  <span class=\"hljs-attr\">optionalString</span>: PropTypes.string,<br>  <span class=\"hljs-attr\">optionalSymbol</span>: PropTypes.symbol,<br><br>  <span class=\"hljs-comment\">// Anything that can be rendered: numbers, strings, elements or an array</span><br>  <span class=\"hljs-comment\">// (or fragment) containing these types.</span><br>  optionalNode: PropTypes.node,<br><br>  <span class=\"hljs-comment\">// A React element.</span><br>  optionalElement: PropTypes.element,<br><br>  <span class=\"hljs-comment\">// You can also declare that a prop is an instance of a class. This uses</span><br>  <span class=\"hljs-comment\">// JS&#x27;s instanceof operator.</span><br>  optionalMessage: PropTypes.instanceOf(Message),<br><br>  <span class=\"hljs-comment\">// You can ensure that your prop is limited to specific values by treating</span><br>  <span class=\"hljs-comment\">// it as an enum.</span><br>  optionalEnum: PropTypes.oneOf([<span class=\"hljs-string\">&#x27;News&#x27;</span>, <span class=\"hljs-string\">&#x27;Photos&#x27;</span>]),<br><br>  <span class=\"hljs-comment\">// An object that could be one of many types</span><br>  optionalUnion: PropTypes.oneOfType([<br>    PropTypes.string,<br>    PropTypes.<span class=\"hljs-built_in\">number</span>,<br>    PropTypes.instanceOf(Message)<br>  ]),<br><br>  <span class=\"hljs-comment\">// An array of a certain type</span><br>  optionalArrayOf: PropTypes.arrayOf(PropTypes.<span class=\"hljs-built_in\">number</span>),<br><br>  <span class=\"hljs-comment\">// An object with property values of a certain type</span><br>  optionalObjectOf: PropTypes.objectOf(PropTypes.<span class=\"hljs-built_in\">number</span>),<br><br>  <span class=\"hljs-comment\">// An object taking on a particular shape</span><br>  optionalObjectWithShape: PropTypes.shape(&#123;<br>    <span class=\"hljs-attr\">color</span>: PropTypes.string,<br>    <span class=\"hljs-attr\">fontSize</span>: PropTypes.<span class=\"hljs-built_in\">number</span><br>  &#125;),<br><br>  <span class=\"hljs-comment\">// You can chain any of the above with `isRequired` to make sure a warning</span><br>  <span class=\"hljs-comment\">// is shown if the prop isn&#x27;t provided.</span><br>  requiredFunc: PropTypes.func.isRequired,<br><br>  <span class=\"hljs-comment\">// A value of any data type</span><br>  requiredAny: PropTypes.<span class=\"hljs-built_in\">any</span>.isRequired,<br><br>  <span class=\"hljs-comment\">// You can also specify a custom validator. It should return an Error</span><br>  <span class=\"hljs-comment\">// object if the validation fails. Don&#x27;t `console.warn` or throw, as this</span><br>  <span class=\"hljs-comment\">// won&#x27;t work inside `oneOfType`.</span><br>  customProp: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">props, propName, componentName</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-regexp\">/matchme/</span>.test(props[propName])) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Error(<br>        <span class=\"hljs-string\">&#x27;Invalid prop `&#x27;</span> + propName + <span class=\"hljs-string\">&#x27;` supplied to&#x27;</span> +<br>        <span class=\"hljs-string\">&#x27; `&#x27;</span> + componentName + <span class=\"hljs-string\">&#x27;`. Validation failed.&#x27;</span><br>      );<br>    &#125;<br>  &#125;,<br><br>  <span class=\"hljs-comment\">// You can also supply a custom validator to `arrayOf` and `objectOf`.</span><br>  <span class=\"hljs-comment\">// It should return an Error object if the validation fails. The validator</span><br>  <span class=\"hljs-comment\">// will be called for each key in the array or object. The first two</span><br>  <span class=\"hljs-comment\">// arguments of the validator are the array or object itself, and the</span><br>  <span class=\"hljs-comment\">// current item&#x27;s key.</span><br>  customArrayProp: PropTypes.arrayOf(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">propValue, key, componentName, location, propFullName</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-regexp\">/matchme/</span>.test(propValue[key])) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Error(<br>        <span class=\"hljs-string\">&#x27;Invalid prop `&#x27;</span> + propFullName + <span class=\"hljs-string\">&#x27;` supplied to&#x27;</span> +<br>        <span class=\"hljs-string\">&#x27; `&#x27;</span> + componentName + <span class=\"hljs-string\">&#x27;`. Validation failed.&#x27;</span><br>      );<br>    &#125;<br>  &#125;)<br>&#125;;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://reactjs.org/docs/hello-world.html\">react官网</a></p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><h4 id=\"1-无状态组件\"><a href=\"#1-无状态组件\" class=\"headerlink\" title=\"1. 无状态组件\"></a>1. 无状态组件</h4><ul>\n<li>在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。</li>\n<li>无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。</li>\n<li>无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。</li>\n</ul>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\">import React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;<br><br><span class=\"hljs-comment\">//创建方式一,相当于es5的函数声明的方式创建</span><br> function NoState (props) &#123;<br>     <span class=\"hljs-keyword\">return</span> (<br>         &lt;<span class=\"hljs-keyword\">div</span>&gt;<span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">is</span> NoState Component&lt;/<span class=\"hljs-keyword\">div</span>&gt;<br>     )<br> &#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-comment\">//创建方式二,相当于es5的函数表达式的方式创建</span><br><span class=\"hljs-keyword\">const</span> NoState = (props) =&gt; &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>        &lt;<span class=\"hljs-keyword\">div</span>&gt;<span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">is</span> Nostate Component&lt;/<span class=\"hljs-keyword\">div</span>&gt;<br>    )<br>&#125;<br><br>export <span class=\"hljs-literal\">default</span> NoState<br></code></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。</li>\n<li>无状态组件没有实例化得过程，因此无法访问组件this中的对象</li>\n<li>无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理</li>\n<li>无状态组件只能访问传入的props，同样的props会得到同样的渲染结果</li>\n</ul>\n<p>当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来<br>代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。<br>第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\"><span class=\"hljs-comment\">// helloWorld.jsx</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">React</span>, &#123;<span class=\"hljs-type\">Component</span>&#125; from &#x27;react&#x27;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloWorld</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>&#123;<br>    clickHander = () =&gt; &#123;<br>        console.log(<span class=\"hljs-keyword\">this</span>.props);<br>        console.log(<span class=\"hljs-keyword\">this</span>.props.name);<br>    &#125;<br><br>    render() &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            &lt;div onClick=&#123;<span class=\"hljs-keyword\">this</span>.clickHander&#125;&gt;&#123; <span class=\"hljs-keyword\">this</span>.props.name &#125; say: <span class=\"hljs-type\">Hello</span> <span class=\"hljs-type\">World</span>!&lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-type\">HelloWorld</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"组件之间的交互\"><a href=\"#组件之间的交互\" class=\"headerlink\" title=\"组件之间的交互\"></a>组件之间的交互</h2><h4 id=\"父组件与子组件之间的交互\"><a href=\"#父组件与子组件之间的交互\" class=\"headerlink\" title=\"父组件与子组件之间的交互\"></a>父组件与子组件之间的交互</h4><ol>\n<li>父组件修改子组件，只需要修改传入的props属性</li>\n<li>子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行<br>子组件与子组件之间的交互</li>\n<li>通过影响共同的父组件来进行交互</li>\n</ol>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pf\"><span class=\"hljs-keyword\">state</span> = &#123;<br>    switch: <span class=\"hljs-number\">0</span>,<br>    name: this.props.name1<br>&#125;<br>clickHander = () =&gt; &#123;<br>    <span class=\"hljs-keyword\">const</span> &#123;name1, name2&#125; = this.props;<br>    if (this.<span class=\"hljs-keyword\">state</span>.switch === <span class=\"hljs-number\">0</span>) &#123;<br>        this.<span class=\"hljs-built_in\">set</span>State(&#123;<br>            switch: <span class=\"hljs-number\">1</span>,<br>            name: name2<br>        &#125;)<br>    &#125; else &#123;<br>        this.<span class=\"hljs-built_in\">set</span>State(&#123;<br>            switch: <span class=\"hljs-number\">0</span>,<br>            name: name1<br>        &#125;)<br>    &#125;<br>&#125;;<br>render() &#123;<br>    return (<br>        <span class=\"hljs-variable\">&lt;div onClick=&#123;this.clickHander&#125;&gt;</span>hello world !&#123;this.<span class=\"hljs-keyword\">state</span>.name&#125;&lt;/div&gt;<br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。</p>\n<p>state &#x3D; {} &#x2F;&#x2F; 等同于ES5构造函数中的this.state &#x3D; {}<br>在对象中，我们可以通过this.state的方式来访问state中所存储的属性<br>setState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变<br>react赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了<br>而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行<br>&#x2F;&#x2F; 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: ‘Jason’})&#x2F;&#x2F; 然后立即查看它的值console.log(this.state.name) &#x2F;&#x2F; 仍然为Tom，不会立即改变</p>\n<h3 id=\"refs\"><a href=\"#refs\" class=\"headerlink\" title=\"refs\"></a>refs</h3><p>react组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span> 当然可能命名会是其他的，大概表达一个意思，不深究哈<br>&#123;<br>    nodeName: <span class=\"hljs-string\">&#x27;div&#x27;</span>,<br>    className: <span class=\"hljs-string\">&#x27;hello-world&#x27;</span>,<br>    style: &#123;&#125;,<br>    parentNodes: <span class=\"hljs-string\">&#x27;root&#x27;</span>,<br>    childrenNodes: []<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">React</span>, &#123; <span class=\"hljs-type\">Component</span> &#125; from &#x27;react&#x27;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloWorld</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>&#123;<br>    clickHander = () =&gt; &#123;<br>        console.log(<span class=\"hljs-keyword\">this</span>.refs)<br>    &#125; <br>    render () &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            &lt;div className=<span class=\"hljs-string\">&quot;container&quot;</span> onClick=&#123;<span class=\"hljs-keyword\">this</span>.clickHander&#125;&gt;<br>                &lt;div ref=<span class=\"hljs-string\">&quot;hello&quot;</span> className=<span class=\"hljs-string\">&quot;hello&quot;</span>&gt;<span class=\"hljs-type\">Hello</span>&lt;/div&gt;<br>                &lt;div ref=<span class=\"hljs-string\">&quot;world&quot;</span> className=<span class=\"hljs-string\">&quot;world&quot;</span>&gt;<span class=\"hljs-type\">World</span>&lt;/div&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-type\">HelloWorld</span>;<br></code></pre></td></tr></table></figure>\n\n<p>为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替<br>我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。<br>当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// src/helloWorld.jsx</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, &#123; <span class=\"hljs-title class_\">Component</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorld</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Component</span> &#123;<br>    clickHander = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">refs</span>)<br>    &#125; refCallback = <span class=\"hljs-function\">(<span class=\"hljs-params\">elem</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(elem);<br>    &#125; render () &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;container&quot;</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.clickHander&#125;</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;hello&quot;</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;hello&quot;</span>&gt;</span>Hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;this.refCallback&#125;</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;world&quot;</span>&gt;</span>World<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">HelloWorld</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"组件生命周期\"></a>组件生命周期</h3><p>件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数</p>\n<h5 id=\"react组件有三种状态\"><a href=\"#react组件有三种状态\" class=\"headerlink\" title=\"react组件有三种状态\"></a>react组件有三种状态</h5><ul>\n<li>Mounted：已经插入真实DOM</li>\n<li>Updating：正在被重新渲染</li>\n<li>Unmounted：已移出真实DOM</li>\n<li></li>\n</ul>\n<h5 id=\"每个状态的处理函数\"><a href=\"#每个状态的处理函数\" class=\"headerlink\" title=\"每个状态的处理函数\"></a>每个状态的处理函数</h5><ul>\n<li>will：函数在进入状态之前调用</li>\n<li>did：函数在进入状态之后调用</li>\n</ul>\n<h5 id=\"组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\"><a href=\"#组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\" class=\"headerlink\" title=\"组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\"></a>组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中</h5><ul>\n<li>componentWillMount 在首次渲染完成之前，此时可修改组件的state</li>\n<li>componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM</li>\n</ul>\n<h5 id=\"组件属性-我们前面提到的props与state-更新的前后时刻\"><a href=\"#组件属性-我们前面提到的props与state-更新的前后时刻\" class=\"headerlink\" title=\"组件属性(我们前面提到的props与state)更新的前后时刻\"></a>组件属性(我们前面提到的props与state)更新的前后时刻</h5><ul>\n<li>componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state</li>\n<li>componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素</li>\n</ul>\n<h6 id=\"组件取消挂载之前-取消之后就没必要提供钩子函数了\"><a href=\"#组件取消挂载之前-取消之后就没必要提供钩子函数了\" class=\"headerlink\" title=\"组件取消挂载之前(取消之后就没必要提供钩子函数了)\"></a>组件取消挂载之前(取消之后就没必要提供钩子函数了)</h6><p><code>componentWillUnmount</code></p>\n<h6 id=\"两个特殊的处理函数\"><a href=\"#两个特殊的处理函数\" class=\"headerlink\" title=\"两个特殊的处理函数\"></a>两个特殊的处理函数</h6><ul>\n<li><code>componentWillReceiveProps(object nextProps)</code>：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变-&gt;然后componentWillReceiveProps去判断是否需要重新渲染(<code>shouldComponentUpdate</code>)-&gt;如果不需要则继续running-&gt;如果需要则执行<code>componentWillUpdate</code>-&gt;渲染DOM树之后执行<code>componentDidUpdate</code>-&gt;进入running</li>\n<li><code>shouldComponentUpdate(nextProps, nextState)</code>(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变-&gt;判断是否需要重新渲染新的props和state(<code>shouldComponentUpdate</code>) -&gt; 根据判断决定执行render过程还是继续·保持running状态</li>\n</ul>\n<h6 id=\"三个统一调用的方法-用于组件初始化，获取默认属性和状态\"><a href=\"#三个统一调用的方法-用于组件初始化，获取默认属性和状态\" class=\"headerlink\" title=\"三个统一调用的方法,用于组件初始化，获取默认属性和状态\"></a>三个统一调用的方法,用于组件初始化，获取默认属性和状态</h6><ul>\n<li>getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享</li>\n<li>getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props</li>\n<li>render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出</li>\n</ul>\n<h6 id=\"已挂载的方法\"><a href=\"#已挂载的方法\" class=\"headerlink\" title=\"已挂载的方法\"></a>已挂载的方法</h6><ul>\n<li>component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候</li>\n</ul>\n<blockquote>\n<p>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。</p>\n</blockquote>\n<p><img src=\"http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg\" alt=\"image\"></p>\n<h2 id=\"PropTypes\"><a href=\"#PropTypes\" class=\"headerlink\" title=\"PropTypes\"></a>PropTypes</h2><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">import PropTypes from <span class=\"hljs-string\">&#x27;prop-types&#x27;</span>;<br><br>MyComponent.propTypes = &#123;<br>  <span class=\"hljs-comment\">// You can declare that a prop is a specific JS primitive. By default, these</span><br>  <span class=\"hljs-comment\">// are all optional.</span><br>  optionalArray: PropTypes.<span class=\"hljs-built_in\">array</span>,<br>  <span class=\"hljs-attr\">optionalBool</span>: PropTypes.bool,<br>  <span class=\"hljs-attr\">optionalFunc</span>: PropTypes.func,<br>  <span class=\"hljs-attr\">optionalNumber</span>: PropTypes.<span class=\"hljs-built_in\">number</span>,<br>  <span class=\"hljs-attr\">optionalObject</span>: PropTypes.object,<br>  <span class=\"hljs-attr\">optionalString</span>: PropTypes.string,<br>  <span class=\"hljs-attr\">optionalSymbol</span>: PropTypes.symbol,<br><br>  <span class=\"hljs-comment\">// Anything that can be rendered: numbers, strings, elements or an array</span><br>  <span class=\"hljs-comment\">// (or fragment) containing these types.</span><br>  optionalNode: PropTypes.node,<br><br>  <span class=\"hljs-comment\">// A React element.</span><br>  optionalElement: PropTypes.element,<br><br>  <span class=\"hljs-comment\">// You can also declare that a prop is an instance of a class. This uses</span><br>  <span class=\"hljs-comment\">// JS&#x27;s instanceof operator.</span><br>  optionalMessage: PropTypes.instanceOf(Message),<br><br>  <span class=\"hljs-comment\">// You can ensure that your prop is limited to specific values by treating</span><br>  <span class=\"hljs-comment\">// it as an enum.</span><br>  optionalEnum: PropTypes.oneOf([<span class=\"hljs-string\">&#x27;News&#x27;</span>, <span class=\"hljs-string\">&#x27;Photos&#x27;</span>]),<br><br>  <span class=\"hljs-comment\">// An object that could be one of many types</span><br>  optionalUnion: PropTypes.oneOfType([<br>    PropTypes.string,<br>    PropTypes.<span class=\"hljs-built_in\">number</span>,<br>    PropTypes.instanceOf(Message)<br>  ]),<br><br>  <span class=\"hljs-comment\">// An array of a certain type</span><br>  optionalArrayOf: PropTypes.arrayOf(PropTypes.<span class=\"hljs-built_in\">number</span>),<br><br>  <span class=\"hljs-comment\">// An object with property values of a certain type</span><br>  optionalObjectOf: PropTypes.objectOf(PropTypes.<span class=\"hljs-built_in\">number</span>),<br><br>  <span class=\"hljs-comment\">// An object taking on a particular shape</span><br>  optionalObjectWithShape: PropTypes.shape(&#123;<br>    <span class=\"hljs-attr\">color</span>: PropTypes.string,<br>    <span class=\"hljs-attr\">fontSize</span>: PropTypes.<span class=\"hljs-built_in\">number</span><br>  &#125;),<br><br>  <span class=\"hljs-comment\">// You can chain any of the above with `isRequired` to make sure a warning</span><br>  <span class=\"hljs-comment\">// is shown if the prop isn&#x27;t provided.</span><br>  requiredFunc: PropTypes.func.isRequired,<br><br>  <span class=\"hljs-comment\">// A value of any data type</span><br>  requiredAny: PropTypes.<span class=\"hljs-built_in\">any</span>.isRequired,<br><br>  <span class=\"hljs-comment\">// You can also specify a custom validator. It should return an Error</span><br>  <span class=\"hljs-comment\">// object if the validation fails. Don&#x27;t `console.warn` or throw, as this</span><br>  <span class=\"hljs-comment\">// won&#x27;t work inside `oneOfType`.</span><br>  customProp: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">props, propName, componentName</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-regexp\">/matchme/</span>.test(props[propName])) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Error(<br>        <span class=\"hljs-string\">&#x27;Invalid prop `&#x27;</span> + propName + <span class=\"hljs-string\">&#x27;` supplied to&#x27;</span> +<br>        <span class=\"hljs-string\">&#x27; `&#x27;</span> + componentName + <span class=\"hljs-string\">&#x27;`. Validation failed.&#x27;</span><br>      );<br>    &#125;<br>  &#125;,<br><br>  <span class=\"hljs-comment\">// You can also supply a custom validator to `arrayOf` and `objectOf`.</span><br>  <span class=\"hljs-comment\">// It should return an Error object if the validation fails. The validator</span><br>  <span class=\"hljs-comment\">// will be called for each key in the array or object. The first two</span><br>  <span class=\"hljs-comment\">// arguments of the validator are the array or object itself, and the</span><br>  <span class=\"hljs-comment\">// current item&#x27;s key.</span><br>  customArrayProp: PropTypes.arrayOf(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">propValue, key, componentName, location, propFullName</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-regexp\">/matchme/</span>.test(propValue[key])) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Error(<br>        <span class=\"hljs-string\">&#x27;Invalid prop `&#x27;</span> + propFullName + <span class=\"hljs-string\">&#x27;` supplied to&#x27;</span> +<br>        <span class=\"hljs-string\">&#x27; `&#x27;</span> + componentName + <span class=\"hljs-string\">&#x27;`. Validation failed.&#x27;</span><br>      );<br>    &#125;<br>  &#125;)<br>&#125;;<br></code></pre></td></tr></table></figure>"},{"title":"nginx配置","date":"2018-05-09T09:39:55.000Z","_content":"\n### nginx配置\n\n```js\nuser www-data;\n#启动进程,通常设置成和cpu的数量相等\nworker_processes 2;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents {\n    worker_connections 768;\n    # multi_accept on;\n}\n\nhttp {\n    ##\n    # Basic Settings\n    ##\n\n    sendfile on;\n    tcp_nopush on;\n    types_hash_max_size 2048;\n    # server_tokens off;\n\n    # server_names_hash_bucket_size 64;\n    # server_name_in_redirect off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    ##\n    # SSL Settings\n    ##\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE\n    ssl_prefer_server_ciphers on;\n\n    ##\n    # Logging Settings\n    ##\n\n    access_log /var/log/nginx/access.log;\n    error_log /var/log/nginx/error.log;\n\n    # Gzip Settings\n    gzip on;\n    gzip_min_length 1000;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_buffers 16 8k;\n    gzip_http_version 1.1;\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n    ##\n    # Virtual Host Configs\n    ##\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n\n\n    map $sent_http_content_type $expires {\n        \"text/html\" epoch;\n        \"text/html; charset=utf-8\" epoch;\n        default off;\n    }\n\n    server {\n        listen 80;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life;\n        return 301 https://$host$request_uri;\n        # gzip on;\n        # gzip_types text/plain application/xml text/css application/javascript;\n        # gzip_min_length 1000;\n\n        # location / {\n        #     expires $expires;\n        #     proxy_redirect off;\n        #     proxy_set_header Host $host;\n        #     proxy_set_header X-Real-IP $remote_addr;\n        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        #     proxy_set_header X-Forwarded-Proto $scheme;\n        #     proxy_read_timeout 1m;\n        #     proxy_connect_timeout 1m;\n        #     proxy_pass http://127.0.0.1:3000/;\n        # }\n        # location ~ /.well-known {\n        #     allow all;\n        # }\n        # location ^~ /.well-known/pki-validation/ {\n        #     add_header Cache-Control no-cache;\n        #     default_type \"text/plain\";\n        #     rewrite /.well-known/pki-validation/(.*) /$1 break;\n        #     root /var/www/whatever;\n        # }\n        # location /nuxt3-tag {\n        #     expires $expires;\n        #     proxy_redirect off;\n        #     proxy_set_header Host $host;\n        #     proxy_set_header X-Real-IP $remote_addr;\n        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        #     proxy_set_header X-Forwarded-Proto $scheme;\n        #     proxy_read_timeout 1m;\n        #     proxy_connect_timeout 1m;\n        #     proxy_pass http://127.0.0.1:3000/nuxt3-tag;\n        # }\n        # location /stable {\n        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;\n        # }\n        # location /nuxt3 {\n        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;\n        # }\n        # location /tag {\n        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;\n        # }\n        # location /stable/api {\n        #     proxy_pass http://www.ptg.life:5000/api;\n        #     proxy_set_header Access-Control-Max-Age 86400;\n        #     proxy_set_header Host $host;\n        #     proxy_redirect off;\n        #     proxy_set_header X-Real-IP $remote_addr;\n        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        #     proxy_connect_timeout 60;\n        #     proxy_read_timeout 60;\n        #     proxy_send_timeout 60;\n        # }\n        # location /static/ {\n        #     valid_referers none blocked *.ptg.life;\n        #     if ($invalid_referer) {\n        #         return 403;\n        #         break;\n        #     }\n        #     expires 30d;\n        #     autoindex on;\n        #     root /data;\n        # }\n    }\n\n    server {\n        listen 443 ssl;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;\n\n        # 新版的nginx只用listen 443 ssl就行,需要注释\n        # ssl on;\n        keepalive_timeout 10m;\n        server_tokens off;\n        # 缓存SSL握手产生的参数和加密密钥的时长\n        ssl_session_timeout 10m;\n        # 证书\n        ssl_certificate /etc/nginx/certificate.crt;\n        ssl_certificate_key /etc/nginx/private.key;\n        # 日志\n        access_log /var/log/nginx/nginx.vhost.access.log;\n        error_log /var/log/nginx/nginx.vhost.error.log;\n\n        # 根用iframe嵌入做个隐式url\n        location / {\n            index index.html index.htm index.html inde.php;\n            root /usr/share/nginx/html;\n        }\n\n        location ~ /.well-known {\n            allow all;\n        }\n\n        location ^~ /.well-known/pki-validation/ {\n            add_header Cache-Control no-cache;\n            default_type \"text/plain\";\n            rewrite /.well-known/pki-validation/(.*) /$1 break;\n            root /var/www/whatever;\n        }\n\n        location /nuxt3-tag/ {\n            expires $expires;\n            proxy_redirect off;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_read_timeout 1m;\n            proxy_connect_timeout 1m;\n            proxy_pass http://127.0.0.1:3000/nuxt3-tag/;\n        }\n\n        location /naifu/ {\n            expires $expires;\n            proxy_redirect off;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_read_timeout 1m;\n            proxy_connect_timeout 1m;\n            proxy_pass http://127.0.0.1:3000/naifu/;\n        }\n\n        location /nuxt3 {\n            rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent;\n        }\n\n        location /tag {\n            rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent;\n        }\n\n        # flask的接口代理\n        location /stable/api {\n            proxy_pass http://127.0.0.1:5000/api;\n            proxy_set_header Access-Control-Max-Age 86400;\n            proxy_set_header Host $host;\n            proxy_redirect off;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_connect_timeout 60;\n            proxy_read_timeout 60;\n            proxy_send_timeout 60;\n        }\n\n        location /static/ {\n            valid_referers none blocked *.ptg.life;\n            if ($invalid_referer) {\n                return 403;\n                break;\n            }\n            expires 30d;\n            autoindex on;\n            root /data;\n        }\n    }\n}\n```\n","source":"_posts/nginx配置.md","raw":"---\ntitle: 'nginx配置'\ndate: 2018-05-09 17:39:55\ntags: nginx\n---\n\n### nginx配置\n\n```js\nuser www-data;\n#启动进程,通常设置成和cpu的数量相等\nworker_processes 2;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents {\n    worker_connections 768;\n    # multi_accept on;\n}\n\nhttp {\n    ##\n    # Basic Settings\n    ##\n\n    sendfile on;\n    tcp_nopush on;\n    types_hash_max_size 2048;\n    # server_tokens off;\n\n    # server_names_hash_bucket_size 64;\n    # server_name_in_redirect off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    ##\n    # SSL Settings\n    ##\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE\n    ssl_prefer_server_ciphers on;\n\n    ##\n    # Logging Settings\n    ##\n\n    access_log /var/log/nginx/access.log;\n    error_log /var/log/nginx/error.log;\n\n    # Gzip Settings\n    gzip on;\n    gzip_min_length 1000;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_buffers 16 8k;\n    gzip_http_version 1.1;\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n    ##\n    # Virtual Host Configs\n    ##\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n\n\n    map $sent_http_content_type $expires {\n        \"text/html\" epoch;\n        \"text/html; charset=utf-8\" epoch;\n        default off;\n    }\n\n    server {\n        listen 80;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life;\n        return 301 https://$host$request_uri;\n        # gzip on;\n        # gzip_types text/plain application/xml text/css application/javascript;\n        # gzip_min_length 1000;\n\n        # location / {\n        #     expires $expires;\n        #     proxy_redirect off;\n        #     proxy_set_header Host $host;\n        #     proxy_set_header X-Real-IP $remote_addr;\n        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        #     proxy_set_header X-Forwarded-Proto $scheme;\n        #     proxy_read_timeout 1m;\n        #     proxy_connect_timeout 1m;\n        #     proxy_pass http://127.0.0.1:3000/;\n        # }\n        # location ~ /.well-known {\n        #     allow all;\n        # }\n        # location ^~ /.well-known/pki-validation/ {\n        #     add_header Cache-Control no-cache;\n        #     default_type \"text/plain\";\n        #     rewrite /.well-known/pki-validation/(.*) /$1 break;\n        #     root /var/www/whatever;\n        # }\n        # location /nuxt3-tag {\n        #     expires $expires;\n        #     proxy_redirect off;\n        #     proxy_set_header Host $host;\n        #     proxy_set_header X-Real-IP $remote_addr;\n        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        #     proxy_set_header X-Forwarded-Proto $scheme;\n        #     proxy_read_timeout 1m;\n        #     proxy_connect_timeout 1m;\n        #     proxy_pass http://127.0.0.1:3000/nuxt3-tag;\n        # }\n        # location /stable {\n        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;\n        # }\n        # location /nuxt3 {\n        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;\n        # }\n        # location /tag {\n        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;\n        # }\n        # location /stable/api {\n        #     proxy_pass http://www.ptg.life:5000/api;\n        #     proxy_set_header Access-Control-Max-Age 86400;\n        #     proxy_set_header Host $host;\n        #     proxy_redirect off;\n        #     proxy_set_header X-Real-IP $remote_addr;\n        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        #     proxy_connect_timeout 60;\n        #     proxy_read_timeout 60;\n        #     proxy_send_timeout 60;\n        # }\n        # location /static/ {\n        #     valid_referers none blocked *.ptg.life;\n        #     if ($invalid_referer) {\n        #         return 403;\n        #         break;\n        #     }\n        #     expires 30d;\n        #     autoindex on;\n        #     root /data;\n        # }\n    }\n\n    server {\n        listen 443 ssl;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;\n\n        # 新版的nginx只用listen 443 ssl就行,需要注释\n        # ssl on;\n        keepalive_timeout 10m;\n        server_tokens off;\n        # 缓存SSL握手产生的参数和加密密钥的时长\n        ssl_session_timeout 10m;\n        # 证书\n        ssl_certificate /etc/nginx/certificate.crt;\n        ssl_certificate_key /etc/nginx/private.key;\n        # 日志\n        access_log /var/log/nginx/nginx.vhost.access.log;\n        error_log /var/log/nginx/nginx.vhost.error.log;\n\n        # 根用iframe嵌入做个隐式url\n        location / {\n            index index.html index.htm index.html inde.php;\n            root /usr/share/nginx/html;\n        }\n\n        location ~ /.well-known {\n            allow all;\n        }\n\n        location ^~ /.well-known/pki-validation/ {\n            add_header Cache-Control no-cache;\n            default_type \"text/plain\";\n            rewrite /.well-known/pki-validation/(.*) /$1 break;\n            root /var/www/whatever;\n        }\n\n        location /nuxt3-tag/ {\n            expires $expires;\n            proxy_redirect off;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_read_timeout 1m;\n            proxy_connect_timeout 1m;\n            proxy_pass http://127.0.0.1:3000/nuxt3-tag/;\n        }\n\n        location /naifu/ {\n            expires $expires;\n            proxy_redirect off;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_read_timeout 1m;\n            proxy_connect_timeout 1m;\n            proxy_pass http://127.0.0.1:3000/naifu/;\n        }\n\n        location /nuxt3 {\n            rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent;\n        }\n\n        location /tag {\n            rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent;\n        }\n\n        # flask的接口代理\n        location /stable/api {\n            proxy_pass http://127.0.0.1:5000/api;\n            proxy_set_header Access-Control-Max-Age 86400;\n            proxy_set_header Host $host;\n            proxy_redirect off;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_connect_timeout 60;\n            proxy_read_timeout 60;\n            proxy_send_timeout 60;\n        }\n\n        location /static/ {\n            valid_referers none blocked *.ptg.life;\n            if ($invalid_referer) {\n                return 403;\n                break;\n            }\n            expires 30d;\n            autoindex on;\n            root /data;\n        }\n    }\n}\n```\n","slug":"nginx配置","published":1,"updated":"2023-01-11T04:00:13.484Z","_id":"clcr4qe5x0000kmh05krbg26k","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">user www-data;<br>#启动进程,通常设置成和cpu的数量相等<br>worker_processes <span class=\"hljs-number\">2</span>;<br>pid /run/nginx.<span class=\"hljs-property\">pid</span>;<br>include /etc/nginx/modules-enabled<span class=\"hljs-comment\">/*.conf;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">events &#123;</span><br><span class=\"hljs-comment\">    worker_connections 768;</span><br><span class=\"hljs-comment\">    # multi_accept on;</span><br><span class=\"hljs-comment\">&#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">http &#123;</span><br><span class=\"hljs-comment\">    ##</span><br><span class=\"hljs-comment\">    # Basic Settings</span><br><span class=\"hljs-comment\">    ##</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    sendfile on;</span><br><span class=\"hljs-comment\">    tcp_nopush on;</span><br><span class=\"hljs-comment\">    types_hash_max_size 2048;</span><br><span class=\"hljs-comment\">    # server_tokens off;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    # server_names_hash_bucket_size 64;</span><br><span class=\"hljs-comment\">    # server_name_in_redirect off;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    include /etc/nginx/mime.types;</span><br><span class=\"hljs-comment\">    default_type application/octet-stream;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    ##</span><br><span class=\"hljs-comment\">    # SSL Settings</span><br><span class=\"hljs-comment\">    ##</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE</span><br><span class=\"hljs-comment\">    ssl_prefer_server_ciphers on;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    ##</span><br><span class=\"hljs-comment\">    # Logging Settings</span><br><span class=\"hljs-comment\">    ##</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    access_log /var/log/nginx/access.log;</span><br><span class=\"hljs-comment\">    error_log /var/log/nginx/error.log;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    # Gzip Settings</span><br><span class=\"hljs-comment\">    gzip on;</span><br><span class=\"hljs-comment\">    gzip_min_length 1000;</span><br><span class=\"hljs-comment\">    gzip_vary on;</span><br><span class=\"hljs-comment\">    gzip_proxied any;</span><br><span class=\"hljs-comment\">    gzip_comp_level 6;</span><br><span class=\"hljs-comment\">    gzip_buffers 16 8k;</span><br><span class=\"hljs-comment\">    gzip_http_version 1.1;</span><br><span class=\"hljs-comment\">    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    ##</span><br><span class=\"hljs-comment\">    # Virtual Host Configs</span><br><span class=\"hljs-comment\">    ##</span><br><span class=\"hljs-comment\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"hljs-comment\">    include /etc/nginx/sites-enabled/*;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    map $sent_http_content_type $expires &#123;</span><br><span class=\"hljs-comment\">        &quot;text/html&quot; epoch;</span><br><span class=\"hljs-comment\">        &quot;text/html; charset=utf-8&quot; epoch;</span><br><span class=\"hljs-comment\">        default off;</span><br><span class=\"hljs-comment\">    &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    server &#123;</span><br><span class=\"hljs-comment\">        listen 80;</span><br><span class=\"hljs-comment\">        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life;</span><br><span class=\"hljs-comment\">        return 301 https://$host$request_uri;</span><br><span class=\"hljs-comment\">        # gzip on;</span><br><span class=\"hljs-comment\">        # gzip_types text/plain application/xml text/css application/javascript;</span><br><span class=\"hljs-comment\">        # gzip_min_length 1000;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">        # location / &#123;</span><br><span class=\"hljs-comment\">        #     expires $expires;</span><br><span class=\"hljs-comment\">        #     proxy_redirect off;</span><br><span class=\"hljs-comment\">        #     proxy_set_header Host $host;</span><br><span class=\"hljs-comment\">        #     proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"hljs-comment\">        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"hljs-comment\">        #     proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"hljs-comment\">        #     proxy_read_timeout 1m;</span><br><span class=\"hljs-comment\">        #     proxy_connect_timeout 1m;</span><br><span class=\"hljs-comment\">        #     proxy_pass http://127.0.0.1:3000/;</span><br><span class=\"hljs-comment\">        # &#125;</span><br><span class=\"hljs-comment\">        # location ~ /.well-known &#123;</span><br><span class=\"hljs-comment\">        #     allow all;</span><br><span class=\"hljs-comment\">        # &#125;</span><br><span class=\"hljs-comment\">        # location ^~ /.well-known/pki-validation/ &#123;</span><br><span class=\"hljs-comment\">        #     add_header Cache-Control no-cache;</span><br><span class=\"hljs-comment\">        #     default_type &quot;text/plain&quot;;</span><br><span class=\"hljs-comment\">        #     rewrite /.well-known/pki-validation/(.*) /$1 break;</span><br><span class=\"hljs-comment\">        #     root /var/www/whatever;</span><br><span class=\"hljs-comment\">        # &#125;</span><br><span class=\"hljs-comment\">        # location /nuxt3-tag &#123;</span><br><span class=\"hljs-comment\">        #     expires $expires;</span><br><span class=\"hljs-comment\">        #     proxy_redirect off;</span><br><span class=\"hljs-comment\">        #     proxy_set_header Host $host;</span><br><span class=\"hljs-comment\">        #     proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"hljs-comment\">        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"hljs-comment\">        #     proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"hljs-comment\">        #     proxy_read_timeout 1m;</span><br><span class=\"hljs-comment\">        #     proxy_connect_timeout 1m;</span><br><span class=\"hljs-comment\">        #     proxy_pass http://127.0.0.1:3000/nuxt3-tag;</span><br><span class=\"hljs-comment\">        # &#125;</span><br><span class=\"hljs-comment\">        # location /stable &#123;</span><br><span class=\"hljs-comment\">        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;</span><br><span class=\"hljs-comment\">        # &#125;</span><br><span class=\"hljs-comment\">        # location /nuxt3 &#123;</span><br><span class=\"hljs-comment\">        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;</span><br><span class=\"hljs-comment\">        # &#125;</span><br><span class=\"hljs-comment\">        # location /tag &#123;</span><br><span class=\"hljs-comment\">        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;</span><br><span class=\"hljs-comment\">        # &#125;</span><br><span class=\"hljs-comment\">        # location /stable/api &#123;</span><br><span class=\"hljs-comment\">        #     proxy_pass http://www.ptg.life:5000/api;</span><br><span class=\"hljs-comment\">        #     proxy_set_header Access-Control-Max-Age 86400;</span><br><span class=\"hljs-comment\">        #     proxy_set_header Host $host;</span><br><span class=\"hljs-comment\">        #     proxy_redirect off;</span><br><span class=\"hljs-comment\">        #     proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"hljs-comment\">        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"hljs-comment\">        #     proxy_connect_timeout 60;</span><br><span class=\"hljs-comment\">        #     proxy_read_timeout 60;</span><br><span class=\"hljs-comment\">        #     proxy_send_timeout 60;</span><br><span class=\"hljs-comment\">        # &#125;</span><br><span class=\"hljs-comment\">        # location /static/ &#123;</span><br><span class=\"hljs-comment\">        #     valid_referers none blocked *.ptg.life;</span><br><span class=\"hljs-comment\">        #     if ($invalid_referer) &#123;</span><br><span class=\"hljs-comment\">        #         return 403;</span><br><span class=\"hljs-comment\">        #         break;</span><br><span class=\"hljs-comment\">        #     &#125;</span><br><span class=\"hljs-comment\">        #     expires 30d;</span><br><span class=\"hljs-comment\">        #     autoindex on;</span><br><span class=\"hljs-comment\">        #     root /data;</span><br><span class=\"hljs-comment\">        # &#125;</span><br><span class=\"hljs-comment\">    &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    server &#123;</span><br><span class=\"hljs-comment\">        listen 443 ssl;</span><br><span class=\"hljs-comment\">        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">        # 新版的nginx只用listen 443 ssl就行,需要注释</span><br><span class=\"hljs-comment\">        # ssl on;</span><br><span class=\"hljs-comment\">        keepalive_timeout 10m;</span><br><span class=\"hljs-comment\">        server_tokens off;</span><br><span class=\"hljs-comment\">        # 缓存SSL握手产生的参数和加密密钥的时长</span><br><span class=\"hljs-comment\">        ssl_session_timeout 10m;</span><br><span class=\"hljs-comment\">        # 证书</span><br><span class=\"hljs-comment\">        ssl_certificate /etc/nginx/certificate.crt;</span><br><span class=\"hljs-comment\">        ssl_certificate_key /etc/nginx/private.key;</span><br><span class=\"hljs-comment\">        # 日志</span><br><span class=\"hljs-comment\">        access_log /var/log/nginx/nginx.vhost.access.log;</span><br><span class=\"hljs-comment\">        error_log /var/log/nginx/nginx.vhost.error.log;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">        # 根用iframe嵌入做个隐式url</span><br><span class=\"hljs-comment\">        location / &#123;</span><br><span class=\"hljs-comment\">            index index.html index.htm index.html inde.php;</span><br><span class=\"hljs-comment\">            root /usr/share/nginx/html;</span><br><span class=\"hljs-comment\">        &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">        location ~ /.well-known &#123;</span><br><span class=\"hljs-comment\">            allow all;</span><br><span class=\"hljs-comment\">        &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">        location ^~ /.well-known/pki-validation/ &#123;</span><br><span class=\"hljs-comment\">            add_header Cache-Control no-cache;</span><br><span class=\"hljs-comment\">            default_type &quot;text/plain&quot;;</span><br><span class=\"hljs-comment\">            rewrite /.well-known/pki-validation/(.*) /$1 break;</span><br><span class=\"hljs-comment\">            root /var/www/whatever;</span><br><span class=\"hljs-comment\">        &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">        location /nuxt3-tag/ &#123;</span><br><span class=\"hljs-comment\">            expires $expires;</span><br><span class=\"hljs-comment\">            proxy_redirect off;</span><br><span class=\"hljs-comment\">            proxy_set_header Host $host;</span><br><span class=\"hljs-comment\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"hljs-comment\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"hljs-comment\">            proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"hljs-comment\">            proxy_read_timeout 1m;</span><br><span class=\"hljs-comment\">            proxy_connect_timeout 1m;</span><br><span class=\"hljs-comment\">            proxy_pass http://127.0.0.1:3000/nuxt3-tag/;</span><br><span class=\"hljs-comment\">        &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">        location /naifu/ &#123;</span><br><span class=\"hljs-comment\">            expires $expires;</span><br><span class=\"hljs-comment\">            proxy_redirect off;</span><br><span class=\"hljs-comment\">            proxy_set_header Host $host;</span><br><span class=\"hljs-comment\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"hljs-comment\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"hljs-comment\">            proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"hljs-comment\">            proxy_read_timeout 1m;</span><br><span class=\"hljs-comment\">            proxy_connect_timeout 1m;</span><br><span class=\"hljs-comment\">            proxy_pass http://127.0.0.1:3000/naifu/;</span><br><span class=\"hljs-comment\">        &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">        location /nuxt3 &#123;</span><br><span class=\"hljs-comment\">            rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent;</span><br><span class=\"hljs-comment\">        &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">        location /tag &#123;</span><br><span class=\"hljs-comment\">            rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent;</span><br><span class=\"hljs-comment\">        &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">        # flask的接口代理</span><br><span class=\"hljs-comment\">        location /stable/api &#123;</span><br><span class=\"hljs-comment\">            proxy_pass http://127.0.0.1:5000/api;</span><br><span class=\"hljs-comment\">            proxy_set_header Access-Control-Max-Age 86400;</span><br><span class=\"hljs-comment\">            proxy_set_header Host $host;</span><br><span class=\"hljs-comment\">            proxy_redirect off;</span><br><span class=\"hljs-comment\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"hljs-comment\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"hljs-comment\">            proxy_connect_timeout 60;</span><br><span class=\"hljs-comment\">            proxy_read_timeout 60;</span><br><span class=\"hljs-comment\">            proxy_send_timeout 60;</span><br><span class=\"hljs-comment\">        &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">        location /static/ &#123;</span><br><span class=\"hljs-comment\">            valid_referers none blocked *.ptg.life;</span><br><span class=\"hljs-comment\">            if ($invalid_referer) &#123;</span><br><span class=\"hljs-comment\">                return 403;</span><br><span class=\"hljs-comment\">                break;</span><br><span class=\"hljs-comment\">            &#125;</span><br><span class=\"hljs-comment\">            expires 30d;</span><br><span class=\"hljs-comment\">            autoindex on;</span><br><span class=\"hljs-comment\">            root /data;</span><br><span class=\"hljs-comment\">        &#125;</span><br><span class=\"hljs-comment\">    &#125;</span><br><span class=\"hljs-comment\">&#125;</span><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">user www-data;<br>#启动进程,通常设置成和cpu的数量相等<br>worker_processes <span class=\"hljs-number\">2</span>;<br>pid /run/nginx.<span class=\"hljs-property\">pid</span>;<br>include /etc/nginx/modules-enabled<span class=\"hljs-comment\">/*.conf;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">events &#123;</span><br><span class=\"hljs-comment\">    worker_connections 768;</span><br><span class=\"hljs-comment\">    # multi_accept on;</span><br><span class=\"hljs-comment\">&#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">http &#123;</span><br><span class=\"hljs-comment\">    ##</span><br><span class=\"hljs-comment\">    # Basic Settings</span><br><span class=\"hljs-comment\">    ##</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    sendfile on;</span><br><span class=\"hljs-comment\">    tcp_nopush on;</span><br><span class=\"hljs-comment\">    types_hash_max_size 2048;</span><br><span class=\"hljs-comment\">    # server_tokens off;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    # server_names_hash_bucket_size 64;</span><br><span class=\"hljs-comment\">    # server_name_in_redirect off;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    include /etc/nginx/mime.types;</span><br><span class=\"hljs-comment\">    default_type application/octet-stream;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    ##</span><br><span class=\"hljs-comment\">    # SSL Settings</span><br><span class=\"hljs-comment\">    ##</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE</span><br><span class=\"hljs-comment\">    ssl_prefer_server_ciphers on;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    ##</span><br><span class=\"hljs-comment\">    # Logging Settings</span><br><span class=\"hljs-comment\">    ##</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    access_log /var/log/nginx/access.log;</span><br><span class=\"hljs-comment\">    error_log /var/log/nginx/error.log;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    # Gzip Settings</span><br><span class=\"hljs-comment\">    gzip on;</span><br><span class=\"hljs-comment\">    gzip_min_length 1000;</span><br><span class=\"hljs-comment\">    gzip_vary on;</span><br><span class=\"hljs-comment\">    gzip_proxied any;</span><br><span class=\"hljs-comment\">    gzip_comp_level 6;</span><br><span class=\"hljs-comment\">    gzip_buffers 16 8k;</span><br><span class=\"hljs-comment\">    gzip_http_version 1.1;</span><br><span class=\"hljs-comment\">    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    ##</span><br><span class=\"hljs-comment\">    # Virtual Host Configs</span><br><span class=\"hljs-comment\">    ##</span><br><span class=\"hljs-comment\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"hljs-comment\">    include /etc/nginx/sites-enabled/*;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    map $sent_http_content_type $expires &#123;</span><br><span class=\"hljs-comment\">        &quot;text/html&quot; epoch;</span><br><span class=\"hljs-comment\">        &quot;text/html; charset=utf-8&quot; epoch;</span><br><span class=\"hljs-comment\">        default off;</span><br><span class=\"hljs-comment\">    &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    server &#123;</span><br><span class=\"hljs-comment\">        listen 80;</span><br><span class=\"hljs-comment\">        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life;</span><br><span class=\"hljs-comment\">        return 301 https://$host$request_uri;</span><br><span class=\"hljs-comment\">        # gzip on;</span><br><span class=\"hljs-comment\">        # gzip_types text/plain application/xml text/css application/javascript;</span><br><span class=\"hljs-comment\">        # gzip_min_length 1000;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">        # location / &#123;</span><br><span class=\"hljs-comment\">        #     expires $expires;</span><br><span class=\"hljs-comment\">        #     proxy_redirect off;</span><br><span class=\"hljs-comment\">        #     proxy_set_header Host $host;</span><br><span class=\"hljs-comment\">        #     proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"hljs-comment\">        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"hljs-comment\">        #     proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"hljs-comment\">        #     proxy_read_timeout 1m;</span><br><span class=\"hljs-comment\">        #     proxy_connect_timeout 1m;</span><br><span class=\"hljs-comment\">        #     proxy_pass http://127.0.0.1:3000/;</span><br><span class=\"hljs-comment\">        # &#125;</span><br><span class=\"hljs-comment\">        # location ~ /.well-known &#123;</span><br><span class=\"hljs-comment\">        #     allow all;</span><br><span class=\"hljs-comment\">        # &#125;</span><br><span class=\"hljs-comment\">        # location ^~ /.well-known/pki-validation/ &#123;</span><br><span class=\"hljs-comment\">        #     add_header Cache-Control no-cache;</span><br><span class=\"hljs-comment\">        #     default_type &quot;text/plain&quot;;</span><br><span class=\"hljs-comment\">        #     rewrite /.well-known/pki-validation/(.*) /$1 break;</span><br><span class=\"hljs-comment\">        #     root /var/www/whatever;</span><br><span class=\"hljs-comment\">        # &#125;</span><br><span class=\"hljs-comment\">        # location /nuxt3-tag &#123;</span><br><span class=\"hljs-comment\">        #     expires $expires;</span><br><span class=\"hljs-comment\">        #     proxy_redirect off;</span><br><span class=\"hljs-comment\">        #     proxy_set_header Host $host;</span><br><span class=\"hljs-comment\">        #     proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"hljs-comment\">        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"hljs-comment\">        #     proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"hljs-comment\">        #     proxy_read_timeout 1m;</span><br><span class=\"hljs-comment\">        #     proxy_connect_timeout 1m;</span><br><span class=\"hljs-comment\">        #     proxy_pass http://127.0.0.1:3000/nuxt3-tag;</span><br><span class=\"hljs-comment\">        # &#125;</span><br><span class=\"hljs-comment\">        # location /stable &#123;</span><br><span class=\"hljs-comment\">        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;</span><br><span class=\"hljs-comment\">        # &#125;</span><br><span class=\"hljs-comment\">        # location /nuxt3 &#123;</span><br><span class=\"hljs-comment\">        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;</span><br><span class=\"hljs-comment\">        # &#125;</span><br><span class=\"hljs-comment\">        # location /tag &#123;</span><br><span class=\"hljs-comment\">        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;</span><br><span class=\"hljs-comment\">        # &#125;</span><br><span class=\"hljs-comment\">        # location /stable/api &#123;</span><br><span class=\"hljs-comment\">        #     proxy_pass http://www.ptg.life:5000/api;</span><br><span class=\"hljs-comment\">        #     proxy_set_header Access-Control-Max-Age 86400;</span><br><span class=\"hljs-comment\">        #     proxy_set_header Host $host;</span><br><span class=\"hljs-comment\">        #     proxy_redirect off;</span><br><span class=\"hljs-comment\">        #     proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"hljs-comment\">        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"hljs-comment\">        #     proxy_connect_timeout 60;</span><br><span class=\"hljs-comment\">        #     proxy_read_timeout 60;</span><br><span class=\"hljs-comment\">        #     proxy_send_timeout 60;</span><br><span class=\"hljs-comment\">        # &#125;</span><br><span class=\"hljs-comment\">        # location /static/ &#123;</span><br><span class=\"hljs-comment\">        #     valid_referers none blocked *.ptg.life;</span><br><span class=\"hljs-comment\">        #     if ($invalid_referer) &#123;</span><br><span class=\"hljs-comment\">        #         return 403;</span><br><span class=\"hljs-comment\">        #         break;</span><br><span class=\"hljs-comment\">        #     &#125;</span><br><span class=\"hljs-comment\">        #     expires 30d;</span><br><span class=\"hljs-comment\">        #     autoindex on;</span><br><span class=\"hljs-comment\">        #     root /data;</span><br><span class=\"hljs-comment\">        # &#125;</span><br><span class=\"hljs-comment\">    &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    server &#123;</span><br><span class=\"hljs-comment\">        listen 443 ssl;</span><br><span class=\"hljs-comment\">        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">        # 新版的nginx只用listen 443 ssl就行,需要注释</span><br><span class=\"hljs-comment\">        # ssl on;</span><br><span class=\"hljs-comment\">        keepalive_timeout 10m;</span><br><span class=\"hljs-comment\">        server_tokens off;</span><br><span class=\"hljs-comment\">        # 缓存SSL握手产生的参数和加密密钥的时长</span><br><span class=\"hljs-comment\">        ssl_session_timeout 10m;</span><br><span class=\"hljs-comment\">        # 证书</span><br><span class=\"hljs-comment\">        ssl_certificate /etc/nginx/certificate.crt;</span><br><span class=\"hljs-comment\">        ssl_certificate_key /etc/nginx/private.key;</span><br><span class=\"hljs-comment\">        # 日志</span><br><span class=\"hljs-comment\">        access_log /var/log/nginx/nginx.vhost.access.log;</span><br><span class=\"hljs-comment\">        error_log /var/log/nginx/nginx.vhost.error.log;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">        # 根用iframe嵌入做个隐式url</span><br><span class=\"hljs-comment\">        location / &#123;</span><br><span class=\"hljs-comment\">            index index.html index.htm index.html inde.php;</span><br><span class=\"hljs-comment\">            root /usr/share/nginx/html;</span><br><span class=\"hljs-comment\">        &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">        location ~ /.well-known &#123;</span><br><span class=\"hljs-comment\">            allow all;</span><br><span class=\"hljs-comment\">        &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">        location ^~ /.well-known/pki-validation/ &#123;</span><br><span class=\"hljs-comment\">            add_header Cache-Control no-cache;</span><br><span class=\"hljs-comment\">            default_type &quot;text/plain&quot;;</span><br><span class=\"hljs-comment\">            rewrite /.well-known/pki-validation/(.*) /$1 break;</span><br><span class=\"hljs-comment\">            root /var/www/whatever;</span><br><span class=\"hljs-comment\">        &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">        location /nuxt3-tag/ &#123;</span><br><span class=\"hljs-comment\">            expires $expires;</span><br><span class=\"hljs-comment\">            proxy_redirect off;</span><br><span class=\"hljs-comment\">            proxy_set_header Host $host;</span><br><span class=\"hljs-comment\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"hljs-comment\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"hljs-comment\">            proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"hljs-comment\">            proxy_read_timeout 1m;</span><br><span class=\"hljs-comment\">            proxy_connect_timeout 1m;</span><br><span class=\"hljs-comment\">            proxy_pass http://127.0.0.1:3000/nuxt3-tag/;</span><br><span class=\"hljs-comment\">        &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">        location /naifu/ &#123;</span><br><span class=\"hljs-comment\">            expires $expires;</span><br><span class=\"hljs-comment\">            proxy_redirect off;</span><br><span class=\"hljs-comment\">            proxy_set_header Host $host;</span><br><span class=\"hljs-comment\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"hljs-comment\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"hljs-comment\">            proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"hljs-comment\">            proxy_read_timeout 1m;</span><br><span class=\"hljs-comment\">            proxy_connect_timeout 1m;</span><br><span class=\"hljs-comment\">            proxy_pass http://127.0.0.1:3000/naifu/;</span><br><span class=\"hljs-comment\">        &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">        location /nuxt3 &#123;</span><br><span class=\"hljs-comment\">            rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent;</span><br><span class=\"hljs-comment\">        &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">        location /tag &#123;</span><br><span class=\"hljs-comment\">            rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent;</span><br><span class=\"hljs-comment\">        &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">        # flask的接口代理</span><br><span class=\"hljs-comment\">        location /stable/api &#123;</span><br><span class=\"hljs-comment\">            proxy_pass http://127.0.0.1:5000/api;</span><br><span class=\"hljs-comment\">            proxy_set_header Access-Control-Max-Age 86400;</span><br><span class=\"hljs-comment\">            proxy_set_header Host $host;</span><br><span class=\"hljs-comment\">            proxy_redirect off;</span><br><span class=\"hljs-comment\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"hljs-comment\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"hljs-comment\">            proxy_connect_timeout 60;</span><br><span class=\"hljs-comment\">            proxy_read_timeout 60;</span><br><span class=\"hljs-comment\">            proxy_send_timeout 60;</span><br><span class=\"hljs-comment\">        &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">        location /static/ &#123;</span><br><span class=\"hljs-comment\">            valid_referers none blocked *.ptg.life;</span><br><span class=\"hljs-comment\">            if ($invalid_referer) &#123;</span><br><span class=\"hljs-comment\">                return 403;</span><br><span class=\"hljs-comment\">                break;</span><br><span class=\"hljs-comment\">            &#125;</span><br><span class=\"hljs-comment\">            expires 30d;</span><br><span class=\"hljs-comment\">            autoindex on;</span><br><span class=\"hljs-comment\">            root /data;</span><br><span class=\"hljs-comment\">        &#125;</span><br><span class=\"hljs-comment\">    &#125;</span><br><span class=\"hljs-comment\">&#125;</span><br></code></pre></td></tr></table></figure>\n"},{"title":"nginx配置https","date":"2018-05-09T09:39:55.000Z","_content":"\n## ****SSL 证书部署****\n\n首先申请免费证书,推荐阿里或者七牛云[https://cn.aliyun.com/product/cas?from_alibabacloud=&source=5176.11533457&userCode=ywqc0ubl&type=copy](https://cn.aliyun.com/product/cas?from_alibabacloud=&source=5176.11533457&userCode=ywqc0ubl&type=copy)\n\n下载申请好的 ssl 证书文件压缩包到本地并解压到/etc/nginx/\n\n```jsx\n/etc/nginx/certificate.crt;\n/etc/nginx/private.key;\n```\n\n将这两个文件上传至服务器的/etc/nginx/目录里\n\n```jsx\nscp /Users/lilin/Downloads/certificate.crt root@xxx.xx.xxx.xx:/etc/nginx/\nscp /Users/lilin/Downloads/private.crt root@xxx.xx.xxx.xx:/etc/nginx/\n```\n\n## nginx.conf配置\n\n配置 https [server](https://link.segmentfault.com/?enc=j1N%2B5oPWtgTmj4YYsFd5ww%3D%3D.x32KBqxEXmGOwmMZfGjqRXhbghKgM1LsJhVbG%2B8iji5BQ1P9tGkbxC2u%2FdahY%2BV6).注释掉之前的 http server 配置,新增 https server\n\n```jsx\n将http重定向https\nserver {\n        listen 80;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;\n        return 301 https://$host$request_uri;\n }\n\nserver {\n        listen 443 ssl;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;\n\n        # 新版的nginx只用listen 443 ssl就行,需要注释\n        # ssl on;\n        keepalive_timeout 10m;\n        server_tokens off;\n        # 缓存SSL握手产生的参数和加密密钥的时长\n        ssl_session_timeout 10m;\n        # 证书\n        ssl_certificate /etc/nginx/certificate.crt;\n        ssl_certificate_key /etc/nginx/private.key;\n        # 日志\n        access_log /var/log/nginx/nginx.vhost.access.log;\n        error_log /var/log/nginx/nginx.vhost.error.log;\n\n        # 根用iframe嵌入做个隐式url\n        location / {\n            index index.html index.htm index.html inde.php;\n            root /usr/share/nginx/html;\n        }\n    }\n```\n","source":"_posts/nginx配置https.md","raw":"---\ntitle: 'nginx配置https'\ndate: 2018-05-09 17:39:55\ntags: nginx\n---\n\n## ****SSL 证书部署****\n\n首先申请免费证书,推荐阿里或者七牛云[https://cn.aliyun.com/product/cas?from_alibabacloud=&source=5176.11533457&userCode=ywqc0ubl&type=copy](https://cn.aliyun.com/product/cas?from_alibabacloud=&source=5176.11533457&userCode=ywqc0ubl&type=copy)\n\n下载申请好的 ssl 证书文件压缩包到本地并解压到/etc/nginx/\n\n```jsx\n/etc/nginx/certificate.crt;\n/etc/nginx/private.key;\n```\n\n将这两个文件上传至服务器的/etc/nginx/目录里\n\n```jsx\nscp /Users/lilin/Downloads/certificate.crt root@xxx.xx.xxx.xx:/etc/nginx/\nscp /Users/lilin/Downloads/private.crt root@xxx.xx.xxx.xx:/etc/nginx/\n```\n\n## nginx.conf配置\n\n配置 https [server](https://link.segmentfault.com/?enc=j1N%2B5oPWtgTmj4YYsFd5ww%3D%3D.x32KBqxEXmGOwmMZfGjqRXhbghKgM1LsJhVbG%2B8iji5BQ1P9tGkbxC2u%2FdahY%2BV6).注释掉之前的 http server 配置,新增 https server\n\n```jsx\n将http重定向https\nserver {\n        listen 80;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;\n        return 301 https://$host$request_uri;\n }\n\nserver {\n        listen 443 ssl;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;\n\n        # 新版的nginx只用listen 443 ssl就行,需要注释\n        # ssl on;\n        keepalive_timeout 10m;\n        server_tokens off;\n        # 缓存SSL握手产生的参数和加密密钥的时长\n        ssl_session_timeout 10m;\n        # 证书\n        ssl_certificate /etc/nginx/certificate.crt;\n        ssl_certificate_key /etc/nginx/private.key;\n        # 日志\n        access_log /var/log/nginx/nginx.vhost.access.log;\n        error_log /var/log/nginx/nginx.vhost.error.log;\n\n        # 根用iframe嵌入做个隐式url\n        location / {\n            index index.html index.htm index.html inde.php;\n            root /usr/share/nginx/html;\n        }\n    }\n```\n","slug":"nginx配置https","published":1,"updated":"2023-01-11T04:01:11.542Z","_id":"clcr4qe640001kmh0201d89vl","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"SSL-证书部署\"><a href=\"#SSL-证书部署\" class=\"headerlink\" title=\"SSL 证书部署\"></a><strong><strong>SSL 证书部署</strong></strong></h2><p>首先申请免费证书,推荐阿里或者七牛云<a href=\"https://cn.aliyun.com/product/cas?from_alibabacloud=&source=5176.11533457&userCode=ywqc0ubl&type=copy\">https://cn.aliyun.com/product/cas?from_alibabacloud&#x3D;&amp;source&#x3D;5176.11533457&amp;userCode&#x3D;ywqc0ubl&amp;type&#x3D;copy</a></p>\n<p>下载申请好的 ssl 证书文件压缩包到本地并解压到&#x2F;etc&#x2F;nginx&#x2F;</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">/etc/nginx/certificate.<span class=\"hljs-property\">crt</span>;<br><span class=\"hljs-regexp\">/etc/</span>nginx/private.<span class=\"hljs-property\">key</span>;<br></code></pre></td></tr></table></figure>\n\n<p>将这两个文件上传至服务器的&#x2F;etc&#x2F;nginx&#x2F;目录里</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">scp /<span class=\"hljs-title class_\">Users</span>/lilin/<span class=\"hljs-title class_\">Downloads</span>/certificate.<span class=\"hljs-property\">crt</span> root@xxx.<span class=\"hljs-property\">xx</span>.<span class=\"hljs-property\">xxx</span>.<span class=\"hljs-property\">xx</span>:<span class=\"hljs-regexp\">/etc/</span>nginx/<br>scp /<span class=\"hljs-title class_\">Users</span>/lilin/<span class=\"hljs-title class_\">Downloads</span>/private.<span class=\"hljs-property\">crt</span> root@xxx.<span class=\"hljs-property\">xx</span>.<span class=\"hljs-property\">xxx</span>.<span class=\"hljs-property\">xx</span>:<span class=\"hljs-regexp\">/etc/</span>nginx/<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"nginx-conf配置\"><a href=\"#nginx-conf配置\" class=\"headerlink\" title=\"nginx.conf配置\"></a>nginx.conf配置</h2><p>配置 https <a href=\"https://link.segmentfault.com/?enc=j1N+5oPWtgTmj4YYsFd5ww==.x32KBqxEXmGOwmMZfGjqRXhbghKgM1LsJhVbG+8iji5BQ1P9tGkbxC2u/dahY+V6\">server</a>.注释掉之前的 http server 配置,新增 https server</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">将http重定向https<br>server &#123;<br>        listen <span class=\"hljs-number\">80</span>;<br>        server_name ptg.<span class=\"hljs-property\">life</span> www.<span class=\"hljs-property\">ptg</span>.<span class=\"hljs-property\">life</span> noval.<span class=\"hljs-property\">ptg</span>.<span class=\"hljs-property\">life</span> prompt.<span class=\"hljs-property\">ptg</span>.<span class=\"hljs-property\">life</span> naifu.<span class=\"hljs-property\">ptg</span>.<span class=\"hljs-property\">life</span>;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">301</span> <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//$host$request_uri;</span><br> &#125;<br><br>server &#123;<br>        listen <span class=\"hljs-number\">443</span> ssl;<br>        server_name ptg.<span class=\"hljs-property\">life</span> www.<span class=\"hljs-property\">ptg</span>.<span class=\"hljs-property\">life</span> noval.<span class=\"hljs-property\">ptg</span>.<span class=\"hljs-property\">life</span> prompt.<span class=\"hljs-property\">ptg</span>.<span class=\"hljs-property\">life</span> naifu.<span class=\"hljs-property\">ptg</span>.<span class=\"hljs-property\">life</span>;<br><br>        # 新版的nginx只用listen <span class=\"hljs-number\">443</span> ssl就行,需要注释<br>        # ssl on;<br>        keepalive_timeout 10m;<br>        server_tokens off;<br>        # 缓存<span class=\"hljs-variable constant_\">SSL</span>握手产生的参数和加密密钥的时长<br>        ssl_session_timeout 10m;<br>        # 证书<br>        ssl_certificate /etc/nginx/certificate.<span class=\"hljs-property\">crt</span>;<br>        ssl_certificate_key /etc/nginx/private.<span class=\"hljs-property\">key</span>;<br>        # 日志<br>        access_log /<span class=\"hljs-keyword\">var</span>/log/nginx/nginx.<span class=\"hljs-property\">vhost</span>.<span class=\"hljs-property\">access</span>.<span class=\"hljs-property\">log</span>;<br>        error_log /<span class=\"hljs-keyword\">var</span>/log/nginx/nginx.<span class=\"hljs-property\">vhost</span>.<span class=\"hljs-property\">error</span>.<span class=\"hljs-property\">log</span>;<br><br>        # 根用iframe嵌入做个隐式url<br>        location / &#123;<br>            index index.<span class=\"hljs-property\">html</span> index.<span class=\"hljs-property\">htm</span> index.<span class=\"hljs-property\">html</span> inde.<span class=\"hljs-property\">php</span>;<br>            root /usr/share/nginx/html;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SSL-证书部署\"><a href=\"#SSL-证书部署\" class=\"headerlink\" title=\"SSL 证书部署\"></a><strong><strong>SSL 证书部署</strong></strong></h2><p>首先申请免费证书,推荐阿里或者七牛云<a href=\"https://cn.aliyun.com/product/cas?from_alibabacloud=&source=5176.11533457&userCode=ywqc0ubl&type=copy\">https://cn.aliyun.com/product/cas?from_alibabacloud&#x3D;&amp;source&#x3D;5176.11533457&amp;userCode&#x3D;ywqc0ubl&amp;type&#x3D;copy</a></p>\n<p>下载申请好的 ssl 证书文件压缩包到本地并解压到&#x2F;etc&#x2F;nginx&#x2F;</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">/etc/nginx/certificate.<span class=\"hljs-property\">crt</span>;<br><span class=\"hljs-regexp\">/etc/</span>nginx/private.<span class=\"hljs-property\">key</span>;<br></code></pre></td></tr></table></figure>\n\n<p>将这两个文件上传至服务器的&#x2F;etc&#x2F;nginx&#x2F;目录里</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">scp /<span class=\"hljs-title class_\">Users</span>/lilin/<span class=\"hljs-title class_\">Downloads</span>/certificate.<span class=\"hljs-property\">crt</span> root@xxx.<span class=\"hljs-property\">xx</span>.<span class=\"hljs-property\">xxx</span>.<span class=\"hljs-property\">xx</span>:<span class=\"hljs-regexp\">/etc/</span>nginx/<br>scp /<span class=\"hljs-title class_\">Users</span>/lilin/<span class=\"hljs-title class_\">Downloads</span>/private.<span class=\"hljs-property\">crt</span> root@xxx.<span class=\"hljs-property\">xx</span>.<span class=\"hljs-property\">xxx</span>.<span class=\"hljs-property\">xx</span>:<span class=\"hljs-regexp\">/etc/</span>nginx/<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"nginx-conf配置\"><a href=\"#nginx-conf配置\" class=\"headerlink\" title=\"nginx.conf配置\"></a>nginx.conf配置</h2><p>配置 https <a href=\"https://link.segmentfault.com/?enc=j1N+5oPWtgTmj4YYsFd5ww==.x32KBqxEXmGOwmMZfGjqRXhbghKgM1LsJhVbG+8iji5BQ1P9tGkbxC2u/dahY+V6\">server</a>.注释掉之前的 http server 配置,新增 https server</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">将http重定向https<br>server &#123;<br>        listen <span class=\"hljs-number\">80</span>;<br>        server_name ptg.<span class=\"hljs-property\">life</span> www.<span class=\"hljs-property\">ptg</span>.<span class=\"hljs-property\">life</span> noval.<span class=\"hljs-property\">ptg</span>.<span class=\"hljs-property\">life</span> prompt.<span class=\"hljs-property\">ptg</span>.<span class=\"hljs-property\">life</span> naifu.<span class=\"hljs-property\">ptg</span>.<span class=\"hljs-property\">life</span>;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">301</span> <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//$host$request_uri;</span><br> &#125;<br><br>server &#123;<br>        listen <span class=\"hljs-number\">443</span> ssl;<br>        server_name ptg.<span class=\"hljs-property\">life</span> www.<span class=\"hljs-property\">ptg</span>.<span class=\"hljs-property\">life</span> noval.<span class=\"hljs-property\">ptg</span>.<span class=\"hljs-property\">life</span> prompt.<span class=\"hljs-property\">ptg</span>.<span class=\"hljs-property\">life</span> naifu.<span class=\"hljs-property\">ptg</span>.<span class=\"hljs-property\">life</span>;<br><br>        # 新版的nginx只用listen <span class=\"hljs-number\">443</span> ssl就行,需要注释<br>        # ssl on;<br>        keepalive_timeout 10m;<br>        server_tokens off;<br>        # 缓存<span class=\"hljs-variable constant_\">SSL</span>握手产生的参数和加密密钥的时长<br>        ssl_session_timeout 10m;<br>        # 证书<br>        ssl_certificate /etc/nginx/certificate.<span class=\"hljs-property\">crt</span>;<br>        ssl_certificate_key /etc/nginx/private.<span class=\"hljs-property\">key</span>;<br>        # 日志<br>        access_log /<span class=\"hljs-keyword\">var</span>/log/nginx/nginx.<span class=\"hljs-property\">vhost</span>.<span class=\"hljs-property\">access</span>.<span class=\"hljs-property\">log</span>;<br>        error_log /<span class=\"hljs-keyword\">var</span>/log/nginx/nginx.<span class=\"hljs-property\">vhost</span>.<span class=\"hljs-property\">error</span>.<span class=\"hljs-property\">log</span>;<br><br>        # 根用iframe嵌入做个隐式url<br>        location / &#123;<br>            index index.<span class=\"hljs-property\">html</span> index.<span class=\"hljs-property\">htm</span> index.<span class=\"hljs-property\">html</span> inde.<span class=\"hljs-property\">php</span>;<br>            root /usr/share/nginx/html;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"ubuntu18安装nginx","date":"2018-05-09T09:39:55.000Z","_content":"\n### **apt安装**sudo apt update\n\n```jsx\nsudo apt install nginx\n\nnginx -V\n\n默认安装路径 /etc/nginx/nginx.conf\n```\n\n### **nginx安装位置**\n\n```jsx\n**whereis nginx**\n```\n\n### **启动**\n\n```jsx\nservice nginx start\n```\n\n### **检查nginx配置文件**\n\n```jsx\nservice nginx reload\n```\n\n### **重启**\n\n```jsx\nnginx -s reopen\n```\n\n### **停止**\n\n```jsx\nnginx -s stop\n```\n\n### 端口占用\n\n```jsx\n查看端口\nnetstat -lntp\n\nnginx端口\ntcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      248057/nginx: master\n\n结束端口\nkill 248057\n\n重启nginx\nservice nginx restart\n\n```\n","source":"_posts/ubuntu 18 安装 nginx.md","raw":"---\ntitle: 'ubuntu18安装nginx'\ndate: 2018-05-09 17:39:55\ntags: nginx\n---\n\n### **apt安装**sudo apt update\n\n```jsx\nsudo apt install nginx\n\nnginx -V\n\n默认安装路径 /etc/nginx/nginx.conf\n```\n\n### **nginx安装位置**\n\n```jsx\n**whereis nginx**\n```\n\n### **启动**\n\n```jsx\nservice nginx start\n```\n\n### **检查nginx配置文件**\n\n```jsx\nservice nginx reload\n```\n\n### **重启**\n\n```jsx\nnginx -s reopen\n```\n\n### **停止**\n\n```jsx\nnginx -s stop\n```\n\n### 端口占用\n\n```jsx\n查看端口\nnetstat -lntp\n\nnginx端口\ntcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      248057/nginx: master\n\n结束端口\nkill 248057\n\n重启nginx\nservice nginx restart\n\n```\n","slug":"ubuntu 18 安装 nginx","published":1,"updated":"2023-01-11T04:01:17.913Z","_id":"clcr4qe670002kmh057f0akod","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"apt安装sudo-apt-update\"><a href=\"#apt安装sudo-apt-update\" class=\"headerlink\" title=\"apt安装sudo apt update\"></a><strong>apt安装</strong>sudo apt update</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">sudo apt install nginx<br><br>nginx -V<br><br>默认安装路径 /etc/nginx/nginx.<span class=\"hljs-property\">conf</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"nginx安装位置\"><a href=\"#nginx安装位置\" class=\"headerlink\" title=\"nginx安装位置\"></a><strong>nginx安装位置</strong></h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">**whereis nginx**<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a><strong>启动</strong></h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">service nginx start<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"检查nginx配置文件\"><a href=\"#检查nginx配置文件\" class=\"headerlink\" title=\"检查nginx配置文件\"></a><strong>检查nginx配置文件</strong></h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">service nginx reload<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a><strong>重启</strong></h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">nginx -s reopen<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"停止\"><a href=\"#停止\" class=\"headerlink\" title=\"停止\"></a><strong>停止</strong></h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">nginx -s stop<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"端口占用\"><a href=\"#端口占用\" class=\"headerlink\" title=\"端口占用\"></a>端口占用</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">查看端口<br>netstat -lntp<br><br>nginx端口<br>tcp        <span class=\"hljs-number\">0</span>      <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>:<span class=\"hljs-number\">80</span>              <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>:*               <span class=\"hljs-variable constant_\">LISTEN</span>      <span class=\"hljs-number\">248057</span>/<span class=\"hljs-attr\">nginx</span>: master<br><br>结束端口<br>kill <span class=\"hljs-number\">248057</span><br><br>重启nginx<br>service nginx restart<br><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"apt安装sudo-apt-update\"><a href=\"#apt安装sudo-apt-update\" class=\"headerlink\" title=\"apt安装sudo apt update\"></a><strong>apt安装</strong>sudo apt update</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">sudo apt install nginx<br><br>nginx -V<br><br>默认安装路径 /etc/nginx/nginx.<span class=\"hljs-property\">conf</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"nginx安装位置\"><a href=\"#nginx安装位置\" class=\"headerlink\" title=\"nginx安装位置\"></a><strong>nginx安装位置</strong></h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">**whereis nginx**<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a><strong>启动</strong></h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">service nginx start<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"检查nginx配置文件\"><a href=\"#检查nginx配置文件\" class=\"headerlink\" title=\"检查nginx配置文件\"></a><strong>检查nginx配置文件</strong></h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">service nginx reload<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a><strong>重启</strong></h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">nginx -s reopen<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"停止\"><a href=\"#停止\" class=\"headerlink\" title=\"停止\"></a><strong>停止</strong></h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">nginx -s stop<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"端口占用\"><a href=\"#端口占用\" class=\"headerlink\" title=\"端口占用\"></a>端口占用</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">查看端口<br>netstat -lntp<br><br>nginx端口<br>tcp        <span class=\"hljs-number\">0</span>      <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>:<span class=\"hljs-number\">80</span>              <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>:*               <span class=\"hljs-variable constant_\">LISTEN</span>      <span class=\"hljs-number\">248057</span>/<span class=\"hljs-attr\">nginx</span>: master<br><br>结束端口<br>kill <span class=\"hljs-number\">248057</span><br><br>重启nginx<br>service nginx restart<br><br></code></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clcr420bw0001ajh00110a45t","tag_id":"clcr420c60004ajh0dkoaffgv","_id":"clcr420ck000aajh0fdx76kf6"},{"post_id":"clcr420c30003ajh042pohaf3","tag_id":"clcr420c60004ajh0dkoaffgv","_id":"clcr420cm000cajh00xuv6vwr"},{"post_id":"clcr420cd0006ajh087eze0x5","tag_id":"clcr420cl000bajh09b57atze","_id":"clcr420cn000eajh0e93w1ogd"},{"post_id":"clcr420cg0008ajh00oqzc8w0","tag_id":"clcr420cl000bajh09b57atze","_id":"clcr420cn000fajh0bv8f76nh"},{"post_id":"clcr4qe5x0000kmh05krbg26k","tag_id":"clcr4x4fu0000kuh0dpchhkzh","_id":"clcr4x4g40002kuh0ga7i4cgc"},{"post_id":"clcr4qe640001kmh0201d89vl","tag_id":"clcr4x4fu0000kuh0dpchhkzh","_id":"clcr4x4g40003kuh0g3uo37r2"},{"post_id":"clcr4qe670002kmh057f0akod","tag_id":"clcr4x4fu0000kuh0dpchhkzh","_id":"clcr4x4g80004kuh0a6sygexn"}],"Tag":[{"name":"哈哈哈1223","_id":"clcr420c60004ajh0dkoaffgv"},{"name":"react","_id":"clcr420cl000bajh09b57atze"},{"name":"nginx","_id":"clcr4x4fu0000kuh0dpchhkzh"}]}}