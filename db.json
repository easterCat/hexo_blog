{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/tree/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/tree/source/Tree.png","path":"Tree.png","modified":0,"renderable":1},{"_id":"themes/tree/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/tree/source/css/main.css","path":"css/main.css","modified":0,"renderable":1},{"_id":"themes/tree/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/tree/source/lib/jquery.pjax.js","path":"lib/jquery.pjax.js","modified":0,"renderable":1},{"_id":"themes/tree/source/lib/jquery-3.4.1.min.js","path":"lib/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"themes/tree/source/lib/font-awesome/font-awesome.min.css","path":"lib/font-awesome/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/tree/source/lib/valine/Valine-1.3.10-min.js","path":"lib/valine/Valine-1.3.10-min.js","modified":0,"renderable":1},{"_id":"themes/tree/source/lib/valine/av-3.0.4-min.js","path":"lib/valine/av-3.0.4-min.js","modified":0,"renderable":1},{"_id":"themes/tree/source/lib/busuanzi/2.3/busuanzi.pure.mini.js","path":"lib/busuanzi/2.3/busuanzi.pure.mini.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"b3f06e21f6f32eba574852d69a046c92c9ee1708","modified":1673409175947},{"_id":"source/_posts/AndroidStudio操作.md","hash":"173b6836eb5afb9bbe7d96a6e11f42577e542fe4","modified":1673410150364},{"_id":"source/_posts/Flask-sqlalchemy使用.md","hash":"35aa404a1844fab5fb9d4e6acc0d2cd8baa7d3cd","modified":1674024604775},{"_id":"source/_posts/Nginx配置.md","hash":"a844b542deadb08dc7c9f5b15e49682d54820b2d","modified":1674025659001},{"_id":"source/_posts/Git常用命令的使用.md","hash":"b2f59c9461b80aac9c8fa7a2d268be824a0f601b","modified":1674024616969},{"_id":"source/_posts/React基础.md","hash":"0f3c76862f190ad26da2adb83b9ec6596f98a2e6","modified":1674025647475},{"_id":"source/_posts/Mysql的processlist中处理表连接.md","hash":"159fb93e08b8078b6841320f5f96640d43b03070","modified":1674024630758},{"_id":"source/_posts/SEO技巧.md","hash":"5c161ef1ee3ef3a02bc4d5cc7ee8791ab282d9fa","modified":1673410104509},{"_id":"source/_posts/Nginx配置https.md","hash":"22649f096a5b305707b751f2cdb3a71c1315b618","modified":1674025652682},{"_id":"source/_posts/Ubuntu18安装nginx.md","hash":"fbef952a94084e366ab0439902bb50d90704d542","modified":1674025640071},{"_id":"source/about/index.md","hash":"e86da327d3758bc06e5508d74ef4328e814980ed","modified":1673405771681},{"_id":"source/images/avatar.jpg","hash":"1163c8cdc6377a21641c89bc547515223697466f","modified":1673405771682},{"_id":"source/categories/index.md","hash":"ff07229a0a61da6e39c27c03f81b54f627f636a8","modified":1673687668161},{"_id":"source/photos/index.md","hash":"329e5e3c65a8355152a9c9ffaf48be37951ff9b9","modified":1673405771682},{"_id":"source/tags/index.md","hash":"e2c4f5d30569bc6eace09dbdd7d7a83c58d0a8e5","modified":1673687618982},{"_id":"themes/tree/_config.yml","hash":"c38bec92ef661d916931d821e86800ba2fc959ba","modified":1674201109160},{"_id":"themes/tree/README.md","hash":"b3f890241282cfb722e223f42c0e3c32b013e9c7","modified":1674201109160},{"_id":"themes/tree/layout/index.ejs","hash":"89c8aebef7ad7863ead3d92d282252d1d420618c","modified":1674201109162},{"_id":"themes/tree/layout/categories.ejs","hash":"d35dab43aefc3d0f798d8676103345e71caf1e23","modified":1674201109162},{"_id":"themes/tree/layout/post.ejs","hash":"c47629eb4adad8328b3dc68844f392f8a3521c6a","modified":1674204578222},{"_id":"themes/tree/layout/layout.ejs","hash":"b1cbe3e0c52a8fa644a5adb97b31b5ecfdec2162","modified":1674201109162},{"_id":"themes/tree/source/favicon.ico","hash":"268be0a863caae7c5a732fb8a911a81434f31117","modified":1674201109165},{"_id":"themes/tree/layout/tags.ejs","hash":"973aa7f435ceba2a2f6c1a5ac7d3677fea5a50b7","modified":1674201109162},{"_id":"themes/tree/layout/_partial/footer.ejs","hash":"1bbd6ce41784b3f7011b928b168bf84755a0d9b9","modified":1674201109161},{"_id":"themes/tree/source/404.html","hash":"cfa1b96d02d143d77c0ba519dab1c23de0cae6ee","modified":1674201109162},{"_id":"themes/tree/layout/_partial/head.ejs","hash":"9b4b35e9df00954d98dd20434f972b058b381221","modified":1674204777876},{"_id":"themes/tree/layout/_partial/header.ejs","hash":"abb98bf2ae182e4988f65b9a8f0f024dbd97185b","modified":1674201109161},{"_id":"themes/tree/layout/_partial/sidebar.ejs","hash":"726499fca6d8d6411bf6d0aa5542fe3070766271","modified":1674201109161},{"_id":"themes/tree/source/css/main.css","hash":"f10dbe75929778b095241849cca32531699c49d4","modified":1674204692632},{"_id":"themes/tree/layout/_partial/totop.ejs","hash":"a94c4b350b76d21bb530095981049a2647cc6273","modified":1674201109161},{"_id":"themes/tree/source/js/main.js","hash":"fa52f233d46695f3876f90d4cfdfa59d2c568e12","modified":1674202807405},{"_id":"themes/tree/source/lib/jquery.pjax.js","hash":"13485a1e2dc9c8df28267549de1b8af8f39061d9","modified":1674201109168},{"_id":"themes/tree/source/lib/font-awesome/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1674201109166},{"_id":"themes/tree/source/lib/busuanzi/2.3/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1674201109165},{"_id":"themes/tree/source/lib/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1674201109168},{"_id":"themes/tree/source/lib/valine/Valine-1.3.10-min.js","hash":"e3a340d0c39eee2ae651284fda9d351e752fcbd0","modified":1674201109170},{"_id":"themes/tree/source/Tree.png","hash":"e5a30d5edf5aa2dc39fb4db7b4761b516826cf5b","modified":1674201109164},{"_id":"themes/tree/source/lib/valine/av-3.0.4-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1674201109172},{"_id":"public/content.json","hash":"5fe935ff0d0c09064bd12569ca7dc25f62ad911f","modified":1674204817775},{"_id":"public/atom.xml","hash":"f57aa65edd3889c950a6f535334e5d8b6af72675","modified":1674204817775},{"_id":"public/search.xml","hash":"67209330c8f31c07b64ad697dc456213cc2d8fb7","modified":1674204817775},{"_id":"public/about/index.html","hash":"dcd3a0ecb7754cdd8ba7094704361ea1911721e6","modified":1674204817775},{"_id":"public/categories/index.html","hash":"0f6bf237efd976cf97c9855ed5621ab3784a9f8e","modified":1674204817775},{"_id":"public/photos/index.html","hash":"e3863fe923a983d276be2b8c0d4f6294f9c75671","modified":1674204817775},{"_id":"public/tags/index.html","hash":"7e20f41856d89c4d43504ed14ab4fffdcd49e832","modified":1674204817775},{"_id":"public/2023/01/12/Flask-sqlalchemy使用/index.html","hash":"d95989ad4e4d4756a14dd5660a394eb5b2d0f41a","modified":1674204817775},{"_id":"public/2023/01/16/Mysql的processlist中处理表连接/index.html","hash":"89ef11135ad01adb31d5411875a072c6dd0d750b","modified":1674204817775},{"_id":"public/2023/01/11/Git常用命令的使用/index.html","hash":"54f91122f0601660e88af5ec6230e6523b54b88e","modified":1674204817775},{"_id":"public/2023/01/11/AndroidStudio操作/index.html","hash":"ca7542998676c9ab6038ce9362314dee19d184ee","modified":1674204817775},{"_id":"public/2023/01/11/SEO技巧/index.html","hash":"76db4e467ef8aa75b79e730b320855f4f35fd04d","modified":1674204817775},{"_id":"public/2023/01/11/Nginx配置/index.html","hash":"533297536e75b92ea001d0a3433c3d0ba29fee1f","modified":1674204817775},{"_id":"public/2023/01/11/Ubuntu18安装nginx/index.html","hash":"d2b42d866396c4c721d244320104077357d7a852","modified":1674204817775},{"_id":"public/2023/01/11/Nginx配置https/index.html","hash":"bd8ad5e26bf83d61d8a0153efc7e1e9ea0f33a49","modified":1674204817775},{"_id":"public/archives/index.html","hash":"b3c86e9b23090d0b737c69528200d02f19d04da2","modified":1674204817775},{"_id":"public/archives/2018/index.html","hash":"4e6b76665f0ba22c84efaadbc5d1adbf0ee8e7e4","modified":1674204817775},{"_id":"public/archives/2018/05/index.html","hash":"4e6b76665f0ba22c84efaadbc5d1adbf0ee8e7e4","modified":1674204817775},{"_id":"public/archives/2023/index.html","hash":"7664d7b0bde9a6ed61949d24d7231e4a936da7c8","modified":1674204817775},{"_id":"public/archives/2023/01/index.html","hash":"7664d7b0bde9a6ed61949d24d7231e4a936da7c8","modified":1674204817775},{"_id":"public/index.html","hash":"b3c86e9b23090d0b737c69528200d02f19d04da2","modified":1674204817775},{"_id":"public/tags/react/index.html","hash":"4e6b76665f0ba22c84efaadbc5d1adbf0ee8e7e4","modified":1674204817775},{"_id":"public/2018/05/09/React基础/index.html","hash":"e020e6738be2f3a323d1735bb626bf7593e37e86","modified":1674204817775},{"_id":"public/images/avatar.jpg","hash":"1163c8cdc6377a21641c89bc547515223697466f","modified":1674204817775},{"_id":"public/CNAME","hash":"b3f06e21f6f32eba574852d69a046c92c9ee1708","modified":1674204817775},{"_id":"public/favicon.ico","hash":"268be0a863caae7c5a732fb8a911a81434f31117","modified":1674204817775},{"_id":"public/404.html","hash":"cfa1b96d02d143d77c0ba519dab1c23de0cae6ee","modified":1674204817775},{"_id":"public/css/main.css","hash":"f10dbe75929778b095241849cca32531699c49d4","modified":1674204817775},{"_id":"public/js/main.js","hash":"fa52f233d46695f3876f90d4cfdfa59d2c568e12","modified":1674204817775},{"_id":"public/lib/busuanzi/2.3/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1674204817775},{"_id":"public/lib/jquery.pjax.js","hash":"13485a1e2dc9c8df28267549de1b8af8f39061d9","modified":1674204817775},{"_id":"public/lib/font-awesome/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1674204817775},{"_id":"public/lib/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1674204817775},{"_id":"public/lib/valine/Valine-1.3.10-min.js","hash":"e3a340d0c39eee2ae651284fda9d351e752fcbd0","modified":1674204817775},{"_id":"public/lib/valine/av-3.0.4-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1674204817775},{"_id":"public/Tree.png","hash":"e5a30d5edf5aa2dc39fb4db7b4761b516826cf5b","modified":1674204817775},{"_id":"themes/tree/.DS_Store","hash":"d9d5f7cb3bcd7d36a60365226d922cd84a4d7373","modified":1674205633461},{"_id":"themes/tree/source/.DS_Store","hash":"2b189addabae90472f778cd90454e40f546f0eae","modified":1674205381059}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2018-05-09T09:02:05.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-05-09 17:02:05\n---\n","updated":"2023-01-11T02:56:11.681Z","path":"about/index.html","comments":1,"layout":"page","_id":"cld4ablbf0000jfh03odaaf6b","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2021-02-26T08:36:55.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-02-26 16:36:55\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2023-01-14T09:14:28.161Z","path":"categories/index.html","comments":1,"_id":"cld4ablbk0002jfh00ylldiyy","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"photos","date":"2018-05-09T09:27:51.000Z","_content":"","source":"photos/index.md","raw":"---\ntitle: photos\ndate: 2018-05-09 17:27:51\n---\n","updated":"2023-01-11T02:56:11.682Z","path":"photos/index.html","comments":1,"layout":"page","_id":"cld4ablbm0004jfh0cnjw8r24","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-02-26T08:36:55.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-02-26 16:36:55\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2023-01-14T09:13:38.982Z","path":"tags/index.html","comments":1,"_id":"cld4ablbn0006jfh0a8j4d846","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"AndroidStudio操作","date":"2023-01-11T04:09:05.000Z","_content":"\n# Android studio操作\n\ncommand + shift + R 当前文件替换\n\ncommand + shift + F 全局查找\n\ncommand + shift + R 全局替换\n\ncommand + O 全局搜索类**/**文件**/**关键字**/(**包括系统类**,**自定义类**)**\n\ncommand + option + O 全局搜索方法\n\noption + enter 将**StatelessWidget**转 **StatefulWidget**   快速修复  ****快速生成构造方法\n\ncommand  + option + W 抽取代码为单独的**Widget**\n\ncommand  + option + M 抽取代码为单独的方法**,**或者抽取成**get**方法\n\ncommand + option + L 格式化代码\n\ncommand + D 复制单行\n\noption + shift + up/down上下移动代码\n\ncommand + \\  热重载**(hot reload)**\n\ncontrol+ R 运行项目\n\ncommand+ delete 删除行\n\n**Shift** 双击 ****万能搜索\n\nstless 快速创建一个**StatelessWidget**\n\nstful 快速创建一个**StatefulWidget**\n","source":"_posts/AndroidStudio操作.md","raw":"---\ntitle: AndroidStudio操作\ndate: 2023-01-11 12:09:05\ntags:\n---\n\n# Android studio操作\n\ncommand + shift + R 当前文件替换\n\ncommand + shift + F 全局查找\n\ncommand + shift + R 全局替换\n\ncommand + O 全局搜索类**/**文件**/**关键字**/(**包括系统类**,**自定义类**)**\n\ncommand + option + O 全局搜索方法\n\noption + enter 将**StatelessWidget**转 **StatefulWidget**   快速修复  ****快速生成构造方法\n\ncommand  + option + W 抽取代码为单独的**Widget**\n\ncommand  + option + M 抽取代码为单独的方法**,**或者抽取成**get**方法\n\ncommand + option + L 格式化代码\n\ncommand + D 复制单行\n\noption + shift + up/down上下移动代码\n\ncommand + \\  热重载**(hot reload)**\n\ncontrol+ R 运行项目\n\ncommand+ delete 删除行\n\n**Shift** 双击 ****万能搜索\n\nstless 快速创建一个**StatelessWidget**\n\nstful 快速创建一个**StatefulWidget**\n","slug":"AndroidStudio操作","published":1,"updated":"2023-01-11T04:09:10.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld4ablbh0001jfh01c1g8ig8","content":"<h1 id=\"Android-studio操作\"><a href=\"#Android-studio操作\" class=\"headerlink\" title=\"Android studio操作\"></a>Android studio操作</h1><p>command + shift + R 当前文件替换</p>\n<p>command + shift + F 全局查找</p>\n<p>command + shift + R 全局替换</p>\n<p>command + O 全局搜索类**&#x2F;<strong>文件</strong>&#x2F;<strong>关键字</strong>&#x2F;(<strong>包括系统类</strong>,<strong>自定义类</strong>)**</p>\n<p>command + option + O 全局搜索方法</p>\n<p>option + enter 将<strong>StatelessWidget</strong>转 <strong>StatefulWidget</strong>   快速修复  ****快速生成构造方法</p>\n<p>command  + option + W 抽取代码为单独的<strong>Widget</strong></p>\n<p>command  + option + M 抽取代码为单独的方法**,<strong>或者抽取成</strong>get**方法</p>\n<p>command + option + L 格式化代码</p>\n<p>command + D 复制单行</p>\n<p>option + shift + up&#x2F;down上下移动代码</p>\n<p>command + \\  热重载**(hot reload)**</p>\n<p>control+ R 运行项目</p>\n<p>command+ delete 删除行</p>\n<p><strong>Shift</strong> 双击 ****万能搜索</p>\n<p>stless 快速创建一个<strong>StatelessWidget</strong></p>\n<p>stful 快速创建一个<strong>StatefulWidget</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Android-studio操作\"><a href=\"#Android-studio操作\" class=\"headerlink\" title=\"Android studio操作\"></a>Android studio操作</h1><p>command + shift + R 当前文件替换</p>\n<p>command + shift + F 全局查找</p>\n<p>command + shift + R 全局替换</p>\n<p>command + O 全局搜索类**&#x2F;<strong>文件</strong>&#x2F;<strong>关键字</strong>&#x2F;(<strong>包括系统类</strong>,<strong>自定义类</strong>)**</p>\n<p>command + option + O 全局搜索方法</p>\n<p>option + enter 将<strong>StatelessWidget</strong>转 <strong>StatefulWidget</strong>   快速修复  ****快速生成构造方法</p>\n<p>command  + option + W 抽取代码为单独的<strong>Widget</strong></p>\n<p>command  + option + M 抽取代码为单独的方法**,<strong>或者抽取成</strong>get**方法</p>\n<p>command + option + L 格式化代码</p>\n<p>command + D 复制单行</p>\n<p>option + shift + up&#x2F;down上下移动代码</p>\n<p>command + \\  热重载**(hot reload)**</p>\n<p>control+ R 运行项目</p>\n<p>command+ delete 删除行</p>\n<p><strong>Shift</strong> 双击 ****万能搜索</p>\n<p>stless 快速创建一个<strong>StatelessWidget</strong></p>\n<p>stful 快速创建一个<strong>StatefulWidget</strong></p>\n"},{"title":"Flask-sqlalchemy使用","date":"2023-01-12T07:48:11.000Z","_content":"\n## 查询\n\n```js\n1.  filter()    把过滤器添加到原查询上，返回一个新查询\n\n2.  filter_by()    把等值过滤器添加到原查询上，返回一个新查询\n\n3.  limit    使用指定的值限定原查询返回的结果\n\n4.  offset()    偏移原查询返回的结果，返回一个新查询\n\n5.  order_by()    根据指定条件对原查询结果进行排序，返回一个新查询\n\n6.  group_by()    根据指定条件对原查询结果进行分组，返回一个新查询\n\n7.  all()    以列表形式返回查询的所有结果\n\n8.  first()    返回查询的第一个结果，如果未查到，返回 None\n\n9.  first_or_404()    返回查询的第一个结果，如果未查到，返回 404\n\n10.  get()    返回指定主键对应的行，如不存在，返回 None\n\n11.  get_or_404()    返回指定主键对应的行，如不存在，返回 404\n\n12.  count()    返回查询结果的数量\n\n13.  paginate()    返回一个Paginate对象，它包含指定范围内的结果\n```\n\n```js\n1.  \"\"\"\n\n2.  查询所有用户数据\n\n3.  User.query.all()\n\n5.  查询有多少个用户\n\n6.  User.query.count()\n\n8.  查询第1个用户\n\n9.  User.query.first()\n\n10.  User.query.get(1) # 根据id查询\n\n12.  查询id为4的用户[3种方式]\n\n13.  User.query.get(4)\n\n14.  User.query.filter_by(id=4).all() # 简单查询 使用关键字实参的形式来设置字段名\n\n15.  User.query.filter(User.id == 4).all() # 复杂查询 使用恒等式等其他形式来设置条件\n\n17.  查询名字结尾字符为g的所有用户[开始 / 包含]\n\n18.  User.query.filter(User.name.endswith(\"g\")).all()\n\n19.  User.query.filter(User.name.startswith(\"w\")).all()\n\n20.  User.query.filter(User.name.contains(\"n\")).all()\n\n21.  User.query.filter(User.name.like(\"%n%g\")).all() 模糊查询\n\n23.  查询名字和邮箱都以li开头的所有用户[2种方式]\n\n24.  User.query.filter(User.name.startswith(\"li\"), User.email.startswith(\"li\")).all()\n\n26.  from sqlalchemy import and_\n\n27.  User.query.filter(and_(User.name.startswith(\"li\"), User.email.startswith(\"li\"))).all()\n\n29.  查询age是25 或者 \\`email\\`以\\`itheima.com\\`结尾的所有用户\n\n30.  from sqlalchemy import or_\n\n31.  User.query.filter(or_(User.age == 25, User.email.endswith(\"itheima.com\"))).all()\n\n33.  查询名字不等于wang的所有用户[2种方式]\n\n34.  from sqlalchemy import not_\n\n35.  User.query.filter(not_(User.name == \"wang\")).all()\n\n36.  User.query.filter(User.name != \"wang\").all()\n\n38.  查询id为[1, 3, 5, 7, 9]的用户\n\n39.  User.query.filter(User.id.in_([1, 3, 5, 7, 9])).all()\n\n41.  所有用户先按年龄从小到大, 再按id从大到小排序, 取前5个\n\n42.  User.query.order_by(User.age, User.id.desc()).limit(5).all()\n\n44.  分页查询, 每页3个, 查询第2页的数据\n\n45.  pn = User.query.paginate(2, 3)\n\n46.  pn.items 获取该页的数据 pn.page 获取当前的页码 pn.pages 获取总页数\n```\n","source":"_posts/Flask-sqlalchemy使用.md","raw":"---\ntitle: Flask-sqlalchemy使用\ndate: 2023-01-12 15:48:11\ntags:\n---\n\n## 查询\n\n```js\n1.  filter()    把过滤器添加到原查询上，返回一个新查询\n\n2.  filter_by()    把等值过滤器添加到原查询上，返回一个新查询\n\n3.  limit    使用指定的值限定原查询返回的结果\n\n4.  offset()    偏移原查询返回的结果，返回一个新查询\n\n5.  order_by()    根据指定条件对原查询结果进行排序，返回一个新查询\n\n6.  group_by()    根据指定条件对原查询结果进行分组，返回一个新查询\n\n7.  all()    以列表形式返回查询的所有结果\n\n8.  first()    返回查询的第一个结果，如果未查到，返回 None\n\n9.  first_or_404()    返回查询的第一个结果，如果未查到，返回 404\n\n10.  get()    返回指定主键对应的行，如不存在，返回 None\n\n11.  get_or_404()    返回指定主键对应的行，如不存在，返回 404\n\n12.  count()    返回查询结果的数量\n\n13.  paginate()    返回一个Paginate对象，它包含指定范围内的结果\n```\n\n```js\n1.  \"\"\"\n\n2.  查询所有用户数据\n\n3.  User.query.all()\n\n5.  查询有多少个用户\n\n6.  User.query.count()\n\n8.  查询第1个用户\n\n9.  User.query.first()\n\n10.  User.query.get(1) # 根据id查询\n\n12.  查询id为4的用户[3种方式]\n\n13.  User.query.get(4)\n\n14.  User.query.filter_by(id=4).all() # 简单查询 使用关键字实参的形式来设置字段名\n\n15.  User.query.filter(User.id == 4).all() # 复杂查询 使用恒等式等其他形式来设置条件\n\n17.  查询名字结尾字符为g的所有用户[开始 / 包含]\n\n18.  User.query.filter(User.name.endswith(\"g\")).all()\n\n19.  User.query.filter(User.name.startswith(\"w\")).all()\n\n20.  User.query.filter(User.name.contains(\"n\")).all()\n\n21.  User.query.filter(User.name.like(\"%n%g\")).all() 模糊查询\n\n23.  查询名字和邮箱都以li开头的所有用户[2种方式]\n\n24.  User.query.filter(User.name.startswith(\"li\"), User.email.startswith(\"li\")).all()\n\n26.  from sqlalchemy import and_\n\n27.  User.query.filter(and_(User.name.startswith(\"li\"), User.email.startswith(\"li\"))).all()\n\n29.  查询age是25 或者 \\`email\\`以\\`itheima.com\\`结尾的所有用户\n\n30.  from sqlalchemy import or_\n\n31.  User.query.filter(or_(User.age == 25, User.email.endswith(\"itheima.com\"))).all()\n\n33.  查询名字不等于wang的所有用户[2种方式]\n\n34.  from sqlalchemy import not_\n\n35.  User.query.filter(not_(User.name == \"wang\")).all()\n\n36.  User.query.filter(User.name != \"wang\").all()\n\n38.  查询id为[1, 3, 5, 7, 9]的用户\n\n39.  User.query.filter(User.id.in_([1, 3, 5, 7, 9])).all()\n\n41.  所有用户先按年龄从小到大, 再按id从大到小排序, 取前5个\n\n42.  User.query.order_by(User.age, User.id.desc()).limit(5).all()\n\n44.  分页查询, 每页3个, 查询第2页的数据\n\n45.  pn = User.query.paginate(2, 3)\n\n46.  pn.items 获取该页的数据 pn.page 获取当前的页码 pn.pages 获取总页数\n```\n","slug":"Flask-sqlalchemy使用","published":1,"updated":"2023-01-18T06:50:04.775Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld4ablbl0003jfh0awtf9uyq","content":"<h2 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h2><pre><code class=\"js\">1.  filter()    把过滤器添加到原查询上，返回一个新查询\n\n2.  filter_by()    把等值过滤器添加到原查询上，返回一个新查询\n\n3.  limit    使用指定的值限定原查询返回的结果\n\n4.  offset()    偏移原查询返回的结果，返回一个新查询\n\n5.  order_by()    根据指定条件对原查询结果进行排序，返回一个新查询\n\n6.  group_by()    根据指定条件对原查询结果进行分组，返回一个新查询\n\n7.  all()    以列表形式返回查询的所有结果\n\n8.  first()    返回查询的第一个结果，如果未查到，返回 None\n\n9.  first_or_404()    返回查询的第一个结果，如果未查到，返回 404\n\n10.  get()    返回指定主键对应的行，如不存在，返回 None\n\n11.  get_or_404()    返回指定主键对应的行，如不存在，返回 404\n\n12.  count()    返回查询结果的数量\n\n13.  paginate()    返回一个Paginate对象，它包含指定范围内的结果\n</code></pre>\n<pre><code class=\"js\">1.  &quot;&quot;&quot;\n\n2.  查询所有用户数据\n\n3.  User.query.all()\n\n5.  查询有多少个用户\n\n6.  User.query.count()\n\n8.  查询第1个用户\n\n9.  User.query.first()\n\n10.  User.query.get(1) # 根据id查询\n\n12.  查询id为4的用户[3种方式]\n\n13.  User.query.get(4)\n\n14.  User.query.filter_by(id=4).all() # 简单查询 使用关键字实参的形式来设置字段名\n\n15.  User.query.filter(User.id == 4).all() # 复杂查询 使用恒等式等其他形式来设置条件\n\n17.  查询名字结尾字符为g的所有用户[开始 / 包含]\n\n18.  User.query.filter(User.name.endswith(&quot;g&quot;)).all()\n\n19.  User.query.filter(User.name.startswith(&quot;w&quot;)).all()\n\n20.  User.query.filter(User.name.contains(&quot;n&quot;)).all()\n\n21.  User.query.filter(User.name.like(&quot;%n%g&quot;)).all() 模糊查询\n\n23.  查询名字和邮箱都以li开头的所有用户[2种方式]\n\n24.  User.query.filter(User.name.startswith(&quot;li&quot;), User.email.startswith(&quot;li&quot;)).all()\n\n26.  from sqlalchemy import and_\n\n27.  User.query.filter(and_(User.name.startswith(&quot;li&quot;), User.email.startswith(&quot;li&quot;))).all()\n\n29.  查询age是25 或者 \\`email\\`以\\`itheima.com\\`结尾的所有用户\n\n30.  from sqlalchemy import or_\n\n31.  User.query.filter(or_(User.age == 25, User.email.endswith(&quot;itheima.com&quot;))).all()\n\n33.  查询名字不等于wang的所有用户[2种方式]\n\n34.  from sqlalchemy import not_\n\n35.  User.query.filter(not_(User.name == &quot;wang&quot;)).all()\n\n36.  User.query.filter(User.name != &quot;wang&quot;).all()\n\n38.  查询id为[1, 3, 5, 7, 9]的用户\n\n39.  User.query.filter(User.id.in_([1, 3, 5, 7, 9])).all()\n\n41.  所有用户先按年龄从小到大, 再按id从大到小排序, 取前5个\n\n42.  User.query.order_by(User.age, User.id.desc()).limit(5).all()\n\n44.  分页查询, 每页3个, 查询第2页的数据\n\n45.  pn = User.query.paginate(2, 3)\n\n46.  pn.items 获取该页的数据 pn.page 获取当前的页码 pn.pages 获取总页数\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h2><pre><code class=\"js\">1.  filter()    把过滤器添加到原查询上，返回一个新查询\n\n2.  filter_by()    把等值过滤器添加到原查询上，返回一个新查询\n\n3.  limit    使用指定的值限定原查询返回的结果\n\n4.  offset()    偏移原查询返回的结果，返回一个新查询\n\n5.  order_by()    根据指定条件对原查询结果进行排序，返回一个新查询\n\n6.  group_by()    根据指定条件对原查询结果进行分组，返回一个新查询\n\n7.  all()    以列表形式返回查询的所有结果\n\n8.  first()    返回查询的第一个结果，如果未查到，返回 None\n\n9.  first_or_404()    返回查询的第一个结果，如果未查到，返回 404\n\n10.  get()    返回指定主键对应的行，如不存在，返回 None\n\n11.  get_or_404()    返回指定主键对应的行，如不存在，返回 404\n\n12.  count()    返回查询结果的数量\n\n13.  paginate()    返回一个Paginate对象，它包含指定范围内的结果\n</code></pre>\n<pre><code class=\"js\">1.  &quot;&quot;&quot;\n\n2.  查询所有用户数据\n\n3.  User.query.all()\n\n5.  查询有多少个用户\n\n6.  User.query.count()\n\n8.  查询第1个用户\n\n9.  User.query.first()\n\n10.  User.query.get(1) # 根据id查询\n\n12.  查询id为4的用户[3种方式]\n\n13.  User.query.get(4)\n\n14.  User.query.filter_by(id=4).all() # 简单查询 使用关键字实参的形式来设置字段名\n\n15.  User.query.filter(User.id == 4).all() # 复杂查询 使用恒等式等其他形式来设置条件\n\n17.  查询名字结尾字符为g的所有用户[开始 / 包含]\n\n18.  User.query.filter(User.name.endswith(&quot;g&quot;)).all()\n\n19.  User.query.filter(User.name.startswith(&quot;w&quot;)).all()\n\n20.  User.query.filter(User.name.contains(&quot;n&quot;)).all()\n\n21.  User.query.filter(User.name.like(&quot;%n%g&quot;)).all() 模糊查询\n\n23.  查询名字和邮箱都以li开头的所有用户[2种方式]\n\n24.  User.query.filter(User.name.startswith(&quot;li&quot;), User.email.startswith(&quot;li&quot;)).all()\n\n26.  from sqlalchemy import and_\n\n27.  User.query.filter(and_(User.name.startswith(&quot;li&quot;), User.email.startswith(&quot;li&quot;))).all()\n\n29.  查询age是25 或者 \\`email\\`以\\`itheima.com\\`结尾的所有用户\n\n30.  from sqlalchemy import or_\n\n31.  User.query.filter(or_(User.age == 25, User.email.endswith(&quot;itheima.com&quot;))).all()\n\n33.  查询名字不等于wang的所有用户[2种方式]\n\n34.  from sqlalchemy import not_\n\n35.  User.query.filter(not_(User.name == &quot;wang&quot;)).all()\n\n36.  User.query.filter(User.name != &quot;wang&quot;).all()\n\n38.  查询id为[1, 3, 5, 7, 9]的用户\n\n39.  User.query.filter(User.id.in_([1, 3, 5, 7, 9])).all()\n\n41.  所有用户先按年龄从小到大, 再按id从大到小排序, 取前5个\n\n42.  User.query.order_by(User.age, User.id.desc()).limit(5).all()\n\n44.  分页查询, 每页3个, 查询第2页的数据\n\n45.  pn = User.query.paginate(2, 3)\n\n46.  pn.items 获取该页的数据 pn.page 获取当前的页码 pn.pages 获取总页数\n</code></pre>\n"},{"title":"Nginx配置","date":"2023-01-11T04:05:22.000Z","_content":"\n\n### nginx配置\n\n```js\nuser www-data;\n#启动进程,通常设置成和cpu的数量相等\nworker_processes 2;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents {\n    worker_connections 768;\n    # multi_accept on;\n}\n\nhttp {\n    ##\n    # Basic Settings\n    ##\n\n    sendfile on;\n    tcp_nopush on;\n    types_hash_max_size 2048;\n    # server_tokens off;\n\n    # server_names_hash_bucket_size 64;\n    # server_name_in_redirect off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    ##\n    # SSL Settings\n    ##\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE\n    ssl_prefer_server_ciphers on;\n\n    ##\n    # Logging Settings\n    ##\n\n    access_log /var/log/nginx/access.log;\n    error_log /var/log/nginx/error.log;\n\n    # Gzip Settings\n    gzip on;\n    gzip_min_length 1000;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_buffers 16 8k;\n    gzip_http_version 1.1;\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n    ##\n    # Virtual Host Configs\n    ##\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n\n\n    map $sent_http_content_type $expires {\n        \"text/html\" epoch;\n        \"text/html; charset=utf-8\" epoch;\n        default off;\n    }\n\n    server {\n        listen 80;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life;\n        return 301 https://$host$request_uri;\n        # gzip on;\n        # gzip_types text/plain application/xml text/css application/javascript;\n        # gzip_min_length 1000;\n\n        # location / {\n        #     expires $expires;\n        #     proxy_redirect off;\n        #     proxy_set_header Host $host;\n        #     proxy_set_header X-Real-IP $remote_addr;\n        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        #     proxy_set_header X-Forwarded-Proto $scheme;\n        #     proxy_read_timeout 1m;\n        #     proxy_connect_timeout 1m;\n        #     proxy_pass http://127.0.0.1:3000/;\n        # }\n        # location ~ /.well-known {\n        #     allow all;\n        # }\n        # location ^~ /.well-known/pki-validation/ {\n        #     add_header Cache-Control no-cache;\n        #     default_type \"text/plain\";\n        #     rewrite /.well-known/pki-validation/(.*) /$1 break;\n        #     root /var/www/whatever;\n        # }\n        # location /nuxt3-tag {\n        #     expires $expires;\n        #     proxy_redirect off;\n        #     proxy_set_header Host $host;\n        #     proxy_set_header X-Real-IP $remote_addr;\n        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        #     proxy_set_header X-Forwarded-Proto $scheme;\n        #     proxy_read_timeout 1m;\n        #     proxy_connect_timeout 1m;\n        #     proxy_pass http://127.0.0.1:3000/nuxt3-tag;\n        # }\n        # location /stable {\n        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;\n        # }\n        # location /nuxt3 {\n        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;\n        # }\n        # location /tag {\n        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;\n        # }\n        # location /stable/api {\n        #     proxy_pass http://www.ptg.life:5000/api;\n        #     proxy_set_header Access-Control-Max-Age 86400;\n        #     proxy_set_header Host $host;\n        #     proxy_redirect off;\n        #     proxy_set_header X-Real-IP $remote_addr;\n        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        #     proxy_connect_timeout 60;\n        #     proxy_read_timeout 60;\n        #     proxy_send_timeout 60;\n        # }\n        # location /static/ {\n        #     valid_referers none blocked *.ptg.life;\n        #     if ($invalid_referer) {\n        #         return 403;\n        #         break;\n        #     }\n        #     expires 30d;\n        #     autoindex on;\n        #     root /data;\n        # }\n    }\n\n    server {\n        listen 443 ssl;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;\n\n        # 新版的nginx只用listen 443 ssl就行,需要注释\n        # ssl on;\n        keepalive_timeout 10m;\n        server_tokens off;\n        # 缓存SSL握手产生的参数和加密密钥的时长\n        ssl_session_timeout 10m;\n        # 证书\n        ssl_certificate /etc/nginx/certificate.crt;\n        ssl_certificate_key /etc/nginx/private.key;\n        # 日志\n        access_log /var/log/nginx/nginx.vhost.access.log;\n        error_log /var/log/nginx/nginx.vhost.error.log;\n\n        # 根用iframe嵌入做个隐式url\n        location / {\n            index index.html index.htm index.html inde.php;\n            root /usr/share/nginx/html;\n        }\n\n        location ~ /.well-known {\n            allow all;\n        }\n\n        location ^~ /.well-known/pki-validation/ {\n            add_header Cache-Control no-cache;\n            default_type \"text/plain\";\n            rewrite /.well-known/pki-validation/(.*) /$1 break;\n            root /var/www/whatever;\n        }\n\n        location /nuxt3-tag/ {\n            expires $expires;\n            proxy_redirect off;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_read_timeout 1m;\n            proxy_connect_timeout 1m;\n            proxy_pass http://127.0.0.1:3000/nuxt3-tag/;\n        }\n\n        location /naifu/ {\n            expires $expires;\n            proxy_redirect off;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_read_timeout 1m;\n            proxy_connect_timeout 1m;\n            proxy_pass http://127.0.0.1:3000/naifu/;\n        }\n\n        location /nuxt3 {\n            rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent;\n        }\n\n        location /tag {\n            rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent;\n        }\n\n        # flask的接口代理\n        location /stable/api {\n            proxy_pass http://127.0.0.1:5000/api;\n            proxy_set_header Access-Control-Max-Age 86400;\n            proxy_set_header Host $host;\n            proxy_redirect off;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_connect_timeout 60;\n            proxy_read_timeout 60;\n            proxy_send_timeout 60;\n        }\n\n        location /static/ {\n            valid_referers none blocked *.ptg.life;\n            if ($invalid_referer) {\n                return 403;\n                break;\n            }\n            expires 30d;\n            autoindex on;\n            root /data;\n        }\n    }\n}\n```\n","source":"_posts/Nginx配置.md","raw":"---\ntitle: Nginx配置\ndate: 2023-01-11 12:05:22\ntags:\n---\n\n\n### nginx配置\n\n```js\nuser www-data;\n#启动进程,通常设置成和cpu的数量相等\nworker_processes 2;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents {\n    worker_connections 768;\n    # multi_accept on;\n}\n\nhttp {\n    ##\n    # Basic Settings\n    ##\n\n    sendfile on;\n    tcp_nopush on;\n    types_hash_max_size 2048;\n    # server_tokens off;\n\n    # server_names_hash_bucket_size 64;\n    # server_name_in_redirect off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    ##\n    # SSL Settings\n    ##\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE\n    ssl_prefer_server_ciphers on;\n\n    ##\n    # Logging Settings\n    ##\n\n    access_log /var/log/nginx/access.log;\n    error_log /var/log/nginx/error.log;\n\n    # Gzip Settings\n    gzip on;\n    gzip_min_length 1000;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_buffers 16 8k;\n    gzip_http_version 1.1;\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n    ##\n    # Virtual Host Configs\n    ##\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n\n\n    map $sent_http_content_type $expires {\n        \"text/html\" epoch;\n        \"text/html; charset=utf-8\" epoch;\n        default off;\n    }\n\n    server {\n        listen 80;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life;\n        return 301 https://$host$request_uri;\n        # gzip on;\n        # gzip_types text/plain application/xml text/css application/javascript;\n        # gzip_min_length 1000;\n\n        # location / {\n        #     expires $expires;\n        #     proxy_redirect off;\n        #     proxy_set_header Host $host;\n        #     proxy_set_header X-Real-IP $remote_addr;\n        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        #     proxy_set_header X-Forwarded-Proto $scheme;\n        #     proxy_read_timeout 1m;\n        #     proxy_connect_timeout 1m;\n        #     proxy_pass http://127.0.0.1:3000/;\n        # }\n        # location ~ /.well-known {\n        #     allow all;\n        # }\n        # location ^~ /.well-known/pki-validation/ {\n        #     add_header Cache-Control no-cache;\n        #     default_type \"text/plain\";\n        #     rewrite /.well-known/pki-validation/(.*) /$1 break;\n        #     root /var/www/whatever;\n        # }\n        # location /nuxt3-tag {\n        #     expires $expires;\n        #     proxy_redirect off;\n        #     proxy_set_header Host $host;\n        #     proxy_set_header X-Real-IP $remote_addr;\n        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        #     proxy_set_header X-Forwarded-Proto $scheme;\n        #     proxy_read_timeout 1m;\n        #     proxy_connect_timeout 1m;\n        #     proxy_pass http://127.0.0.1:3000/nuxt3-tag;\n        # }\n        # location /stable {\n        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;\n        # }\n        # location /nuxt3 {\n        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;\n        # }\n        # location /tag {\n        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;\n        # }\n        # location /stable/api {\n        #     proxy_pass http://www.ptg.life:5000/api;\n        #     proxy_set_header Access-Control-Max-Age 86400;\n        #     proxy_set_header Host $host;\n        #     proxy_redirect off;\n        #     proxy_set_header X-Real-IP $remote_addr;\n        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        #     proxy_connect_timeout 60;\n        #     proxy_read_timeout 60;\n        #     proxy_send_timeout 60;\n        # }\n        # location /static/ {\n        #     valid_referers none blocked *.ptg.life;\n        #     if ($invalid_referer) {\n        #         return 403;\n        #         break;\n        #     }\n        #     expires 30d;\n        #     autoindex on;\n        #     root /data;\n        # }\n    }\n\n    server {\n        listen 443 ssl;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;\n\n        # 新版的nginx只用listen 443 ssl就行,需要注释\n        # ssl on;\n        keepalive_timeout 10m;\n        server_tokens off;\n        # 缓存SSL握手产生的参数和加密密钥的时长\n        ssl_session_timeout 10m;\n        # 证书\n        ssl_certificate /etc/nginx/certificate.crt;\n        ssl_certificate_key /etc/nginx/private.key;\n        # 日志\n        access_log /var/log/nginx/nginx.vhost.access.log;\n        error_log /var/log/nginx/nginx.vhost.error.log;\n\n        # 根用iframe嵌入做个隐式url\n        location / {\n            index index.html index.htm index.html inde.php;\n            root /usr/share/nginx/html;\n        }\n\n        location ~ /.well-known {\n            allow all;\n        }\n\n        location ^~ /.well-known/pki-validation/ {\n            add_header Cache-Control no-cache;\n            default_type \"text/plain\";\n            rewrite /.well-known/pki-validation/(.*) /$1 break;\n            root /var/www/whatever;\n        }\n\n        location /nuxt3-tag/ {\n            expires $expires;\n            proxy_redirect off;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_read_timeout 1m;\n            proxy_connect_timeout 1m;\n            proxy_pass http://127.0.0.1:3000/nuxt3-tag/;\n        }\n\n        location /naifu/ {\n            expires $expires;\n            proxy_redirect off;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_read_timeout 1m;\n            proxy_connect_timeout 1m;\n            proxy_pass http://127.0.0.1:3000/naifu/;\n        }\n\n        location /nuxt3 {\n            rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent;\n        }\n\n        location /tag {\n            rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent;\n        }\n\n        # flask的接口代理\n        location /stable/api {\n            proxy_pass http://127.0.0.1:5000/api;\n            proxy_set_header Access-Control-Max-Age 86400;\n            proxy_set_header Host $host;\n            proxy_redirect off;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_connect_timeout 60;\n            proxy_read_timeout 60;\n            proxy_send_timeout 60;\n        }\n\n        location /static/ {\n            valid_referers none blocked *.ptg.life;\n            if ($invalid_referer) {\n                return 403;\n                break;\n            }\n            expires 30d;\n            autoindex on;\n            root /data;\n        }\n    }\n}\n```\n","slug":"Nginx配置","published":1,"updated":"2023-01-18T07:07:39.001Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld4ablbn0005jfh0g6m94a0i","content":"<h3 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h3><pre><code class=\"js\">user www-data;\n#启动进程,通常设置成和cpu的数量相等\nworker_processes 2;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents &#123;\n    worker_connections 768;\n    # multi_accept on;\n&#125;\n\nhttp &#123;\n    ##\n    # Basic Settings\n    ##\n\n    sendfile on;\n    tcp_nopush on;\n    types_hash_max_size 2048;\n    # server_tokens off;\n\n    # server_names_hash_bucket_size 64;\n    # server_name_in_redirect off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    ##\n    # SSL Settings\n    ##\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE\n    ssl_prefer_server_ciphers on;\n\n    ##\n    # Logging Settings\n    ##\n\n    access_log /var/log/nginx/access.log;\n    error_log /var/log/nginx/error.log;\n\n    # Gzip Settings\n    gzip on;\n    gzip_min_length 1000;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_buffers 16 8k;\n    gzip_http_version 1.1;\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n    ##\n    # Virtual Host Configs\n    ##\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n\n\n    map $sent_http_content_type $expires &#123;\n        &quot;text/html&quot; epoch;\n        &quot;text/html; charset=utf-8&quot; epoch;\n        default off;\n    &#125;\n\n    server &#123;\n        listen 80;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life;\n        return 301 https://$host$request_uri;\n        # gzip on;\n        # gzip_types text/plain application/xml text/css application/javascript;\n        # gzip_min_length 1000;\n\n        # location / &#123;\n        #     expires $expires;\n        #     proxy_redirect off;\n        #     proxy_set_header Host $host;\n        #     proxy_set_header X-Real-IP $remote_addr;\n        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        #     proxy_set_header X-Forwarded-Proto $scheme;\n        #     proxy_read_timeout 1m;\n        #     proxy_connect_timeout 1m;\n        #     proxy_pass http://127.0.0.1:3000/;\n        # &#125;\n        # location ~ /.well-known &#123;\n        #     allow all;\n        # &#125;\n        # location ^~ /.well-known/pki-validation/ &#123;\n        #     add_header Cache-Control no-cache;\n        #     default_type &quot;text/plain&quot;;\n        #     rewrite /.well-known/pki-validation/(.*) /$1 break;\n        #     root /var/www/whatever;\n        # &#125;\n        # location /nuxt3-tag &#123;\n        #     expires $expires;\n        #     proxy_redirect off;\n        #     proxy_set_header Host $host;\n        #     proxy_set_header X-Real-IP $remote_addr;\n        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        #     proxy_set_header X-Forwarded-Proto $scheme;\n        #     proxy_read_timeout 1m;\n        #     proxy_connect_timeout 1m;\n        #     proxy_pass http://127.0.0.1:3000/nuxt3-tag;\n        # &#125;\n        # location /stable &#123;\n        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;\n        # &#125;\n        # location /nuxt3 &#123;\n        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;\n        # &#125;\n        # location /tag &#123;\n        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;\n        # &#125;\n        # location /stable/api &#123;\n        #     proxy_pass http://www.ptg.life:5000/api;\n        #     proxy_set_header Access-Control-Max-Age 86400;\n        #     proxy_set_header Host $host;\n        #     proxy_redirect off;\n        #     proxy_set_header X-Real-IP $remote_addr;\n        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        #     proxy_connect_timeout 60;\n        #     proxy_read_timeout 60;\n        #     proxy_send_timeout 60;\n        # &#125;\n        # location /static/ &#123;\n        #     valid_referers none blocked *.ptg.life;\n        #     if ($invalid_referer) &#123;\n        #         return 403;\n        #         break;\n        #     &#125;\n        #     expires 30d;\n        #     autoindex on;\n        #     root /data;\n        # &#125;\n    &#125;\n\n    server &#123;\n        listen 443 ssl;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;\n\n        # 新版的nginx只用listen 443 ssl就行,需要注释\n        # ssl on;\n        keepalive_timeout 10m;\n        server_tokens off;\n        # 缓存SSL握手产生的参数和加密密钥的时长\n        ssl_session_timeout 10m;\n        # 证书\n        ssl_certificate /etc/nginx/certificate.crt;\n        ssl_certificate_key /etc/nginx/private.key;\n        # 日志\n        access_log /var/log/nginx/nginx.vhost.access.log;\n        error_log /var/log/nginx/nginx.vhost.error.log;\n\n        # 根用iframe嵌入做个隐式url\n        location / &#123;\n            index index.html index.htm index.html inde.php;\n            root /usr/share/nginx/html;\n        &#125;\n\n        location ~ /.well-known &#123;\n            allow all;\n        &#125;\n\n        location ^~ /.well-known/pki-validation/ &#123;\n            add_header Cache-Control no-cache;\n            default_type &quot;text/plain&quot;;\n            rewrite /.well-known/pki-validation/(.*) /$1 break;\n            root /var/www/whatever;\n        &#125;\n\n        location /nuxt3-tag/ &#123;\n            expires $expires;\n            proxy_redirect off;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_read_timeout 1m;\n            proxy_connect_timeout 1m;\n            proxy_pass http://127.0.0.1:3000/nuxt3-tag/;\n        &#125;\n\n        location /naifu/ &#123;\n            expires $expires;\n            proxy_redirect off;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_read_timeout 1m;\n            proxy_connect_timeout 1m;\n            proxy_pass http://127.0.0.1:3000/naifu/;\n        &#125;\n\n        location /nuxt3 &#123;\n            rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent;\n        &#125;\n\n        location /tag &#123;\n            rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent;\n        &#125;\n\n        # flask的接口代理\n        location /stable/api &#123;\n            proxy_pass http://127.0.0.1:5000/api;\n            proxy_set_header Access-Control-Max-Age 86400;\n            proxy_set_header Host $host;\n            proxy_redirect off;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_connect_timeout 60;\n            proxy_read_timeout 60;\n            proxy_send_timeout 60;\n        &#125;\n\n        location /static/ &#123;\n            valid_referers none blocked *.ptg.life;\n            if ($invalid_referer) &#123;\n                return 403;\n                break;\n            &#125;\n            expires 30d;\n            autoindex on;\n            root /data;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h3><pre><code class=\"js\">user www-data;\n#启动进程,通常设置成和cpu的数量相等\nworker_processes 2;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents &#123;\n    worker_connections 768;\n    # multi_accept on;\n&#125;\n\nhttp &#123;\n    ##\n    # Basic Settings\n    ##\n\n    sendfile on;\n    tcp_nopush on;\n    types_hash_max_size 2048;\n    # server_tokens off;\n\n    # server_names_hash_bucket_size 64;\n    # server_name_in_redirect off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    ##\n    # SSL Settings\n    ##\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE\n    ssl_prefer_server_ciphers on;\n\n    ##\n    # Logging Settings\n    ##\n\n    access_log /var/log/nginx/access.log;\n    error_log /var/log/nginx/error.log;\n\n    # Gzip Settings\n    gzip on;\n    gzip_min_length 1000;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_buffers 16 8k;\n    gzip_http_version 1.1;\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n    ##\n    # Virtual Host Configs\n    ##\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n\n\n    map $sent_http_content_type $expires &#123;\n        &quot;text/html&quot; epoch;\n        &quot;text/html; charset=utf-8&quot; epoch;\n        default off;\n    &#125;\n\n    server &#123;\n        listen 80;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life;\n        return 301 https://$host$request_uri;\n        # gzip on;\n        # gzip_types text/plain application/xml text/css application/javascript;\n        # gzip_min_length 1000;\n\n        # location / &#123;\n        #     expires $expires;\n        #     proxy_redirect off;\n        #     proxy_set_header Host $host;\n        #     proxy_set_header X-Real-IP $remote_addr;\n        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        #     proxy_set_header X-Forwarded-Proto $scheme;\n        #     proxy_read_timeout 1m;\n        #     proxy_connect_timeout 1m;\n        #     proxy_pass http://127.0.0.1:3000/;\n        # &#125;\n        # location ~ /.well-known &#123;\n        #     allow all;\n        # &#125;\n        # location ^~ /.well-known/pki-validation/ &#123;\n        #     add_header Cache-Control no-cache;\n        #     default_type &quot;text/plain&quot;;\n        #     rewrite /.well-known/pki-validation/(.*) /$1 break;\n        #     root /var/www/whatever;\n        # &#125;\n        # location /nuxt3-tag &#123;\n        #     expires $expires;\n        #     proxy_redirect off;\n        #     proxy_set_header Host $host;\n        #     proxy_set_header X-Real-IP $remote_addr;\n        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        #     proxy_set_header X-Forwarded-Proto $scheme;\n        #     proxy_read_timeout 1m;\n        #     proxy_connect_timeout 1m;\n        #     proxy_pass http://127.0.0.1:3000/nuxt3-tag;\n        # &#125;\n        # location /stable &#123;\n        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;\n        # &#125;\n        # location /nuxt3 &#123;\n        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;\n        # &#125;\n        # location /tag &#123;\n        #     rewrite ^/(.*) http://www.ptg.life:3000/nuxt3-tag permanent;\n        # &#125;\n        # location /stable/api &#123;\n        #     proxy_pass http://www.ptg.life:5000/api;\n        #     proxy_set_header Access-Control-Max-Age 86400;\n        #     proxy_set_header Host $host;\n        #     proxy_redirect off;\n        #     proxy_set_header X-Real-IP $remote_addr;\n        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        #     proxy_connect_timeout 60;\n        #     proxy_read_timeout 60;\n        #     proxy_send_timeout 60;\n        # &#125;\n        # location /static/ &#123;\n        #     valid_referers none blocked *.ptg.life;\n        #     if ($invalid_referer) &#123;\n        #         return 403;\n        #         break;\n        #     &#125;\n        #     expires 30d;\n        #     autoindex on;\n        #     root /data;\n        # &#125;\n    &#125;\n\n    server &#123;\n        listen 443 ssl;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;\n\n        # 新版的nginx只用listen 443 ssl就行,需要注释\n        # ssl on;\n        keepalive_timeout 10m;\n        server_tokens off;\n        # 缓存SSL握手产生的参数和加密密钥的时长\n        ssl_session_timeout 10m;\n        # 证书\n        ssl_certificate /etc/nginx/certificate.crt;\n        ssl_certificate_key /etc/nginx/private.key;\n        # 日志\n        access_log /var/log/nginx/nginx.vhost.access.log;\n        error_log /var/log/nginx/nginx.vhost.error.log;\n\n        # 根用iframe嵌入做个隐式url\n        location / &#123;\n            index index.html index.htm index.html inde.php;\n            root /usr/share/nginx/html;\n        &#125;\n\n        location ~ /.well-known &#123;\n            allow all;\n        &#125;\n\n        location ^~ /.well-known/pki-validation/ &#123;\n            add_header Cache-Control no-cache;\n            default_type &quot;text/plain&quot;;\n            rewrite /.well-known/pki-validation/(.*) /$1 break;\n            root /var/www/whatever;\n        &#125;\n\n        location /nuxt3-tag/ &#123;\n            expires $expires;\n            proxy_redirect off;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_read_timeout 1m;\n            proxy_connect_timeout 1m;\n            proxy_pass http://127.0.0.1:3000/nuxt3-tag/;\n        &#125;\n\n        location /naifu/ &#123;\n            expires $expires;\n            proxy_redirect off;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_read_timeout 1m;\n            proxy_connect_timeout 1m;\n            proxy_pass http://127.0.0.1:3000/naifu/;\n        &#125;\n\n        location /nuxt3 &#123;\n            rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent;\n        &#125;\n\n        location /tag &#123;\n            rewrite ^/(.*) $host://$http_host/nuxt3-tag permanent;\n        &#125;\n\n        # flask的接口代理\n        location /stable/api &#123;\n            proxy_pass http://127.0.0.1:5000/api;\n            proxy_set_header Access-Control-Max-Age 86400;\n            proxy_set_header Host $host;\n            proxy_redirect off;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_connect_timeout 60;\n            proxy_read_timeout 60;\n            proxy_send_timeout 60;\n        &#125;\n\n        location /static/ &#123;\n            valid_referers none blocked *.ptg.life;\n            if ($invalid_referer) &#123;\n                return 403;\n                break;\n            &#125;\n            expires 30d;\n            autoindex on;\n            root /data;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n"},{"title":"Git常用命令的使用","date":"2023-01-11T04:09:38.000Z","_content":"\n### git名词\n\n- workspace :工作区\n- Index/Stage : 暂存区\n- Repository : 仓库区(或本地仓库)\n- Remote :远程仓库区\n\n### 常用操作分部解析\n\n- 在任何目录创建新的git仓库,执行 git init**,** .git文件就是本地的一个仓库\n- git status 查看修改状态\n- git add ,是将文件放入了暂存区,可以使用git checkout \"文件名\" 将文件从暂存区重新拿到工作区\n- git commit ,是将文件从暂存区放入到本地.git仓库\n- git status, 查看文件的状态,在暂存区还是在本地仓库,还是已经在本地仓库,或者已经提交(通常这些vscode工具一目了然)\n- git pull ,拉取的默认是你自己的分支,详细:git pull origin dev, git pull origin master 拉去远程master分支\n\n### git 配置\n\n```\n# 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n```\n\n### 常用流程\n\n- git add .\n- git commit -m ' '\n- git pull\n- git push\n\n### 常用git命令行快捷方式\n\n- gaa ...... git add .\n- gcam '' ...... git commit -m ''\n- gl ....... git pull\n- gp ....... git push\n\n执行cat ~/.oh-my-zsh/plugins/git/git.plugin.zsh 查看更多简写\n\n### 常用命令\n\n- git log\n- git reflog(涉及到的所有操作步骤)\n- git reset --hard HEAD\n- git checkout file 恢复暂存区的文件到工作区\n- git checkout branch 切换分支\n- git stash\n- git stash pop\n- git branch -r 查看远程分支\n- git branch -a 查看所有分支\n- git remote 列出所有的远程主机\n- git pull --all 拉取远程所有的分支\n- git commit --amend -message=\"”(修改最近的一次提交注释)\n- `git checkout (branchname)` 切换分支命令\n- `git branch (branchname)` 创建分支命令\n- `git branch -d (branchname)` 删除分支命令\n- git push origin --delete Chapater6 删除远程分支命令\n","source":"_posts/Git常用命令的使用.md","raw":"---\ntitle: Git常用命令的使用\ndate: 2023-01-11 12:09:38\ntags:\n---\n\n### git名词\n\n- workspace :工作区\n- Index/Stage : 暂存区\n- Repository : 仓库区(或本地仓库)\n- Remote :远程仓库区\n\n### 常用操作分部解析\n\n- 在任何目录创建新的git仓库,执行 git init**,** .git文件就是本地的一个仓库\n- git status 查看修改状态\n- git add ,是将文件放入了暂存区,可以使用git checkout \"文件名\" 将文件从暂存区重新拿到工作区\n- git commit ,是将文件从暂存区放入到本地.git仓库\n- git status, 查看文件的状态,在暂存区还是在本地仓库,还是已经在本地仓库,或者已经提交(通常这些vscode工具一目了然)\n- git pull ,拉取的默认是你自己的分支,详细:git pull origin dev, git pull origin master 拉去远程master分支\n\n### git 配置\n\n```\n# 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n```\n\n### 常用流程\n\n- git add .\n- git commit -m ' '\n- git pull\n- git push\n\n### 常用git命令行快捷方式\n\n- gaa ...... git add .\n- gcam '' ...... git commit -m ''\n- gl ....... git pull\n- gp ....... git push\n\n执行cat ~/.oh-my-zsh/plugins/git/git.plugin.zsh 查看更多简写\n\n### 常用命令\n\n- git log\n- git reflog(涉及到的所有操作步骤)\n- git reset --hard HEAD\n- git checkout file 恢复暂存区的文件到工作区\n- git checkout branch 切换分支\n- git stash\n- git stash pop\n- git branch -r 查看远程分支\n- git branch -a 查看所有分支\n- git remote 列出所有的远程主机\n- git pull --all 拉取远程所有的分支\n- git commit --amend -message=\"”(修改最近的一次提交注释)\n- `git checkout (branchname)` 切换分支命令\n- `git branch (branchname)` 创建分支命令\n- `git branch -d (branchname)` 删除分支命令\n- git push origin --delete Chapater6 删除远程分支命令\n","slug":"Git常用命令的使用","published":1,"updated":"2023-01-18T06:50:16.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld4ablbo0007jfh065ow1pmn","content":"<h3 id=\"git名词\"><a href=\"#git名词\" class=\"headerlink\" title=\"git名词\"></a>git名词</h3><ul>\n<li>workspace :工作区</li>\n<li>Index&#x2F;Stage : 暂存区</li>\n<li>Repository : 仓库区(或本地仓库)</li>\n<li>Remote :远程仓库区</li>\n</ul>\n<h3 id=\"常用操作分部解析\"><a href=\"#常用操作分部解析\" class=\"headerlink\" title=\"常用操作分部解析\"></a>常用操作分部解析</h3><ul>\n<li>在任何目录创建新的git仓库,执行 git init**,** .git文件就是本地的一个仓库</li>\n<li>git status 查看修改状态</li>\n<li>git add ,是将文件放入了暂存区,可以使用git checkout “文件名” 将文件从暂存区重新拿到工作区</li>\n<li>git commit ,是将文件从暂存区放入到本地.git仓库</li>\n<li>git status, 查看文件的状态,在暂存区还是在本地仓库,还是已经在本地仓库,或者已经提交(通常这些vscode工具一目了然)</li>\n<li>git pull ,拉取的默认是你自己的分支,详细:git pull origin dev, git pull origin master 拉去远程master分支</li>\n</ul>\n<h3 id=\"git-配置\"><a href=\"#git-配置\" class=\"headerlink\" title=\"git 配置\"></a>git 配置</h3><pre><code># 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name &quot;[name]&quot;\n$ git config [--global] user.email &quot;[email address]&quot;\n</code></pre>\n<h3 id=\"常用流程\"><a href=\"#常用流程\" class=\"headerlink\" title=\"常用流程\"></a>常用流程</h3><ul>\n<li>git add .</li>\n<li>git commit -m ‘ ‘</li>\n<li>git pull</li>\n<li>git push</li>\n</ul>\n<h3 id=\"常用git命令行快捷方式\"><a href=\"#常用git命令行快捷方式\" class=\"headerlink\" title=\"常用git命令行快捷方式\"></a>常用git命令行快捷方式</h3><ul>\n<li>gaa …… git add .</li>\n<li>gcam ‘’ …… git commit -m ‘’</li>\n<li>gl ……. git pull</li>\n<li>gp ……. git push</li>\n</ul>\n<p>执行cat ~&#x2F;.oh-my-zsh&#x2F;plugins&#x2F;git&#x2F;git.plugin.zsh 查看更多简写</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ul>\n<li>git log</li>\n<li>git reflog(涉及到的所有操作步骤)</li>\n<li>git reset –hard HEAD</li>\n<li>git checkout file 恢复暂存区的文件到工作区</li>\n<li>git checkout branch 切换分支</li>\n<li>git stash</li>\n<li>git stash pop</li>\n<li>git branch -r 查看远程分支</li>\n<li>git branch -a 查看所有分支</li>\n<li>git remote 列出所有的远程主机</li>\n<li>git pull –all 拉取远程所有的分支</li>\n<li>git commit –amend -message&#x3D;””(修改最近的一次提交注释)</li>\n<li><code>git checkout (branchname)</code> 切换分支命令</li>\n<li><code>git branch (branchname)</code> 创建分支命令</li>\n<li><code>git branch -d (branchname)</code> 删除分支命令</li>\n<li>git push origin –delete Chapater6 删除远程分支命令</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"git名词\"><a href=\"#git名词\" class=\"headerlink\" title=\"git名词\"></a>git名词</h3><ul>\n<li>workspace :工作区</li>\n<li>Index&#x2F;Stage : 暂存区</li>\n<li>Repository : 仓库区(或本地仓库)</li>\n<li>Remote :远程仓库区</li>\n</ul>\n<h3 id=\"常用操作分部解析\"><a href=\"#常用操作分部解析\" class=\"headerlink\" title=\"常用操作分部解析\"></a>常用操作分部解析</h3><ul>\n<li>在任何目录创建新的git仓库,执行 git init**,** .git文件就是本地的一个仓库</li>\n<li>git status 查看修改状态</li>\n<li>git add ,是将文件放入了暂存区,可以使用git checkout “文件名” 将文件从暂存区重新拿到工作区</li>\n<li>git commit ,是将文件从暂存区放入到本地.git仓库</li>\n<li>git status, 查看文件的状态,在暂存区还是在本地仓库,还是已经在本地仓库,或者已经提交(通常这些vscode工具一目了然)</li>\n<li>git pull ,拉取的默认是你自己的分支,详细:git pull origin dev, git pull origin master 拉去远程master分支</li>\n</ul>\n<h3 id=\"git-配置\"><a href=\"#git-配置\" class=\"headerlink\" title=\"git 配置\"></a>git 配置</h3><pre><code># 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name &quot;[name]&quot;\n$ git config [--global] user.email &quot;[email address]&quot;\n</code></pre>\n<h3 id=\"常用流程\"><a href=\"#常用流程\" class=\"headerlink\" title=\"常用流程\"></a>常用流程</h3><ul>\n<li>git add .</li>\n<li>git commit -m ‘ ‘</li>\n<li>git pull</li>\n<li>git push</li>\n</ul>\n<h3 id=\"常用git命令行快捷方式\"><a href=\"#常用git命令行快捷方式\" class=\"headerlink\" title=\"常用git命令行快捷方式\"></a>常用git命令行快捷方式</h3><ul>\n<li>gaa …… git add .</li>\n<li>gcam ‘’ …… git commit -m ‘’</li>\n<li>gl ……. git pull</li>\n<li>gp ……. git push</li>\n</ul>\n<p>执行cat ~&#x2F;.oh-my-zsh&#x2F;plugins&#x2F;git&#x2F;git.plugin.zsh 查看更多简写</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ul>\n<li>git log</li>\n<li>git reflog(涉及到的所有操作步骤)</li>\n<li>git reset –hard HEAD</li>\n<li>git checkout file 恢复暂存区的文件到工作区</li>\n<li>git checkout branch 切换分支</li>\n<li>git stash</li>\n<li>git stash pop</li>\n<li>git branch -r 查看远程分支</li>\n<li>git branch -a 查看所有分支</li>\n<li>git remote 列出所有的远程主机</li>\n<li>git pull –all 拉取远程所有的分支</li>\n<li>git commit –amend -message&#x3D;””(修改最近的一次提交注释)</li>\n<li><code>git checkout (branchname)</code> 切换分支命令</li>\n<li><code>git branch (branchname)</code> 创建分支命令</li>\n<li><code>git branch -d (branchname)</code> 删除分支命令</li>\n<li>git push origin –delete Chapater6 删除远程分支命令</li>\n</ul>\n"},{"title":"Mysql的processlist中处理表连接","date":"2023-01-16T08:22:53.000Z","_content":"\n\n## processlist中大量sleep\n\n在生产环境切换mysql数据库，切换后数据库连接池爆满，抛出异常“too many connections”；\n\n出现这种现象，比较常见的原因是连接数真不够了，需要设置连接数：\n\n### 连接数不够解决\n\n```js\nmysql -u root -p;\nshow full processlist;\nkill id;\n```\n\n### 查看最大连接数\n\n```js\nshow variables like \"max_connections\";\n```\n\n查看最大连接数，应该是与上面查询到的连接数相同，才会出现too many connections的情况\n\n```js\nset GLOBAL max_connections=1000;\n```\n\n修改最大连接数，但是这不是一劳永逸的方法，应该要让它自动杀死那些sleep的进程。\n\n### 自动杀死那些sleep的进程\n\n```js\nshow global variables like 'wait_timeout';\n```\n\n这个数值指的是mysql在关闭一个非交互的连接之前要等待的秒数，默认是28800s\n\n```js\nset global wait_timeout=300; \n```\n\n修改这个数值，这里可以随意，最好控制在几分钟内\n\n```js\nset global interactive_timeout=500; \n```\n\n修改这个数值，表示mysql在关闭一个连接之前要等待的秒数，至此可以让mysql自动关闭那些没用的连接，但要注意的是，正在使用的连接到了时间也会被关闭，因此这个时间值要合适\n\n### 笨方法\n\n```js\nselect concat('KILL ',id,';') from information_schema.processlist where user='root';\n```\n\n先把要kill的连接id都查询出来,然后一个个kill\n","source":"_posts/Mysql的processlist中处理表连接.md","raw":"---\ntitle: Mysql的processlist中处理表连接\ndate: 2023-01-16 16:22:53\ntags:\n---\n\n\n## processlist中大量sleep\n\n在生产环境切换mysql数据库，切换后数据库连接池爆满，抛出异常“too many connections”；\n\n出现这种现象，比较常见的原因是连接数真不够了，需要设置连接数：\n\n### 连接数不够解决\n\n```js\nmysql -u root -p;\nshow full processlist;\nkill id;\n```\n\n### 查看最大连接数\n\n```js\nshow variables like \"max_connections\";\n```\n\n查看最大连接数，应该是与上面查询到的连接数相同，才会出现too many connections的情况\n\n```js\nset GLOBAL max_connections=1000;\n```\n\n修改最大连接数，但是这不是一劳永逸的方法，应该要让它自动杀死那些sleep的进程。\n\n### 自动杀死那些sleep的进程\n\n```js\nshow global variables like 'wait_timeout';\n```\n\n这个数值指的是mysql在关闭一个非交互的连接之前要等待的秒数，默认是28800s\n\n```js\nset global wait_timeout=300; \n```\n\n修改这个数值，这里可以随意，最好控制在几分钟内\n\n```js\nset global interactive_timeout=500; \n```\n\n修改这个数值，表示mysql在关闭一个连接之前要等待的秒数，至此可以让mysql自动关闭那些没用的连接，但要注意的是，正在使用的连接到了时间也会被关闭，因此这个时间值要合适\n\n### 笨方法\n\n```js\nselect concat('KILL ',id,';') from information_schema.processlist where user='root';\n```\n\n先把要kill的连接id都查询出来,然后一个个kill\n","slug":"Mysql的processlist中处理表连接","published":1,"updated":"2023-01-18T06:50:30.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld4ablbp0008jfh0dd38eyah","content":"<h2 id=\"processlist中大量sleep\"><a href=\"#processlist中大量sleep\" class=\"headerlink\" title=\"processlist中大量sleep\"></a>processlist中大量sleep</h2><p>在生产环境切换mysql数据库，切换后数据库连接池爆满，抛出异常“too many connections”；</p>\n<p>出现这种现象，比较常见的原因是连接数真不够了，需要设置连接数：</p>\n<h3 id=\"连接数不够解决\"><a href=\"#连接数不够解决\" class=\"headerlink\" title=\"连接数不够解决\"></a>连接数不够解决</h3><pre><code class=\"js\">mysql -u root -p;\nshow full processlist;\nkill id;\n</code></pre>\n<h3 id=\"查看最大连接数\"><a href=\"#查看最大连接数\" class=\"headerlink\" title=\"查看最大连接数\"></a>查看最大连接数</h3><pre><code class=\"js\">show variables like &quot;max_connections&quot;;\n</code></pre>\n<p>查看最大连接数，应该是与上面查询到的连接数相同，才会出现too many connections的情况</p>\n<pre><code class=\"js\">set GLOBAL max_connections=1000;\n</code></pre>\n<p>修改最大连接数，但是这不是一劳永逸的方法，应该要让它自动杀死那些sleep的进程。</p>\n<h3 id=\"自动杀死那些sleep的进程\"><a href=\"#自动杀死那些sleep的进程\" class=\"headerlink\" title=\"自动杀死那些sleep的进程\"></a>自动杀死那些sleep的进程</h3><pre><code class=\"js\">show global variables like &#39;wait_timeout&#39;;\n</code></pre>\n<p>这个数值指的是mysql在关闭一个非交互的连接之前要等待的秒数，默认是28800s</p>\n<pre><code class=\"js\">set global wait_timeout=300; \n</code></pre>\n<p>修改这个数值，这里可以随意，最好控制在几分钟内</p>\n<pre><code class=\"js\">set global interactive_timeout=500; \n</code></pre>\n<p>修改这个数值，表示mysql在关闭一个连接之前要等待的秒数，至此可以让mysql自动关闭那些没用的连接，但要注意的是，正在使用的连接到了时间也会被关闭，因此这个时间值要合适</p>\n<h3 id=\"笨方法\"><a href=\"#笨方法\" class=\"headerlink\" title=\"笨方法\"></a>笨方法</h3><pre><code class=\"js\">select concat(&#39;KILL &#39;,id,&#39;;&#39;) from information_schema.processlist where user=&#39;root&#39;;\n</code></pre>\n<p>先把要kill的连接id都查询出来,然后一个个kill</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"processlist中大量sleep\"><a href=\"#processlist中大量sleep\" class=\"headerlink\" title=\"processlist中大量sleep\"></a>processlist中大量sleep</h2><p>在生产环境切换mysql数据库，切换后数据库连接池爆满，抛出异常“too many connections”；</p>\n<p>出现这种现象，比较常见的原因是连接数真不够了，需要设置连接数：</p>\n<h3 id=\"连接数不够解决\"><a href=\"#连接数不够解决\" class=\"headerlink\" title=\"连接数不够解决\"></a>连接数不够解决</h3><pre><code class=\"js\">mysql -u root -p;\nshow full processlist;\nkill id;\n</code></pre>\n<h3 id=\"查看最大连接数\"><a href=\"#查看最大连接数\" class=\"headerlink\" title=\"查看最大连接数\"></a>查看最大连接数</h3><pre><code class=\"js\">show variables like &quot;max_connections&quot;;\n</code></pre>\n<p>查看最大连接数，应该是与上面查询到的连接数相同，才会出现too many connections的情况</p>\n<pre><code class=\"js\">set GLOBAL max_connections=1000;\n</code></pre>\n<p>修改最大连接数，但是这不是一劳永逸的方法，应该要让它自动杀死那些sleep的进程。</p>\n<h3 id=\"自动杀死那些sleep的进程\"><a href=\"#自动杀死那些sleep的进程\" class=\"headerlink\" title=\"自动杀死那些sleep的进程\"></a>自动杀死那些sleep的进程</h3><pre><code class=\"js\">show global variables like &#39;wait_timeout&#39;;\n</code></pre>\n<p>这个数值指的是mysql在关闭一个非交互的连接之前要等待的秒数，默认是28800s</p>\n<pre><code class=\"js\">set global wait_timeout=300; \n</code></pre>\n<p>修改这个数值，这里可以随意，最好控制在几分钟内</p>\n<pre><code class=\"js\">set global interactive_timeout=500; \n</code></pre>\n<p>修改这个数值，表示mysql在关闭一个连接之前要等待的秒数，至此可以让mysql自动关闭那些没用的连接，但要注意的是，正在使用的连接到了时间也会被关闭，因此这个时间值要合适</p>\n<h3 id=\"笨方法\"><a href=\"#笨方法\" class=\"headerlink\" title=\"笨方法\"></a>笨方法</h3><pre><code class=\"js\">select concat(&#39;KILL &#39;,id,&#39;;&#39;) from information_schema.processlist where user=&#39;root&#39;;\n</code></pre>\n<p>先把要kill的连接id都查询出来,然后一个个kill</p>\n"},{"title":"React基础","date":"2018-05-09T09:39:55.000Z","_content":"\n\n<!-- more -->\n\n[react官网](https://reactjs.org/docs/hello-world.html)\n\n## 组件\n\n#### 1. 无状态组件\n\n- 在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。\n- 无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。\n- 无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。\n\n```\nimport React from \"react\";\n\n//创建方式一,相当于es5的函数声明的方式创建\n function NoState (props) {\n     return (\n         <div>this is NoState Component</div>\n     )\n }\n```\n\n```\n//创建方式二,相当于es5的函数表达式的方式创建\nconst NoState = (props) => {\n    return (\n        <div>this is Nostate Component</div>\n    )\n}\n\nexport default NoState\n```\n\n--------------------------------------------------------------------------------\n\n- 无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。\n- 无状态组件没有实例化得过程，因此无法访问组件this中的对象\n- 无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理\n- 无状态组件只能访问传入的props，同样的props会得到同样的渲染结果\n\n当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来\n代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。\n第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同\n\n```\n// helloWorld.jsx\nimport React, {Component} from 'react';\nclass HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.props);\n        console.log(this.props.name);\n    }\n\n    render() {\n        return (\n            <div onClick={this.clickHander}>{ this.props.name } say: Hello World!</div>\n        )\n    }\n}\nexport default HelloWorld;\n```\n\n## 组件之间的交互\n\n#### 父组件与子组件之间的交互\n\n1. 父组件修改子组件，只需要修改传入的props属性\n2. 子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行\n子组件与子组件之间的交互\n3. 通过影响共同的父组件来进行交互\n\n```\nstate = {\n    switch: 0,\n    name: this.props.name1\n}\nclickHander = () => {\n    const {name1, name2} = this.props;\n    if (this.state.switch === 0) {\n        this.setState({\n            switch: 1,\n            name: name2\n        })\n    } else {\n        this.setState({\n            switch: 0,\n            name: name1\n        })\n    }\n};\nrender() {\n    return (\n        <div onClick={this.clickHander}>hello world !{this.state.name}</div>\n    )\n}\n```\n\n先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。\n\nstate = {} // 等同于ES5构造函数中的this.state = {}\n在对象中，我们可以通过this.state的方式来访问state中所存储的属性\nsetState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变\nreact赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了\n而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行\n// 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: 'Jason'})// 然后立即查看它的值console.log(this.state.name) // 仍然为Tom，不会立即改变\n\n### refs\n\nreact组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样\n\n```\n// 当然可能命名会是其他的，大概表达一个意思，不深究哈\n{\n    nodeName: 'div',\n    className: 'hello-world',\n    style: {},\n    parentNodes: 'root',\n    childrenNodes: []\n    ...\n}\n```\n\n而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的\n\n```\nimport React, { Component } from 'react';\nclass HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.refs)\n    } \n    render () {\n        return (\n            <div className=\"container\" onClick={this.clickHander}>\n                <div ref=\"hello\" className=\"hello\">Hello</div>\n                <div ref=\"world\" className=\"world\">World</div>\n            </div>\n        )\n    }\n}\nexport default HelloWorld;\n```\n\n为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替\n我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。\n当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。\n\n```\n// src/helloWorld.jsx\nimport React, { Component } from 'react';class HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.refs)\n    } refCallback = (elem) => {\n        console.log(elem);\n    } render () {\n        return (\n            <div className=\"container\" onClick={this.clickHander}>\n                <div ref=\"hello\" className=\"hello\">Hello</div>\n                <div ref={this.refCallback} className=\"world\">World</div>\n            </div>\n        )\n    }\n}export default HelloWorld;\n```\n\n### 组件生命周期\n\n件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数\n\n##### react组件有三种状态\n\n- Mounted：已经插入真实DOM\n- Updating：正在被重新渲染\n- Unmounted：已移出真实DOM\n-\n\n##### 每个状态的处理函数\n\n- will：函数在进入状态之前调用\n- did：函数在进入状态之后调用\n\n##### 组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\n\n- componentWillMount 在首次渲染完成之前，此时可修改组件的state\n- componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM\n\n##### 组件属性(我们前面提到的props与state)更新的前后时刻\n\n- componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state\n- componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素\n\n###### 组件取消挂载之前(取消之后就没必要提供钩子函数了)\n\n`componentWillUnmount`\n\n###### 两个特殊的处理函数\n\n- `componentWillReceiveProps(object nextProps)`：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变->然后componentWillReceiveProps去判断是否需要重新渲染(`shouldComponentUpdate`)->如果不需要则继续running->如果需要则执行`componentWillUpdate`->渲染DOM树之后执行`componentDidUpdate`->进入running\n- `shouldComponentUpdate(nextProps, nextState)`(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变->判断是否需要重新渲染新的props和state(`shouldComponentUpdate`) -> 根据判断决定执行render过程还是继续·保持running状态\n\n###### 三个统一调用的方法,用于组件初始化，获取默认属性和状态\n\n- getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享\n- getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props\n- render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出\n\n###### 已挂载的方法\n\n- component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候\n\n>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。\n\n![image](http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg)\n\n## PropTypes\n\n```\nimport PropTypes from 'prop-types';\n\nMyComponent.propTypes = {\n  // You can declare that a prop is a specific JS primitive. By default, these\n  // are all optional.\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // Anything that can be rendered: numbers, strings, elements or an array\n  // (or fragment) containing these types.\n  optionalNode: PropTypes.node,\n\n  // A React element.\n  optionalElement: PropTypes.element,\n\n  // You can also declare that a prop is an instance of a class. This uses\n  // JS's instanceof operator.\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // You can ensure that your prop is limited to specific values by treating\n  // it as an enum.\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // An object that could be one of many types\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // An array of a certain type\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // An object with property values of a certain type\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // An object taking on a particular shape\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n\n  // You can chain any of the above with `isRequired` to make sure a warning\n  // is shown if the prop isn't provided.\n  requiredFunc: PropTypes.func.isRequired,\n\n  // A value of any data type\n  requiredAny: PropTypes.any.isRequired,\n\n  // You can also specify a custom validator. It should return an Error\n  // object if the validation fails. Don't `console.warn` or throw, as this\n  // won't work inside `oneOfType`.\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  },\n\n  // You can also supply a custom validator to `arrayOf` and `objectOf`.\n  // It should return an Error object if the validation fails. The validator\n  // will be called for each key in the array or object. The first two\n  // arguments of the validator are the array or object itself, and the\n  // current item's key.\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        'Invalid prop `' + propFullName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  })\n};\n```\n","source":"_posts/React基础.md","raw":"---\ntitle: 'React基础'\ndate: 2018-05-09 17:39:55\ntags: react\n---\n\n\n<!-- more -->\n\n[react官网](https://reactjs.org/docs/hello-world.html)\n\n## 组件\n\n#### 1. 无状态组件\n\n- 在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。\n- 无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。\n- 无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。\n\n```\nimport React from \"react\";\n\n//创建方式一,相当于es5的函数声明的方式创建\n function NoState (props) {\n     return (\n         <div>this is NoState Component</div>\n     )\n }\n```\n\n```\n//创建方式二,相当于es5的函数表达式的方式创建\nconst NoState = (props) => {\n    return (\n        <div>this is Nostate Component</div>\n    )\n}\n\nexport default NoState\n```\n\n--------------------------------------------------------------------------------\n\n- 无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。\n- 无状态组件没有实例化得过程，因此无法访问组件this中的对象\n- 无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理\n- 无状态组件只能访问传入的props，同样的props会得到同样的渲染结果\n\n当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来\n代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。\n第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同\n\n```\n// helloWorld.jsx\nimport React, {Component} from 'react';\nclass HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.props);\n        console.log(this.props.name);\n    }\n\n    render() {\n        return (\n            <div onClick={this.clickHander}>{ this.props.name } say: Hello World!</div>\n        )\n    }\n}\nexport default HelloWorld;\n```\n\n## 组件之间的交互\n\n#### 父组件与子组件之间的交互\n\n1. 父组件修改子组件，只需要修改传入的props属性\n2. 子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行\n子组件与子组件之间的交互\n3. 通过影响共同的父组件来进行交互\n\n```\nstate = {\n    switch: 0,\n    name: this.props.name1\n}\nclickHander = () => {\n    const {name1, name2} = this.props;\n    if (this.state.switch === 0) {\n        this.setState({\n            switch: 1,\n            name: name2\n        })\n    } else {\n        this.setState({\n            switch: 0,\n            name: name1\n        })\n    }\n};\nrender() {\n    return (\n        <div onClick={this.clickHander}>hello world !{this.state.name}</div>\n    )\n}\n```\n\n先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。\n\nstate = {} // 等同于ES5构造函数中的this.state = {}\n在对象中，我们可以通过this.state的方式来访问state中所存储的属性\nsetState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变\nreact赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了\n而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行\n// 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: 'Jason'})// 然后立即查看它的值console.log(this.state.name) // 仍然为Tom，不会立即改变\n\n### refs\n\nreact组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样\n\n```\n// 当然可能命名会是其他的，大概表达一个意思，不深究哈\n{\n    nodeName: 'div',\n    className: 'hello-world',\n    style: {},\n    parentNodes: 'root',\n    childrenNodes: []\n    ...\n}\n```\n\n而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的\n\n```\nimport React, { Component } from 'react';\nclass HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.refs)\n    } \n    render () {\n        return (\n            <div className=\"container\" onClick={this.clickHander}>\n                <div ref=\"hello\" className=\"hello\">Hello</div>\n                <div ref=\"world\" className=\"world\">World</div>\n            </div>\n        )\n    }\n}\nexport default HelloWorld;\n```\n\n为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替\n我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。\n当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。\n\n```\n// src/helloWorld.jsx\nimport React, { Component } from 'react';class HelloWorld extends Component {\n    clickHander = () => {\n        console.log(this.refs)\n    } refCallback = (elem) => {\n        console.log(elem);\n    } render () {\n        return (\n            <div className=\"container\" onClick={this.clickHander}>\n                <div ref=\"hello\" className=\"hello\">Hello</div>\n                <div ref={this.refCallback} className=\"world\">World</div>\n            </div>\n        )\n    }\n}export default HelloWorld;\n```\n\n### 组件生命周期\n\n件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数\n\n##### react组件有三种状态\n\n- Mounted：已经插入真实DOM\n- Updating：正在被重新渲染\n- Unmounted：已移出真实DOM\n-\n\n##### 每个状态的处理函数\n\n- will：函数在进入状态之前调用\n- did：函数在进入状态之后调用\n\n##### 组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\n\n- componentWillMount 在首次渲染完成之前，此时可修改组件的state\n- componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM\n\n##### 组件属性(我们前面提到的props与state)更新的前后时刻\n\n- componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state\n- componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素\n\n###### 组件取消挂载之前(取消之后就没必要提供钩子函数了)\n\n`componentWillUnmount`\n\n###### 两个特殊的处理函数\n\n- `componentWillReceiveProps(object nextProps)`：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变->然后componentWillReceiveProps去判断是否需要重新渲染(`shouldComponentUpdate`)->如果不需要则继续running->如果需要则执行`componentWillUpdate`->渲染DOM树之后执行`componentDidUpdate`->进入running\n- `shouldComponentUpdate(nextProps, nextState)`(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变->判断是否需要重新渲染新的props和state(`shouldComponentUpdate`) -> 根据判断决定执行render过程还是继续·保持running状态\n\n###### 三个统一调用的方法,用于组件初始化，获取默认属性和状态\n\n- getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享\n- getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props\n- render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出\n\n###### 已挂载的方法\n\n- component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候\n\n>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。\n\n![image](http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg)\n\n## PropTypes\n\n```\nimport PropTypes from 'prop-types';\n\nMyComponent.propTypes = {\n  // You can declare that a prop is a specific JS primitive. By default, these\n  // are all optional.\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // Anything that can be rendered: numbers, strings, elements or an array\n  // (or fragment) containing these types.\n  optionalNode: PropTypes.node,\n\n  // A React element.\n  optionalElement: PropTypes.element,\n\n  // You can also declare that a prop is an instance of a class. This uses\n  // JS's instanceof operator.\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // You can ensure that your prop is limited to specific values by treating\n  // it as an enum.\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // An object that could be one of many types\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // An array of a certain type\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // An object with property values of a certain type\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // An object taking on a particular shape\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n\n  // You can chain any of the above with `isRequired` to make sure a warning\n  // is shown if the prop isn't provided.\n  requiredFunc: PropTypes.func.isRequired,\n\n  // A value of any data type\n  requiredAny: PropTypes.any.isRequired,\n\n  // You can also specify a custom validator. It should return an Error\n  // object if the validation fails. Don't `console.warn` or throw, as this\n  // won't work inside `oneOfType`.\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  },\n\n  // You can also supply a custom validator to `arrayOf` and `objectOf`.\n  // It should return an Error object if the validation fails. The validator\n  // will be called for each key in the array or object. The first two\n  // arguments of the validator are the array or object itself, and the\n  // current item's key.\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        'Invalid prop `' + propFullName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  })\n};\n```\n","slug":"React基础","published":1,"updated":"2023-01-18T07:07:27.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld4ablbp0009jfh06b4ue3ex","content":"<span id=\"more\"></span>\n\n<p><a href=\"https://reactjs.org/docs/hello-world.html\">react官网</a></p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><h4 id=\"1-无状态组件\"><a href=\"#1-无状态组件\" class=\"headerlink\" title=\"1. 无状态组件\"></a>1. 无状态组件</h4><ul>\n<li>在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。</li>\n<li>无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。</li>\n<li>无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。</li>\n</ul>\n<pre><code>import React from &quot;react&quot;;\n\n//创建方式一,相当于es5的函数声明的方式创建\n function NoState (props) &#123;\n     return (\n         &lt;div&gt;this is NoState Component&lt;/div&gt;\n     )\n &#125;\n</code></pre>\n<pre><code>//创建方式二,相当于es5的函数表达式的方式创建\nconst NoState = (props) =&gt; &#123;\n    return (\n        &lt;div&gt;this is Nostate Component&lt;/div&gt;\n    )\n&#125;\n\nexport default NoState\n</code></pre>\n<hr>\n<ul>\n<li>无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。</li>\n<li>无状态组件没有实例化得过程，因此无法访问组件this中的对象</li>\n<li>无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理</li>\n<li>无状态组件只能访问传入的props，同样的props会得到同样的渲染结果</li>\n</ul>\n<p>当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来<br>代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。<br>第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同</p>\n<pre><code>// helloWorld.jsx\nimport React, &#123;Component&#125; from &#39;react&#39;;\nclass HelloWorld extends Component &#123;\n    clickHander = () =&gt; &#123;\n        console.log(this.props);\n        console.log(this.props.name);\n    &#125;\n\n    render() &#123;\n        return (\n            &lt;div onClick=&#123;this.clickHander&#125;&gt;&#123; this.props.name &#125; say: Hello World!&lt;/div&gt;\n        )\n    &#125;\n&#125;\nexport default HelloWorld;\n</code></pre>\n<h2 id=\"组件之间的交互\"><a href=\"#组件之间的交互\" class=\"headerlink\" title=\"组件之间的交互\"></a>组件之间的交互</h2><h4 id=\"父组件与子组件之间的交互\"><a href=\"#父组件与子组件之间的交互\" class=\"headerlink\" title=\"父组件与子组件之间的交互\"></a>父组件与子组件之间的交互</h4><ol>\n<li>父组件修改子组件，只需要修改传入的props属性</li>\n<li>子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行<br>子组件与子组件之间的交互</li>\n<li>通过影响共同的父组件来进行交互</li>\n</ol>\n<pre><code>state = &#123;\n    switch: 0,\n    name: this.props.name1\n&#125;\nclickHander = () =&gt; &#123;\n    const &#123;name1, name2&#125; = this.props;\n    if (this.state.switch === 0) &#123;\n        this.setState(&#123;\n            switch: 1,\n            name: name2\n        &#125;)\n    &#125; else &#123;\n        this.setState(&#123;\n            switch: 0,\n            name: name1\n        &#125;)\n    &#125;\n&#125;;\nrender() &#123;\n    return (\n        &lt;div onClick=&#123;this.clickHander&#125;&gt;hello world !&#123;this.state.name&#125;&lt;/div&gt;\n    )\n&#125;\n</code></pre>\n<p>先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。</p>\n<p>state &#x3D; {} &#x2F;&#x2F; 等同于ES5构造函数中的this.state &#x3D; {}<br>在对象中，我们可以通过this.state的方式来访问state中所存储的属性<br>setState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变<br>react赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了<br>而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行<br>&#x2F;&#x2F; 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: ‘Jason’})&#x2F;&#x2F; 然后立即查看它的值console.log(this.state.name) &#x2F;&#x2F; 仍然为Tom，不会立即改变</p>\n<h3 id=\"refs\"><a href=\"#refs\" class=\"headerlink\" title=\"refs\"></a>refs</h3><p>react组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样</p>\n<pre><code>// 当然可能命名会是其他的，大概表达一个意思，不深究哈\n&#123;\n    nodeName: &#39;div&#39;,\n    className: &#39;hello-world&#39;,\n    style: &#123;&#125;,\n    parentNodes: &#39;root&#39;,\n    childrenNodes: []\n    ...\n&#125;\n</code></pre>\n<p>而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的</p>\n<pre><code>import React, &#123; Component &#125; from &#39;react&#39;;\nclass HelloWorld extends Component &#123;\n    clickHander = () =&gt; &#123;\n        console.log(this.refs)\n    &#125; \n    render () &#123;\n        return (\n            &lt;div className=&quot;container&quot; onClick=&#123;this.clickHander&#125;&gt;\n                &lt;div ref=&quot;hello&quot; className=&quot;hello&quot;&gt;Hello&lt;/div&gt;\n                &lt;div ref=&quot;world&quot; className=&quot;world&quot;&gt;World&lt;/div&gt;\n            &lt;/div&gt;\n        )\n    &#125;\n&#125;\nexport default HelloWorld;\n</code></pre>\n<p>为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替<br>我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。<br>当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。</p>\n<pre><code>// src/helloWorld.jsx\nimport React, &#123; Component &#125; from &#39;react&#39;;class HelloWorld extends Component &#123;\n    clickHander = () =&gt; &#123;\n        console.log(this.refs)\n    &#125; refCallback = (elem) =&gt; &#123;\n        console.log(elem);\n    &#125; render () &#123;\n        return (\n            &lt;div className=&quot;container&quot; onClick=&#123;this.clickHander&#125;&gt;\n                &lt;div ref=&quot;hello&quot; className=&quot;hello&quot;&gt;Hello&lt;/div&gt;\n                &lt;div ref=&#123;this.refCallback&#125; className=&quot;world&quot;&gt;World&lt;/div&gt;\n            &lt;/div&gt;\n        )\n    &#125;\n&#125;export default HelloWorld;\n</code></pre>\n<h3 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"组件生命周期\"></a>组件生命周期</h3><p>件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数</p>\n<h5 id=\"react组件有三种状态\"><a href=\"#react组件有三种状态\" class=\"headerlink\" title=\"react组件有三种状态\"></a>react组件有三种状态</h5><ul>\n<li>Mounted：已经插入真实DOM</li>\n<li>Updating：正在被重新渲染</li>\n<li>Unmounted：已移出真实DOM</li>\n<li></li>\n</ul>\n<h5 id=\"每个状态的处理函数\"><a href=\"#每个状态的处理函数\" class=\"headerlink\" title=\"每个状态的处理函数\"></a>每个状态的处理函数</h5><ul>\n<li>will：函数在进入状态之前调用</li>\n<li>did：函数在进入状态之后调用</li>\n</ul>\n<h5 id=\"组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\"><a href=\"#组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\" class=\"headerlink\" title=\"组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\"></a>组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中</h5><ul>\n<li>componentWillMount 在首次渲染完成之前，此时可修改组件的state</li>\n<li>componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM</li>\n</ul>\n<h5 id=\"组件属性-我们前面提到的props与state-更新的前后时刻\"><a href=\"#组件属性-我们前面提到的props与state-更新的前后时刻\" class=\"headerlink\" title=\"组件属性(我们前面提到的props与state)更新的前后时刻\"></a>组件属性(我们前面提到的props与state)更新的前后时刻</h5><ul>\n<li>componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state</li>\n<li>componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素</li>\n</ul>\n<h6 id=\"组件取消挂载之前-取消之后就没必要提供钩子函数了\"><a href=\"#组件取消挂载之前-取消之后就没必要提供钩子函数了\" class=\"headerlink\" title=\"组件取消挂载之前(取消之后就没必要提供钩子函数了)\"></a>组件取消挂载之前(取消之后就没必要提供钩子函数了)</h6><p><code>componentWillUnmount</code></p>\n<h6 id=\"两个特殊的处理函数\"><a href=\"#两个特殊的处理函数\" class=\"headerlink\" title=\"两个特殊的处理函数\"></a>两个特殊的处理函数</h6><ul>\n<li><code>componentWillReceiveProps(object nextProps)</code>：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变-&gt;然后componentWillReceiveProps去判断是否需要重新渲染(<code>shouldComponentUpdate</code>)-&gt;如果不需要则继续running-&gt;如果需要则执行<code>componentWillUpdate</code>-&gt;渲染DOM树之后执行<code>componentDidUpdate</code>-&gt;进入running</li>\n<li><code>shouldComponentUpdate(nextProps, nextState)</code>(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变-&gt;判断是否需要重新渲染新的props和state(<code>shouldComponentUpdate</code>) -&gt; 根据判断决定执行render过程还是继续·保持running状态</li>\n</ul>\n<h6 id=\"三个统一调用的方法-用于组件初始化，获取默认属性和状态\"><a href=\"#三个统一调用的方法-用于组件初始化，获取默认属性和状态\" class=\"headerlink\" title=\"三个统一调用的方法,用于组件初始化，获取默认属性和状态\"></a>三个统一调用的方法,用于组件初始化，获取默认属性和状态</h6><ul>\n<li>getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享</li>\n<li>getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props</li>\n<li>render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出</li>\n</ul>\n<h6 id=\"已挂载的方法\"><a href=\"#已挂载的方法\" class=\"headerlink\" title=\"已挂载的方法\"></a>已挂载的方法</h6><ul>\n<li>component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候</li>\n</ul>\n<blockquote>\n<p>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。</p>\n</blockquote>\n<p><img src=\"http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg\" alt=\"image\"></p>\n<h2 id=\"PropTypes\"><a href=\"#PropTypes\" class=\"headerlink\" title=\"PropTypes\"></a>PropTypes</h2><pre><code>import PropTypes from &#39;prop-types&#39;;\n\nMyComponent.propTypes = &#123;\n  // You can declare that a prop is a specific JS primitive. By default, these\n  // are all optional.\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // Anything that can be rendered: numbers, strings, elements or an array\n  // (or fragment) containing these types.\n  optionalNode: PropTypes.node,\n\n  // A React element.\n  optionalElement: PropTypes.element,\n\n  // You can also declare that a prop is an instance of a class. This uses\n  // JS&#39;s instanceof operator.\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // You can ensure that your prop is limited to specific values by treating\n  // it as an enum.\n  optionalEnum: PropTypes.oneOf([&#39;News&#39;, &#39;Photos&#39;]),\n\n  // An object that could be one of many types\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // An array of a certain type\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // An object with property values of a certain type\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // An object taking on a particular shape\n  optionalObjectWithShape: PropTypes.shape(&#123;\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  &#125;),\n\n  // You can chain any of the above with `isRequired` to make sure a warning\n  // is shown if the prop isn&#39;t provided.\n  requiredFunc: PropTypes.func.isRequired,\n\n  // A value of any data type\n  requiredAny: PropTypes.any.isRequired,\n\n  // You can also specify a custom validator. It should return an Error\n  // object if the validation fails. Don&#39;t `console.warn` or throw, as this\n  // won&#39;t work inside `oneOfType`.\n  customProp: function(props, propName, componentName) &#123;\n    if (!/matchme/.test(props[propName])) &#123;\n      return new Error(\n        &#39;Invalid prop `&#39; + propName + &#39;` supplied to&#39; +\n        &#39; `&#39; + componentName + &#39;`. Validation failed.&#39;\n      );\n    &#125;\n  &#125;,\n\n  // You can also supply a custom validator to `arrayOf` and `objectOf`.\n  // It should return an Error object if the validation fails. The validator\n  // will be called for each key in the array or object. The first two\n  // arguments of the validator are the array or object itself, and the\n  // current item&#39;s key.\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) &#123;\n    if (!/matchme/.test(propValue[key])) &#123;\n      return new Error(\n        &#39;Invalid prop `&#39; + propFullName + &#39;` supplied to&#39; +\n        &#39; `&#39; + componentName + &#39;`. Validation failed.&#39;\n      );\n    &#125;\n  &#125;)\n&#125;;\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://reactjs.org/docs/hello-world.html\">react官网</a></p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><h4 id=\"1-无状态组件\"><a href=\"#1-无状态组件\" class=\"headerlink\" title=\"1. 无状态组件\"></a>1. 无状态组件</h4><ul>\n<li>在React中，组件的名字必须用大写字母开头，而包含该组件定义的文件名也应该是大写字母(便于区分，也可以不是)。</li>\n<li>无状态组件是纯展示组件，仅仅只是用于数据的展示，只根据传入的props来进行展示，不涉及到state状态处理，通过函数式的方式来创建一个无状态函数式组件(大多数组件都是无状态组件，通过简单的组合可以构建成其他的组件，最后合并成一个大的应用)。</li>\n<li>无状态函数式组件是一个只带有render方法的组件，通过函数形式或者箭头函数形式创建，该组件无state状态。</li>\n</ul>\n<pre><code>import React from &quot;react&quot;;\n\n//创建方式一,相当于es5的函数声明的方式创建\n function NoState (props) &#123;\n     return (\n         &lt;div&gt;this is NoState Component&lt;/div&gt;\n     )\n &#125;\n</code></pre>\n<pre><code>//创建方式二,相当于es5的函数表达式的方式创建\nconst NoState = (props) =&gt; &#123;\n    return (\n        &lt;div&gt;this is Nostate Component&lt;/div&gt;\n    )\n&#125;\n\nexport default NoState\n</code></pre>\n<hr>\n<ul>\n<li>无状态函数式组件没有组件实例化的过程，成为一个render方法的函数来执行，减少分配的内存，使整体渲染性能得到提高，因此展示数据的组件优先选择这种方式。</li>\n<li>无状态组件没有实例化得过程，因此无法访问组件this中的对象</li>\n<li>无状态组件不需要组件生命周期管理和状态管理，底层在实现这种形式的组件的时候不会实现组件的生命周期方法，所以无状态组件不能参与组件生命周期管理</li>\n<li>无状态组件只能访问传入的props，同样的props会得到同样的渲染结果</li>\n</ul>\n<p>当我们的组件开始有逻辑处理，之前的那种方式胜任不了时索要采取的一种形式，通过继承react的Component对象而来<br>代码的render方法，则是Component中，专门提供的用来处理jsx模板的方法。<br>第一种方式不同的是，我们接收传入进来的参数，使用的是this.props，第一种方式将props放置于函数参数中，而这种方式则是将props挂载与实例对象上，因此会有所不同</p>\n<pre><code>// helloWorld.jsx\nimport React, &#123;Component&#125; from &#39;react&#39;;\nclass HelloWorld extends Component &#123;\n    clickHander = () =&gt; &#123;\n        console.log(this.props);\n        console.log(this.props.name);\n    &#125;\n\n    render() &#123;\n        return (\n            &lt;div onClick=&#123;this.clickHander&#125;&gt;&#123; this.props.name &#125; say: Hello World!&lt;/div&gt;\n        )\n    &#125;\n&#125;\nexport default HelloWorld;\n</code></pre>\n<h2 id=\"组件之间的交互\"><a href=\"#组件之间的交互\" class=\"headerlink\" title=\"组件之间的交互\"></a>组件之间的交互</h2><h4 id=\"父组件与子组件之间的交互\"><a href=\"#父组件与子组件之间的交互\" class=\"headerlink\" title=\"父组件与子组件之间的交互\"></a>父组件与子组件之间的交互</h4><ol>\n<li>父组件修改子组件，只需要修改传入的props属性</li>\n<li>子组件修改父组件，需要父组件向子组件传递一个函数，该函数在父组件中定义，在子组件中触发执行<br>子组件与子组件之间的交互</li>\n<li>通过影响共同的父组件来进行交互</li>\n</ol>\n<pre><code>state = &#123;\n    switch: 0,\n    name: this.props.name1\n&#125;\nclickHander = () =&gt; &#123;\n    const &#123;name1, name2&#125; = this.props;\n    if (this.state.switch === 0) &#123;\n        this.setState(&#123;\n            switch: 1,\n            name: name2\n        &#125;)\n    &#125; else &#123;\n        this.setState(&#123;\n            switch: 0,\n            name: name1\n        &#125;)\n    &#125;\n&#125;;\nrender() &#123;\n    return (\n        &lt;div onClick=&#123;this.clickHander&#125;&gt;hello world !&#123;this.state.name&#125;&lt;/div&gt;\n    )\n&#125;\n</code></pre>\n<p>先来说说state相关的基础知识。首先了解ES6 class语法的同学都应该知道，当我们通过这种方式来写的时候，其实是将state写入了构造函数之中。</p>\n<p>state &#x3D; {} &#x2F;&#x2F; 等同于ES5构造函数中的this.state &#x3D; {}<br>在对象中，我们可以通过this.state的方式来访问state中所存储的属性<br>setState接收一个对象，它的运行结果类似于执行一次assign方法。会修改传入的属性，而其他的属性则保持不变<br>react赋予state的特性，则是当state被修改时，会引起组件的一次重新渲染。即render方法会重新执行一次。也正是由于这个特性，因此当我们想要改变界面上的元素内容时，常常只需要改变state中的值就行了<br>而setState也有一个非常重要的特性，那就是，该方法是异步的。它并不会立即执行，而会在下一轮事件循环中执行<br>&#x2F;&#x2F; 假设state.name的初始值为Tom，我们改变它的值this.setState({    name: ‘Jason’})&#x2F;&#x2F; 然后立即查看它的值console.log(this.state.name) &#x2F;&#x2F; 仍然为Tom，不会立即改变</p>\n<h3 id=\"refs\"><a href=\"#refs\" class=\"headerlink\" title=\"refs\"></a>refs</h3><p>react组件其实是虚拟DOM，因此通常我们需要通过特殊的方式才能拿到真正的DOM元素。大概说一说虚拟DOM是个什么形式存在的，它其实就是通过js对象的方式将DOM元素相关的都存储其实，比如一个div元素可能会是这样</p>\n<pre><code>// 当然可能命名会是其他的，大概表达一个意思，不深究哈\n&#123;\n    nodeName: &#39;div&#39;,\n    className: &#39;hello-world&#39;,\n    style: &#123;&#125;,\n    parentNodes: &#39;root&#39;,\n    childrenNodes: []\n    ...\n&#125;\n</code></pre>\n<p>而我们想要拿到真实的DOM元素，react中提供了一种叫做ref的属性来实现这个目的</p>\n<pre><code>import React, &#123; Component &#125; from &#39;react&#39;;\nclass HelloWorld extends Component &#123;\n    clickHander = () =&gt; &#123;\n        console.log(this.refs)\n    &#125; \n    render () &#123;\n        return (\n            &lt;div className=&quot;container&quot; onClick=&#123;this.clickHander&#125;&gt;\n                &lt;div ref=&quot;hello&quot; className=&quot;hello&quot;&gt;Hello&lt;/div&gt;\n                &lt;div ref=&quot;world&quot; className=&quot;world&quot;&gt;World&lt;/div&gt;\n            &lt;/div&gt;\n        )\n    &#125;\n&#125;\nexport default HelloWorld;\n</code></pre>\n<p>为了区分ES6语法中的class关键字，当我们在jsx中给元素添加class时，需要使用className来代替<br>我们在jsx中，可以给元素添加ref属性，而这些拥有ref属性的元素，会统一放在组件对象的refs中，因此，当我们想要访问对应的真实DOM时，则通过this.refs来访问即可。<br>当然，ref的值不仅仅可以为一个名字，同时还可以为一个回调函数，这个函数会在render渲染时执行，也就是说，每当render函数执行一次，ref的回调函数也会执行一次。</p>\n<pre><code>// src/helloWorld.jsx\nimport React, &#123; Component &#125; from &#39;react&#39;;class HelloWorld extends Component &#123;\n    clickHander = () =&gt; &#123;\n        console.log(this.refs)\n    &#125; refCallback = (elem) =&gt; &#123;\n        console.log(elem);\n    &#125; render () &#123;\n        return (\n            &lt;div className=&quot;container&quot; onClick=&#123;this.clickHander&#125;&gt;\n                &lt;div ref=&quot;hello&quot; className=&quot;hello&quot;&gt;Hello&lt;/div&gt;\n                &lt;div ref=&#123;this.refCallback&#125; className=&quot;world&quot;&gt;World&lt;/div&gt;\n            &lt;/div&gt;\n        )\n    &#125;\n&#125;export default HelloWorld;\n</code></pre>\n<h3 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"组件生命周期\"></a>组件生命周期</h3><p>件的生命周期，指的就是一个组件，从创建到销毁的这样一个过程，react为组件的生命周期提供了很多的钩子函数</p>\n<h5 id=\"react组件有三种状态\"><a href=\"#react组件有三种状态\" class=\"headerlink\" title=\"react组件有三种状态\"></a>react组件有三种状态</h5><ul>\n<li>Mounted：已经插入真实DOM</li>\n<li>Updating：正在被重新渲染</li>\n<li>Unmounted：已移出真实DOM</li>\n<li></li>\n</ul>\n<h5 id=\"每个状态的处理函数\"><a href=\"#每个状态的处理函数\" class=\"headerlink\" title=\"每个状态的处理函数\"></a>每个状态的处理函数</h5><ul>\n<li>will：函数在进入状态之前调用</li>\n<li>did：函数在进入状态之后调用</li>\n</ul>\n<h5 id=\"组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\"><a href=\"#组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\" class=\"headerlink\" title=\"组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中\"></a>组件第一次渲染完成的前后时刻，所谓的渲染完成，即组件已经被渲染成为真实DOM并插入到了html之中</h5><ul>\n<li>componentWillMount 在首次渲染完成之前，此时可修改组件的state</li>\n<li>componentDidMount 真实DOM渲染完成之后，该方法可通过this.getDOMNode()访问到真实的DOM元素，可以使用其他的类库来操作这个DOM</li>\n</ul>\n<h5 id=\"组件属性-我们前面提到的props与state-更新的前后时刻\"><a href=\"#组件属性-我们前面提到的props与state-更新的前后时刻\" class=\"headerlink\" title=\"组件属性(我们前面提到的props与state)更新的前后时刻\"></a>组件属性(我们前面提到的props与state)更新的前后时刻</h5><ul>\n<li>componentWillUpdate 接收到一个新的state或者props时，在重新render之前调用，此时不允许更新props和state</li>\n<li>componentDidUpdate 组件完成更新之后调用，此时可访问新的DOM元素</li>\n</ul>\n<h6 id=\"组件取消挂载之前-取消之后就没必要提供钩子函数了\"><a href=\"#组件取消挂载之前-取消之后就没必要提供钩子函数了\" class=\"headerlink\" title=\"组件取消挂载之前(取消之后就没必要提供钩子函数了)\"></a>组件取消挂载之前(取消之后就没必要提供钩子函数了)</h6><p><code>componentWillUnmount</code></p>\n<h6 id=\"两个特殊的处理函数\"><a href=\"#两个特殊的处理函数\" class=\"headerlink\" title=\"两个特殊的处理函数\"></a>两个特殊的处理函数</h6><ul>\n<li><code>componentWillReceiveProps(object nextProps)</code>：组件接收到新的props时，在重新render之前调用,此时可以更改props和state。首先props发生改变-&gt;然后componentWillReceiveProps去判断是否需要重新渲染(<code>shouldComponentUpdate</code>)-&gt;如果不需要则继续running-&gt;如果需要则执行<code>componentWillUpdate</code>-&gt;渲染DOM树之后执行<code>componentDidUpdate</code>-&gt;进入running</li>\n<li><code>shouldComponentUpdate(nextProps, nextState)</code>(更新发生前立即被调用) 接收到一个新的state或者props时，在重新render之前调用，组件判断是否重新render前调用。首先state发生改变-&gt;判断是否需要重新渲染新的props和state(<code>shouldComponentUpdate</code>) -&gt; 根据判断决定执行render过程还是继续·保持running状态</li>\n</ul>\n<h6 id=\"三个统一调用的方法-用于组件初始化，获取默认属性和状态\"><a href=\"#三个统一调用的方法-用于组件初始化，获取默认属性和状态\" class=\"headerlink\" title=\"三个统一调用的方法,用于组件初始化，获取默认属性和状态\"></a>三个统一调用的方法,用于组件初始化，获取默认属性和状态</h6><ul>\n<li>getDefaultProps：作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享</li>\n<li>getInitialState：作用于组件的实例，在实例创建时只调用一次，，用于初始化没个实例的state，可访问this.props</li>\n<li>render：必选的方法，创建vistual DOM （1. 只能通过this.props和this.state访问数据 2. 可以返回null、false或任何React组件 3. 只能出现一个顶级组件（不能返回数组）4.不能改变组件的状态 5. 不能修改DOM的输出</li>\n</ul>\n<h6 id=\"已挂载的方法\"><a href=\"#已挂载的方法\" class=\"headerlink\" title=\"已挂载的方法\"></a>已挂载的方法</h6><ul>\n<li>component.forceUpdate() 可以在任何已经挂载的组件上使用，当你知道某些深处的组件状态未通过this.setState而改变了的时候</li>\n</ul>\n<blockquote>\n<p>componentDidMount，组件第一次渲染完成之后调用的componentDidMount，既然是组件第一次渲染完成之后才会调用，也就是说，该函数在react组件的生命周期中，只会调用一次。而渲染完成，则表示组件已经被渲染成为真实DOM插入了html中。所以这时候就可以通过ref获取真实元素。在实际开发中，常常需要通过ajax获取数据，而数据请求的这个行为，则最适合放在componentDidMount中来执行。通常会在首次渲染改变组件状态(state)的行为，或者称之为有副作用的行为，都建议放在componentDidMount中来执行。主要是因为state的改动会引发组件的重新渲染。</p>\n</blockquote>\n<p><img src=\"http://images2017.cnblogs.com/blog/1106982/201708/1106982-20170811224737742-1564011484.jpg\" alt=\"image\"></p>\n<h2 id=\"PropTypes\"><a href=\"#PropTypes\" class=\"headerlink\" title=\"PropTypes\"></a>PropTypes</h2><pre><code>import PropTypes from &#39;prop-types&#39;;\n\nMyComponent.propTypes = &#123;\n  // You can declare that a prop is a specific JS primitive. By default, these\n  // are all optional.\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // Anything that can be rendered: numbers, strings, elements or an array\n  // (or fragment) containing these types.\n  optionalNode: PropTypes.node,\n\n  // A React element.\n  optionalElement: PropTypes.element,\n\n  // You can also declare that a prop is an instance of a class. This uses\n  // JS&#39;s instanceof operator.\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // You can ensure that your prop is limited to specific values by treating\n  // it as an enum.\n  optionalEnum: PropTypes.oneOf([&#39;News&#39;, &#39;Photos&#39;]),\n\n  // An object that could be one of many types\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // An array of a certain type\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // An object with property values of a certain type\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // An object taking on a particular shape\n  optionalObjectWithShape: PropTypes.shape(&#123;\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  &#125;),\n\n  // You can chain any of the above with `isRequired` to make sure a warning\n  // is shown if the prop isn&#39;t provided.\n  requiredFunc: PropTypes.func.isRequired,\n\n  // A value of any data type\n  requiredAny: PropTypes.any.isRequired,\n\n  // You can also specify a custom validator. It should return an Error\n  // object if the validation fails. Don&#39;t `console.warn` or throw, as this\n  // won&#39;t work inside `oneOfType`.\n  customProp: function(props, propName, componentName) &#123;\n    if (!/matchme/.test(props[propName])) &#123;\n      return new Error(\n        &#39;Invalid prop `&#39; + propName + &#39;` supplied to&#39; +\n        &#39; `&#39; + componentName + &#39;`. Validation failed.&#39;\n      );\n    &#125;\n  &#125;,\n\n  // You can also supply a custom validator to `arrayOf` and `objectOf`.\n  // It should return an Error object if the validation fails. The validator\n  // will be called for each key in the array or object. The first two\n  // arguments of the validator are the array or object itself, and the\n  // current item&#39;s key.\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) &#123;\n    if (!/matchme/.test(propValue[key])) &#123;\n      return new Error(\n        &#39;Invalid prop `&#39; + propFullName + &#39;` supplied to&#39; +\n        &#39; `&#39; + componentName + &#39;`. Validation failed.&#39;\n      );\n    &#125;\n  &#125;)\n&#125;;\n</code></pre>"},{"title":"SEO技巧","date":"2023-01-11T04:08:10.000Z","_content":"\n# SEO技巧\n\n这篇文章其实是我本人的总结，因为工作中做完了一个官方网站并成功上线，最后组长检查代码看到我的keyword等一系列信息都是空的，把我骂得狗血淋头。一言不合就作总结，总结一些简单但是我们能做的seo小技巧，送给想把网站做到极致的人。\n\n## **SEO要点：**\n\n1. 语义化html标签，用合适的标签嵌套合适的内容，不可过分依赖div，对浏览器更友善就能更容易被抓取。\n2. 重要的内容html代码放在前面，放在左边。搜索引擎爬虫是从左往右，从上到下进行抓取的，利用布局来实现重要的代码在上面\n3. 重要内容要写在html架构里面，蜘蛛不会抓取js的内容，\n4. 尽量减少使用iframe，因为蜘蛛不会抓取iframe的内容。\n5. 为图片img加上alt属性，加了alt就不必加title了，避免搜索引擎认为我们恶意优化。alt能让图片没加载时都能有文字提示。\n6. 需要强调的地方加上title，本页面内跳转a标签内也要加title。\n7. 重要的地方可以保留文字，有些地方必须用图，但是蜘蛛不会爬img，这时应该设置文本，再用缩进隐藏的方法去掉文字，例如logo的优化就是这样做的。注意隐藏不能用display：none，蜘蛛不会检索display：none的内容，应用这个方法的标签一般是logo，标题等重要信息\n8. 尽量做到js、css、html的分离，不要在html中写样式代码。\n9. 注释的东西能去掉应该去掉，对搜索引擎更加友好\n10. css放在头部，js放在尾部，尽量使用外链或者工具对css和js进行压缩\n11. 减少http的请求，使页面更快加载。\n12. 使用本地缓存更快地访问网站，使用cdn网络，加快用户访问速度。\n13. 使用G-ZIP压缩，浏览速度更快，搜索引擎抓取信息量更大\n\n## **关键一点是头部的title，description，keyword的设置。**\n\n1. title设置不宜过长，要简短，网站的名字与相关的小内容，一般为10-20个字。不能重复\n2. keywords设置10个关键词，没个词不能太长，简短且符合你网站的特点，不能重复\n3. description，50个字内描述你的网站\n\n**description写原创的话，并包含2-3个关键词比较好**\n","source":"_posts/SEO技巧.md","raw":"---\ntitle: SEO技巧\ndate: 2023-01-11 12:08:10\ntags:\n---\n\n# SEO技巧\n\n这篇文章其实是我本人的总结，因为工作中做完了一个官方网站并成功上线，最后组长检查代码看到我的keyword等一系列信息都是空的，把我骂得狗血淋头。一言不合就作总结，总结一些简单但是我们能做的seo小技巧，送给想把网站做到极致的人。\n\n## **SEO要点：**\n\n1. 语义化html标签，用合适的标签嵌套合适的内容，不可过分依赖div，对浏览器更友善就能更容易被抓取。\n2. 重要的内容html代码放在前面，放在左边。搜索引擎爬虫是从左往右，从上到下进行抓取的，利用布局来实现重要的代码在上面\n3. 重要内容要写在html架构里面，蜘蛛不会抓取js的内容，\n4. 尽量减少使用iframe，因为蜘蛛不会抓取iframe的内容。\n5. 为图片img加上alt属性，加了alt就不必加title了，避免搜索引擎认为我们恶意优化。alt能让图片没加载时都能有文字提示。\n6. 需要强调的地方加上title，本页面内跳转a标签内也要加title。\n7. 重要的地方可以保留文字，有些地方必须用图，但是蜘蛛不会爬img，这时应该设置文本，再用缩进隐藏的方法去掉文字，例如logo的优化就是这样做的。注意隐藏不能用display：none，蜘蛛不会检索display：none的内容，应用这个方法的标签一般是logo，标题等重要信息\n8. 尽量做到js、css、html的分离，不要在html中写样式代码。\n9. 注释的东西能去掉应该去掉，对搜索引擎更加友好\n10. css放在头部，js放在尾部，尽量使用外链或者工具对css和js进行压缩\n11. 减少http的请求，使页面更快加载。\n12. 使用本地缓存更快地访问网站，使用cdn网络，加快用户访问速度。\n13. 使用G-ZIP压缩，浏览速度更快，搜索引擎抓取信息量更大\n\n## **关键一点是头部的title，description，keyword的设置。**\n\n1. title设置不宜过长，要简短，网站的名字与相关的小内容，一般为10-20个字。不能重复\n2. keywords设置10个关键词，没个词不能太长，简短且符合你网站的特点，不能重复\n3. description，50个字内描述你的网站\n\n**description写原创的话，并包含2-3个关键词比较好**\n","slug":"SEO技巧","published":1,"updated":"2023-01-11T04:08:24.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld4ablbq000ajfh07uepby5s","content":"<h1 id=\"SEO技巧\"><a href=\"#SEO技巧\" class=\"headerlink\" title=\"SEO技巧\"></a>SEO技巧</h1><p>这篇文章其实是我本人的总结，因为工作中做完了一个官方网站并成功上线，最后组长检查代码看到我的keyword等一系列信息都是空的，把我骂得狗血淋头。一言不合就作总结，总结一些简单但是我们能做的seo小技巧，送给想把网站做到极致的人。</p>\n<h2 id=\"SEO要点：\"><a href=\"#SEO要点：\" class=\"headerlink\" title=\"SEO要点：\"></a><strong>SEO要点：</strong></h2><ol>\n<li>语义化html标签，用合适的标签嵌套合适的内容，不可过分依赖div，对浏览器更友善就能更容易被抓取。</li>\n<li>重要的内容html代码放在前面，放在左边。搜索引擎爬虫是从左往右，从上到下进行抓取的，利用布局来实现重要的代码在上面</li>\n<li>重要内容要写在html架构里面，蜘蛛不会抓取js的内容，</li>\n<li>尽量减少使用iframe，因为蜘蛛不会抓取iframe的内容。</li>\n<li>为图片img加上alt属性，加了alt就不必加title了，避免搜索引擎认为我们恶意优化。alt能让图片没加载时都能有文字提示。</li>\n<li>需要强调的地方加上title，本页面内跳转a标签内也要加title。</li>\n<li>重要的地方可以保留文字，有些地方必须用图，但是蜘蛛不会爬img，这时应该设置文本，再用缩进隐藏的方法去掉文字，例如logo的优化就是这样做的。注意隐藏不能用display：none，蜘蛛不会检索display：none的内容，应用这个方法的标签一般是logo，标题等重要信息</li>\n<li>尽量做到js、css、html的分离，不要在html中写样式代码。</li>\n<li>注释的东西能去掉应该去掉，对搜索引擎更加友好</li>\n<li>css放在头部，js放在尾部，尽量使用外链或者工具对css和js进行压缩</li>\n<li>减少http的请求，使页面更快加载。</li>\n<li>使用本地缓存更快地访问网站，使用cdn网络，加快用户访问速度。</li>\n<li>使用G-ZIP压缩，浏览速度更快，搜索引擎抓取信息量更大</li>\n</ol>\n<h2 id=\"关键一点是头部的title，description，keyword的设置。\"><a href=\"#关键一点是头部的title，description，keyword的设置。\" class=\"headerlink\" title=\"关键一点是头部的title，description，keyword的设置。\"></a><strong>关键一点是头部的title，description，keyword的设置。</strong></h2><ol>\n<li>title设置不宜过长，要简短，网站的名字与相关的小内容，一般为10-20个字。不能重复</li>\n<li>keywords设置10个关键词，没个词不能太长，简短且符合你网站的特点，不能重复</li>\n<li>description，50个字内描述你的网站</li>\n</ol>\n<p><strong>description写原创的话，并包含2-3个关键词比较好</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SEO技巧\"><a href=\"#SEO技巧\" class=\"headerlink\" title=\"SEO技巧\"></a>SEO技巧</h1><p>这篇文章其实是我本人的总结，因为工作中做完了一个官方网站并成功上线，最后组长检查代码看到我的keyword等一系列信息都是空的，把我骂得狗血淋头。一言不合就作总结，总结一些简单但是我们能做的seo小技巧，送给想把网站做到极致的人。</p>\n<h2 id=\"SEO要点：\"><a href=\"#SEO要点：\" class=\"headerlink\" title=\"SEO要点：\"></a><strong>SEO要点：</strong></h2><ol>\n<li>语义化html标签，用合适的标签嵌套合适的内容，不可过分依赖div，对浏览器更友善就能更容易被抓取。</li>\n<li>重要的内容html代码放在前面，放在左边。搜索引擎爬虫是从左往右，从上到下进行抓取的，利用布局来实现重要的代码在上面</li>\n<li>重要内容要写在html架构里面，蜘蛛不会抓取js的内容，</li>\n<li>尽量减少使用iframe，因为蜘蛛不会抓取iframe的内容。</li>\n<li>为图片img加上alt属性，加了alt就不必加title了，避免搜索引擎认为我们恶意优化。alt能让图片没加载时都能有文字提示。</li>\n<li>需要强调的地方加上title，本页面内跳转a标签内也要加title。</li>\n<li>重要的地方可以保留文字，有些地方必须用图，但是蜘蛛不会爬img，这时应该设置文本，再用缩进隐藏的方法去掉文字，例如logo的优化就是这样做的。注意隐藏不能用display：none，蜘蛛不会检索display：none的内容，应用这个方法的标签一般是logo，标题等重要信息</li>\n<li>尽量做到js、css、html的分离，不要在html中写样式代码。</li>\n<li>注释的东西能去掉应该去掉，对搜索引擎更加友好</li>\n<li>css放在头部，js放在尾部，尽量使用外链或者工具对css和js进行压缩</li>\n<li>减少http的请求，使页面更快加载。</li>\n<li>使用本地缓存更快地访问网站，使用cdn网络，加快用户访问速度。</li>\n<li>使用G-ZIP压缩，浏览速度更快，搜索引擎抓取信息量更大</li>\n</ol>\n<h2 id=\"关键一点是头部的title，description，keyword的设置。\"><a href=\"#关键一点是头部的title，description，keyword的设置。\" class=\"headerlink\" title=\"关键一点是头部的title，description，keyword的设置。\"></a><strong>关键一点是头部的title，description，keyword的设置。</strong></h2><ol>\n<li>title设置不宜过长，要简短，网站的名字与相关的小内容，一般为10-20个字。不能重复</li>\n<li>keywords设置10个关键词，没个词不能太长，简短且符合你网站的特点，不能重复</li>\n<li>description，50个字内描述你的网站</li>\n</ol>\n<p><strong>description写原创的话，并包含2-3个关键词比较好</strong></p>\n"},{"title":"Nginx配置https","date":"2023-01-11T04:04:52.000Z","_content":"\n\n\n## ****SSL 证书部署****\n\n首先申请免费证书,推荐阿里或者七牛云[https://cn.aliyun.com/product/cas?from_alibabacloud=&source=5176.11533457&userCode=ywqc0ubl&type=copy](https://cn.aliyun.com/product/cas?from_alibabacloud=&source=5176.11533457&userCode=ywqc0ubl&type=copy)\n\n下载申请好的 ssl 证书文件压缩包到本地并解压到/etc/nginx/\n\n```jsx\n/etc/nginx/certificate.crt;\n/etc/nginx/private.key;\n```\n\n将这两个文件上传至服务器的/etc/nginx/目录里\n\n```jsx\nscp /Users/lilin/Downloads/certificate.crt root@xxx.xx.xxx.xx:/etc/nginx/\nscp /Users/lilin/Downloads/private.crt root@xxx.xx.xxx.xx:/etc/nginx/\n```\n\n## nginx.conf配置\n\n配置 https [server](https://link.segmentfault.com/?enc=j1N%2B5oPWtgTmj4YYsFd5ww%3D%3D.x32KBqxEXmGOwmMZfGjqRXhbghKgM1LsJhVbG%2B8iji5BQ1P9tGkbxC2u%2FdahY%2BV6).注释掉之前的 http server 配置,新增 https server\n\n```jsx\n将http重定向https\nserver {\n        listen 80;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;\n        return 301 https://$host$request_uri;\n }\n\nserver {\n        listen 443 ssl;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;\n\n        # 新版的nginx只用listen 443 ssl就行,需要注释\n        # ssl on;\n        keepalive_timeout 10m;\n        server_tokens off;\n        # 缓存SSL握手产生的参数和加密密钥的时长\n        ssl_session_timeout 10m;\n        # 证书\n        ssl_certificate /etc/nginx/certificate.crt;\n        ssl_certificate_key /etc/nginx/private.key;\n        # 日志\n        access_log /var/log/nginx/nginx.vhost.access.log;\n        error_log /var/log/nginx/nginx.vhost.error.log;\n\n        # 根用iframe嵌入做个隐式url\n        location / {\n            index index.html index.htm index.html inde.php;\n            root /usr/share/nginx/html;\n        }\n    }\n```\n","source":"_posts/Nginx配置https.md","raw":"---\ntitle: Nginx配置https\ndate: 2023-01-11 12:04:52\ntags:\n---\n\n\n\n## ****SSL 证书部署****\n\n首先申请免费证书,推荐阿里或者七牛云[https://cn.aliyun.com/product/cas?from_alibabacloud=&source=5176.11533457&userCode=ywqc0ubl&type=copy](https://cn.aliyun.com/product/cas?from_alibabacloud=&source=5176.11533457&userCode=ywqc0ubl&type=copy)\n\n下载申请好的 ssl 证书文件压缩包到本地并解压到/etc/nginx/\n\n```jsx\n/etc/nginx/certificate.crt;\n/etc/nginx/private.key;\n```\n\n将这两个文件上传至服务器的/etc/nginx/目录里\n\n```jsx\nscp /Users/lilin/Downloads/certificate.crt root@xxx.xx.xxx.xx:/etc/nginx/\nscp /Users/lilin/Downloads/private.crt root@xxx.xx.xxx.xx:/etc/nginx/\n```\n\n## nginx.conf配置\n\n配置 https [server](https://link.segmentfault.com/?enc=j1N%2B5oPWtgTmj4YYsFd5ww%3D%3D.x32KBqxEXmGOwmMZfGjqRXhbghKgM1LsJhVbG%2B8iji5BQ1P9tGkbxC2u%2FdahY%2BV6).注释掉之前的 http server 配置,新增 https server\n\n```jsx\n将http重定向https\nserver {\n        listen 80;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;\n        return 301 https://$host$request_uri;\n }\n\nserver {\n        listen 443 ssl;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;\n\n        # 新版的nginx只用listen 443 ssl就行,需要注释\n        # ssl on;\n        keepalive_timeout 10m;\n        server_tokens off;\n        # 缓存SSL握手产生的参数和加密密钥的时长\n        ssl_session_timeout 10m;\n        # 证书\n        ssl_certificate /etc/nginx/certificate.crt;\n        ssl_certificate_key /etc/nginx/private.key;\n        # 日志\n        access_log /var/log/nginx/nginx.vhost.access.log;\n        error_log /var/log/nginx/nginx.vhost.error.log;\n\n        # 根用iframe嵌入做个隐式url\n        location / {\n            index index.html index.htm index.html inde.php;\n            root /usr/share/nginx/html;\n        }\n    }\n```\n","slug":"Nginx配置https","published":1,"updated":"2023-01-18T07:07:32.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld4ablbt000cjfh0gjyz7ypd","content":"<h2 id=\"SSL-证书部署\"><a href=\"#SSL-证书部署\" class=\"headerlink\" title=\"SSL 证书部署\"></a><strong><strong>SSL 证书部署</strong></strong></h2><p>首先申请免费证书,推荐阿里或者七牛云<a href=\"https://cn.aliyun.com/product/cas?from_alibabacloud=&source=5176.11533457&userCode=ywqc0ubl&type=copy\">https://cn.aliyun.com/product/cas?from_alibabacloud&#x3D;&amp;source&#x3D;5176.11533457&amp;userCode&#x3D;ywqc0ubl&amp;type&#x3D;copy</a></p>\n<p>下载申请好的 ssl 证书文件压缩包到本地并解压到&#x2F;etc&#x2F;nginx&#x2F;</p>\n<pre><code class=\"jsx\">/etc/nginx/certificate.crt;\n/etc/nginx/private.key;\n</code></pre>\n<p>将这两个文件上传至服务器的&#x2F;etc&#x2F;nginx&#x2F;目录里</p>\n<pre><code class=\"jsx\">scp /Users/lilin/Downloads/certificate.crt root@xxx.xx.xxx.xx:/etc/nginx/\nscp /Users/lilin/Downloads/private.crt root@xxx.xx.xxx.xx:/etc/nginx/\n</code></pre>\n<h2 id=\"nginx-conf配置\"><a href=\"#nginx-conf配置\" class=\"headerlink\" title=\"nginx.conf配置\"></a>nginx.conf配置</h2><p>配置 https <a href=\"https://link.segmentfault.com/?enc=j1N+5oPWtgTmj4YYsFd5ww==.x32KBqxEXmGOwmMZfGjqRXhbghKgM1LsJhVbG+8iji5BQ1P9tGkbxC2u/dahY+V6\">server</a>.注释掉之前的 http server 配置,新增 https server</p>\n<pre><code class=\"jsx\">将http重定向https\nserver &#123;\n        listen 80;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;\n        return 301 https://$host$request_uri;\n &#125;\n\nserver &#123;\n        listen 443 ssl;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;\n\n        # 新版的nginx只用listen 443 ssl就行,需要注释\n        # ssl on;\n        keepalive_timeout 10m;\n        server_tokens off;\n        # 缓存SSL握手产生的参数和加密密钥的时长\n        ssl_session_timeout 10m;\n        # 证书\n        ssl_certificate /etc/nginx/certificate.crt;\n        ssl_certificate_key /etc/nginx/private.key;\n        # 日志\n        access_log /var/log/nginx/nginx.vhost.access.log;\n        error_log /var/log/nginx/nginx.vhost.error.log;\n\n        # 根用iframe嵌入做个隐式url\n        location / &#123;\n            index index.html index.htm index.html inde.php;\n            root /usr/share/nginx/html;\n        &#125;\n    &#125;\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SSL-证书部署\"><a href=\"#SSL-证书部署\" class=\"headerlink\" title=\"SSL 证书部署\"></a><strong><strong>SSL 证书部署</strong></strong></h2><p>首先申请免费证书,推荐阿里或者七牛云<a href=\"https://cn.aliyun.com/product/cas?from_alibabacloud=&source=5176.11533457&userCode=ywqc0ubl&type=copy\">https://cn.aliyun.com/product/cas?from_alibabacloud&#x3D;&amp;source&#x3D;5176.11533457&amp;userCode&#x3D;ywqc0ubl&amp;type&#x3D;copy</a></p>\n<p>下载申请好的 ssl 证书文件压缩包到本地并解压到&#x2F;etc&#x2F;nginx&#x2F;</p>\n<pre><code class=\"jsx\">/etc/nginx/certificate.crt;\n/etc/nginx/private.key;\n</code></pre>\n<p>将这两个文件上传至服务器的&#x2F;etc&#x2F;nginx&#x2F;目录里</p>\n<pre><code class=\"jsx\">scp /Users/lilin/Downloads/certificate.crt root@xxx.xx.xxx.xx:/etc/nginx/\nscp /Users/lilin/Downloads/private.crt root@xxx.xx.xxx.xx:/etc/nginx/\n</code></pre>\n<h2 id=\"nginx-conf配置\"><a href=\"#nginx-conf配置\" class=\"headerlink\" title=\"nginx.conf配置\"></a>nginx.conf配置</h2><p>配置 https <a href=\"https://link.segmentfault.com/?enc=j1N+5oPWtgTmj4YYsFd5ww==.x32KBqxEXmGOwmMZfGjqRXhbghKgM1LsJhVbG+8iji5BQ1P9tGkbxC2u/dahY+V6\">server</a>.注释掉之前的 http server 配置,新增 https server</p>\n<pre><code class=\"jsx\">将http重定向https\nserver &#123;\n        listen 80;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;\n        return 301 https://$host$request_uri;\n &#125;\n\nserver &#123;\n        listen 443 ssl;\n        server_name ptg.life www.ptg.life noval.ptg.life prompt.ptg.life naifu.ptg.life;\n\n        # 新版的nginx只用listen 443 ssl就行,需要注释\n        # ssl on;\n        keepalive_timeout 10m;\n        server_tokens off;\n        # 缓存SSL握手产生的参数和加密密钥的时长\n        ssl_session_timeout 10m;\n        # 证书\n        ssl_certificate /etc/nginx/certificate.crt;\n        ssl_certificate_key /etc/nginx/private.key;\n        # 日志\n        access_log /var/log/nginx/nginx.vhost.access.log;\n        error_log /var/log/nginx/nginx.vhost.error.log;\n\n        # 根用iframe嵌入做个隐式url\n        location / &#123;\n            index index.html index.htm index.html inde.php;\n            root /usr/share/nginx/html;\n        &#125;\n    &#125;\n</code></pre>\n"},{"title":"Ubuntu18安装nginx","date":"2023-01-11T04:04:03.000Z","_content":"\n### **apt安装**sudo apt update\n\n```jsx\nsudo apt install nginx\n\nnginx -V\n\n默认安装路径 /etc/nginx/nginx.conf\n```\n\n### **nginx安装位置**\n\n```jsx\n**whereis nginx**\n```\n\n### **启动**\n\n```jsx\nservice nginx start\n```\n\n### **检查nginx配置文件**\n\n```jsx\nservice nginx reload\n```\n\n### **重启**\n\n```jsx\nnginx -s reopen\n```\n\n### **停止**\n\n```jsx\nnginx -s stop\n```\n\n### 端口占用\n\n```jsx\n查看端口\nnetstat -lntp\n\nnginx端口\ntcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      248057/nginx: master\n\n结束端口\nkill 248057\n\n重启nginx\nservice nginx restart\n\n```\n","source":"_posts/Ubuntu18安装nginx.md","raw":"---\ntitle: Ubuntu18安装nginx\ndate: 2023-01-11 12:04:03\ntags:\n---\n\n### **apt安装**sudo apt update\n\n```jsx\nsudo apt install nginx\n\nnginx -V\n\n默认安装路径 /etc/nginx/nginx.conf\n```\n\n### **nginx安装位置**\n\n```jsx\n**whereis nginx**\n```\n\n### **启动**\n\n```jsx\nservice nginx start\n```\n\n### **检查nginx配置文件**\n\n```jsx\nservice nginx reload\n```\n\n### **重启**\n\n```jsx\nnginx -s reopen\n```\n\n### **停止**\n\n```jsx\nnginx -s stop\n```\n\n### 端口占用\n\n```jsx\n查看端口\nnetstat -lntp\n\nnginx端口\ntcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      248057/nginx: master\n\n结束端口\nkill 248057\n\n重启nginx\nservice nginx restart\n\n```\n","slug":"Ubuntu18安装nginx","published":1,"updated":"2023-01-18T07:07:20.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld4ablbv000ejfh0bz2r4dlj","content":"<h3 id=\"apt安装sudo-apt-update\"><a href=\"#apt安装sudo-apt-update\" class=\"headerlink\" title=\"apt安装sudo apt update\"></a><strong>apt安装</strong>sudo apt update</h3><pre><code class=\"jsx\">sudo apt install nginx\n\nnginx -V\n\n默认安装路径 /etc/nginx/nginx.conf\n</code></pre>\n<h3 id=\"nginx安装位置\"><a href=\"#nginx安装位置\" class=\"headerlink\" title=\"nginx安装位置\"></a><strong>nginx安装位置</strong></h3><pre><code class=\"jsx\">**whereis nginx**\n</code></pre>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a><strong>启动</strong></h3><pre><code class=\"jsx\">service nginx start\n</code></pre>\n<h3 id=\"检查nginx配置文件\"><a href=\"#检查nginx配置文件\" class=\"headerlink\" title=\"检查nginx配置文件\"></a><strong>检查nginx配置文件</strong></h3><pre><code class=\"jsx\">service nginx reload\n</code></pre>\n<h3 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a><strong>重启</strong></h3><pre><code class=\"jsx\">nginx -s reopen\n</code></pre>\n<h3 id=\"停止\"><a href=\"#停止\" class=\"headerlink\" title=\"停止\"></a><strong>停止</strong></h3><pre><code class=\"jsx\">nginx -s stop\n</code></pre>\n<h3 id=\"端口占用\"><a href=\"#端口占用\" class=\"headerlink\" title=\"端口占用\"></a>端口占用</h3><pre><code class=\"jsx\">查看端口\nnetstat -lntp\n\nnginx端口\ntcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      248057/nginx: master\n\n结束端口\nkill 248057\n\n重启nginx\nservice nginx restart\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"apt安装sudo-apt-update\"><a href=\"#apt安装sudo-apt-update\" class=\"headerlink\" title=\"apt安装sudo apt update\"></a><strong>apt安装</strong>sudo apt update</h3><pre><code class=\"jsx\">sudo apt install nginx\n\nnginx -V\n\n默认安装路径 /etc/nginx/nginx.conf\n</code></pre>\n<h3 id=\"nginx安装位置\"><a href=\"#nginx安装位置\" class=\"headerlink\" title=\"nginx安装位置\"></a><strong>nginx安装位置</strong></h3><pre><code class=\"jsx\">**whereis nginx**\n</code></pre>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a><strong>启动</strong></h3><pre><code class=\"jsx\">service nginx start\n</code></pre>\n<h3 id=\"检查nginx配置文件\"><a href=\"#检查nginx配置文件\" class=\"headerlink\" title=\"检查nginx配置文件\"></a><strong>检查nginx配置文件</strong></h3><pre><code class=\"jsx\">service nginx reload\n</code></pre>\n<h3 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a><strong>重启</strong></h3><pre><code class=\"jsx\">nginx -s reopen\n</code></pre>\n<h3 id=\"停止\"><a href=\"#停止\" class=\"headerlink\" title=\"停止\"></a><strong>停止</strong></h3><pre><code class=\"jsx\">nginx -s stop\n</code></pre>\n<h3 id=\"端口占用\"><a href=\"#端口占用\" class=\"headerlink\" title=\"端口占用\"></a>端口占用</h3><pre><code class=\"jsx\">查看端口\nnetstat -lntp\n\nnginx端口\ntcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      248057/nginx: master\n\n结束端口\nkill 248057\n\n重启nginx\nservice nginx restart\n</code></pre>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cld4ablbp0009jfh06b4ue3ex","tag_id":"cld4ablbr000bjfh0gjkzdp4o","_id":"cld4ablbu000djfh02ndpe3yt"}],"Tag":[{"name":"react","_id":"cld4ablbr000bjfh0gjkzdp4o"}]}}